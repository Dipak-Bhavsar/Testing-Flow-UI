export default {
    // concatProcessor: {
    //     blockId: 1,
    //     name: "",
    //     description: "",
    //     type: "",
    //     pluginId: "",
    //     pluginVersion: "",
    //     fields: [
    //         {
    //             name: "fields",
    //             value: "",
    //             type: "list",
    //             label: "Fields",
    //             subLabel: "",
    //             required: true,
    //             disabled: false,
    //             options: [
    //                 {
    //                     name: "textInput",
    //                     value: "",
    //                     type: "text",
    //                     label: "Name",
    //                     subLabel: "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab, asperiores laboriosam. Veritatis laborum in sint",
    //                     placeholder: "Field Name",
    //                     required: true,
    //                     disabled: false,
    //                     validation: {},
    //                     tooltip: "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab, asperiores laboriosam. Veritatis laborum in sint",
    //                 },
    //             ],
    //             validation: {},
    //             tooltip: "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab, asperiores laboriosam. Veritatis laborum in sint",
    //         },
    //         {
    //             name: "separator",
    //             value: "",
    //             type: "text",
    //             label: "Separator",
    //             subLabel: "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab, asperiores laboriosam. Veritatis laborum in sint",
    //             placeholder: "i.e. Users DB (readonly) or Internal Admin API",
    //             required: true,
    //             disabled: false,
    //             validation: {},
    //             tooltip: "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab, asperiores laboriosam. Veritatis laborum in sint",
    //         },
    //         {
    //             name: "targetField",
    //             value: "",
    //             type: "text",
    //             label: "TargetField",
    //             subLabel: "",
    //             placeholder: "i.e. Users DB (readonly) or Internal Admin API",
    //             required: true,
    //             disabled: false,
    //             validation: {},
    //             tooltip: "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab, asperiores laboriosam. Veritatis laborum in sint",
    //         },
    //     ],
    // },
    // setValueProcessor: {
    //     blockId: 1,
    //     name: "",
    //     description: "",
    //     type: "",
    //     pluginId: "",
    //     pluginVersion: "",
    //     fields: [
    //         {
    //             name: "targetField",
    //             value: "",
    //             type: "text",
    //             label: "TargetField",
    //             subLabel: "",
    //             placeholder: "i.e. Users DB (readonly) or Internal Admin API",
    //             required: true,
    //             disabled: false,
    //             validation: {},
    //             tooltip: "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab, asperiores laboriosam. Veritatis laborum in sint",
    //         },
    //         {
    //             name: "value",
    //             value: "",
    //             type: "text",
    //             label: "value",
    //             subLabel: "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab, asperiores laboriosam. Veritatis laborum in sint",
    //             placeholder: "i.e. Users DB (readonly) or Internal Admin API",
    //             required: true,
    //             disabled: false,
    //             validation: {},
    //             tooltip: "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab, asperiores laboriosam. Veritatis laborum in sint",
    //         },
    //     ],
    // },
    // trimProcessor: {
    //     blockId: 1,
    //     name: "",
    //     description: "",
    //     type: "",
    //     pluginId: "",
    //     pluginVersion: "",
    //     fields: [
    //         {
    //             name: "textInput",
    //             value: "",
    //             type: "text",
    //             label: "sourceField",
    //             subLabel: "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab, asperiores laboriosam. Veritatis laborum in sint",
    //             placeholder: "i.e. Users DB (readonly) or Internal Admin API",
    //             required: true,
    //             disabled: false,
    //             validation: {},
    //             tooltip: "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab, asperiores laboriosam. Veritatis laborum in sint",
    //         },
    //         {
    //             name: "textareaInput",
    //             value: "",
    //             type: "textarea",
    //             label: "targetField",
    //             subLabel: "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab, asperiores laboriosam. Veritatis laborum in sint",
    //             placeholder: "i.e. Users DB (readonly) or Internal Admin API",
    //             required: true,
    //             disabled: false,
    //             validation: {},
    //             tooltip: "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ab, asperiores laboriosam. Veritatis laborum in sint",
    //         },
    //     ],
    // },

    setBrowser: {
        blockId: "",
        methodId: "",
        type: "setBrowser",
        classObject: "WebDriver", // Replace with the appropriate class name
        name: "setBrowser",
        label: "Browser Name",
        description: "Dynamically launches the selected browser by creating the appropriate WebDriver instance.",
        command: "WebDriver driver = new <BrowserDriver>();",
        methodSignature: "WebDriver driver = new <BrowserDriver>();",
        fields: [
            {
                name: "browser",
                type: "select",
                label: "Browser Name",
                placeholder: "Select a browser to launch",
                options: [
                    { value: "chrome", label: "Google Chrome" },
                    { value: "firefox", label: "Mozilla Firefox" },
                    { value: "edge", label: "Microsoft Edge" },
                    { value: "safari", label: "Apple Safari" },
                    { value: "opera", label: "Opera" },
                    { value: "ie", label: "Internet Explorer" },
                    { value: "brave", label: "Brave" },
                    { value: "chromium", label: "Chromium" },
                    { value: "yandex", label: "Yandex" },
                ],
                value: "",
            },
        ],
        returnType: "WebDriver",
    },
    //interface SearchContext
    // findElement: {
    //     blockId: "",
    //     methodId: "",
    //     type: "findElement",
    //     classObject: "SearchContext",
    //     name: "findElement",
    //     label: "Find Element",
    //     description: "It is used to locate a single web element on a webpage.",
    //     command: "findElement",
    //     methodSignature: "findElement(By): WebElement",
    //     fields: [
    //         {
    //             name: "WebElement",
    //             value: "",
    //             type: "select",
    //             label: "WebElement",
    //             subLabel: "",
    //             required: true,
    //             disabled: false,
    //             options: [
    //                 {
    //                     name: "browserWindow",
    //                     value: "browserWindow",
    //                     type: "window",
    //                     label: "Browser Window",
    //                     tooltip: "Select a browser window action",
    //                 },

    //                 {
    //                     name: "alertPopup",
    //                     value: "alertPopup",
    //                     type: "alert",
    //                     label: "Alert/Popup",
    //                     tooltip: "Choose an alert or popup type",
    //                 },

    //                 {
    //                     name: "cookies",
    //                     value: "cookies",
    //                     type: "cookie",
    //                     label: "Cookies",
    //                     tooltip: "Manage your cookie preferences",
    //                 },

    //                 {
    //                     name: "storage",
    //                     value: "storage",
    //                     type: "storage",
    //                     label: "Storage",
    //                     tooltip: "Choose between session and local storage",
    //                 },

    //                 {
    //                     name: "title",
    //                     value: "title",
    //                     type: "text",
    //                     label: "Title",
    //                     tooltip: "Provide a title for the content",
    //                 },

    //                 {
    //                     name: "pageSource",
    //                     value: "pageSource",
    //                     type: "text",
    //                     label: "Page Source",
    //                     tooltip: "Input the source code or URL of the page",
    //                 },

    //                 {
    //                     name: "currentURL",
    //                     value: "currentURL",
    //                     type: "text",
    //                     label: "Current URL",
    //                     tooltip: "Provide the current URL of the page",
    //                 },

    //                 {
    //                     name: "textField",
    //                     value: "textField",
    //                     type: "text",
    //                     label: "Text Field",
    //                     tooltip: "Enter plain text",
    //                 },
    //                 {
    //                     name: "passwordField",
    //                     value: "passwordField",
    //                     type: "password",
    //                     label: "Password Field",
    //                     tooltip: "Enter your password",
    //                 },
    //                 {
    //                     name: "searchInput",
    //                     value: "searchInput",
    //                     type: "search",
    //                     label: "Search",
    //                     tooltip: "Enter keywords and press enter to search",
    //                 },
    //                 {
    //                     name: "emailField",
    //                     value: "emailField",
    //                     type: "email",
    //                     label: "Email",
    //                     tooltip: "Enter your email address",
    //                 },
    //                 {
    //                     name: "numberInput",
    //                     value: "numberInput",
    //                     type: "number",
    //                     label: "Enter Number",
    //                     tooltip: "Input a valid number",
    //                 },
    //                 {
    //                     name: "textArea",
    //                     value: "textArea",
    //                     type: "textarea",
    //                     label: "Text Area",
    //                     tooltip: "Enter multi-line text",
    //                 },

    //                 {
    //                     name: "submitButton",
    //                     value: "submitButton",
    //                     type: "button",
    //                     label: "Custom Submit",
    //                     tooltip: "Click to trigger custom submission logic",
    //                 },

    //                 {
    //                     name: "submitButton",
    //                     value: "submitButton",
    //                     type: "submit",
    //                     label: "Submit Form",
    //                     tooltip: "Click to submit the form automatically",
    //                 },

    //                 {
    //                     name: "inputButton",
    //                     value: "Click Me",
    //                     type: "button",
    //                     label: "Input Button",
    //                     tooltip: "Click to perform the input action",
    //                 },

    //                 {
    //                     name: "link",
    //                     value: "Link",
    //                     type: "link",
    //                     label: "Input Link",
    //                     tooltip: "Click to perform the input action",
    //                 },

    //                 {
    //                     name: "checkbox",
    //                     value: "checkbox",
    //                     type: "checkbox",
    //                     label: "Checkbox",
    //                     tooltip: "Select the checkbox if applicable",
    //                 },

    //                 {
    //                     name: "radioButton",
    //                     value: "radioButton",
    //                     type: "radio",
    //                     label: "Radio Button",
    //                     tooltip: "Select one of the options",
    //                 },

    //                 {
    //                     name: "dropdownSelect",
    //                     value: "dropdownSelect",
    //                     type: "select",
    //                     label: "Dropdown",
    //                     tooltip: "Choose an option from the dropdown",
    //                 },

    //                 {
    //                     name: "fileUpload",
    //                     value: "fileUpload",
    //                     type: "file",
    //                     label: "File Upload",
    //                     tooltip: "Upload a file from your device",
    //                 },

    //                 {
    //                     name: "mainForm",
    //                     value: "mainForm",
    //                     type: "form",
    //                     label: "Main Form",
    //                     tooltip: "Fill out and submit the form",
    //                 },

    //                 {
    //                     name: "dateInput",
    //                     value: "dateInput",
    //                     type: "date",
    //                     label: "Select Date",
    //                     tooltip: "Choose a date from the calendar",
    //                 },

    //                 {
    //                     name: "rangeInput",
    //                     value: 100, // Default value, can be adjusted as needed
    //                     type: "range",
    //                     label: "Select Value",
    //                     tooltip: "Drag the slider to select a value",
    //                 },

    //                 {
    //                     name: "paragraphText",
    //                     value: "paragraphText",
    //                     type: "paragraph",
    //                     label: "Paragraph",
    //                     tooltip: "This content will be displayed as a paragraph",
    //                 },

    //                 {
    //                     name: "pageHeading",
    //                     value: "pageHeading",
    //                     type: "heading",
    //                     level: "h1", // can be 'h1', 'h2', 'h3', etc.
    //                     label: "Main Heading",
    //                     tooltip: "This heading is used for the main title of the page",
    //                 },

    //                 {
    //                     name: "formLabel",
    //                     value: "NaformLabelme:",
    //                     type: "label",
    //                     label: "Form Label",
    //                     tooltip: "This label identifies the associated form element",
    //                 },

    //                 {
    //                     name: "textSpan",
    //                     value: "textSpan",
    //                     type: "span",
    //                     label: "Inline Text",
    //                     tooltip: "This span element is used for inline text styling",
    //                 },

    //                 {
    //                     name: "linkAnchor",
    //                     value: "Click here",
    //                     type: "link",
    //                     label: "Navigation Link",
    //                     tooltip: "Click to visit the target page",
    //                     href: "https://www.example.com", // Destination URL
    //                     target: "_blank", // Opens link in a new tab
    //                 },

    //                 {
    //                     name: "mainMenu",
    //                     type: "menu",
    //                     label: "Main Menu",
    //                     subLabel: "Primary navigation",
    //                     tooltip: "Navigate through main sections",
    //                 },

    //                 {
    //                     name: "breadcrumbNavigation",
    //                     value: "breadcrumbNavigation",
    //                     type: "breadcrumbNavigation",
    //                     label: "Breadcrumb Navigation",
    //                 },

    //                 {
    //                     name: "dragDropContainer",
    //                     value: "dragDropContainer",
    //                     type: "dragAndDrop",
    //                     label: "Drag & Drop",
    //                 },

    //                 {
    //                     name: "volumeSlider",
    //                     value: 30, // Default slider value
    //                     type: "slider",
    //                     label: "Slider",
    //                     orientation: "horizontal", // could also be 'vertical'
    //                 },

    //                 {
    //                     name: "resizablePanel",
    //                     value: "resizablePanel",
    //                     type: "resizable",
    //                     label: "Resizable Panel",
    //                 },

    //                 {
    //                     name: "dataTable",
    //                     value: "dataTable",
    //                     type: "table",
    //                     label: "Data Table",
    //                 },

    //                 {
    //                     name: "tableRow1",
    //                     value: "tableRow1",
    //                     type: "tableRow",
    //                     label: "Table Row",
    //                 },

    //                 {
    //                     name: "tableCell1",
    //                     value: "tableCell1",
    //                     type: "tableCell",
    //                     label: "Table Cell",
    //                     tooltip: "This cell shows the user's name",
    //                 },

    //                 {
    //                     name: "tableHeader1",
    //                     value: "tableHeader1",
    //                     type: "tableHeader",
    //                     label: "Table Header",
    //                     subLabel: "Column header for Name",
    //                     tooltip: "This header defines the Name column",
    //                 },

    //                 {
    //                     name: "orderedList",
    //                     value: "orderedList",
    //                     type: "orderedList",
    //                     label: "Ordered List", //Steps to Follow
    //                 },

    //                 {
    //                     name: "unorderedList",
    //                     value: "unorderedList",
    //                     type: "unorderedList",
    //                     label: "Unordered List", //Features
    //                     tooltip: "Displays a list of features without a specific order",
    //                 },

    //                 {
    //                     name: "listOptions",
    //                     value: "listOptions",
    //                     type: "list",
    //                     label: "List Options",
    //                     tooltip: "This is list item ",
    //                 },

    //                 {
    //                     name: "imageElement",
    //                     value: "imageElement",
    //                     type: "image",
    //                     label: "Image Display",
    //                 },

    //                 {
    //                     name: "drawingCanvas",
    //                     value: "drawingCanvas",
    //                     type: "canvas",
    //                     label: "Drawing Canvas",
    //                     tooltip: "Canvas area for creating graphics",
    //                 },

    //                 {
    //                     name: "svgGraphic",
    //                     value: "svgGraphic",
    //                     type: "svg",
    //                     label: "SVG Graphic",
    //                     tooltip: "Displays a scalable vector graphic",
    //                 },

    //                 {
    //                     name: "videoPlayer",
    //                     value: "videoPlayer",
    //                     type: "video",
    //                     label: "Video Player",
    //                     tooltip: "Play the video content",
    //                 },

    //                 {
    //                     name: "audioPlayer",
    //                     value: "audioPlayer",
    //                     type: "audio",
    //                     label: "Audio Player",
    //                     tooltip: "Play the audio track",
    //                 },

    //                 {
    //                     name: "infoDialog",
    //                     value: "infoDialog",
    //                     type: "dialog",
    //                     label: "Information Dialog",
    //                     tooltip: "Click to open the information dialog",
    //                 },

    //                 {
    //                     name: "detailsElement",
    //                     value: "detailsElement",
    //                     type: "details",
    //                     label: "More Information",
    //                 },

    //                 {
    //                     name: "detailsSummary",
    //                     value: "detailsSummary",
    //                     type: "summary",
    //                     label: "View Details",
    //                     tooltip: "Click to reveal more details",
    //                 },

    //                 {
    //                     name: "mainSection",
    //                     value: "mainSection",
    //                     type: "section",
    //                     label: "Main Section",
    //                     tooltip: "This section contains the main content of the page",
    //                 },

    //                 {
    //                     name: "pageHeader",
    //                     value: "pageHeader",
    //                     type: "header",
    //                     label: "Page Header",
    //                     tooltip: "This is the header area of the page",
    //                 },

    //                 {
    //                     name: "pageFooter",
    //                     value: "pageFooter",
    //                     type: "footer",
    //                     label: "Page Footer",
    //                     tooltip: "This is the footer area of the page",
    //                 },

    //                 {
    //                     name: "shadowDomElement",
    //                     value: "shadowDomElement",
    //                     type: "shadowDOM",
    //                     label: "Shadow DOM Container",
    //                     tooltip: "This element uses Shadow DOM for encapsulation",
    //                 },

    //                 {
    //                     name: "myCustomComponent",
    //                     value: "myCustomComponent",
    //                     type: "webComponent",
    //                     label: "Custom Component",
    //                     tooltip: "This is a custom web component built with Shadow DOM",
    //                 },

    //                 {
    //                     name: "lazyImage",
    //                     value: "lazyImage",
    //                     type: "lazyLoad",
    //                     label: "Lazy Loaded Image",
    //                     tooltip: "This image will load once it enters the viewport",
    //                 },

    //                 {
    //                     name: "confirmationModal",
    //                     value: "confirmationModal",
    //                     type: "modal", // Can represent either a <dialog> or a JS modal
    //                     label: "Confirmation Modal",
    //                     tooltip: "This modal dialog is used for confirming actions",
    //                 },

    //                 {
    //                     name: "infoTooltip",
    //                     value: "infoTooltip",
    //                     type: "tooltip",
    //                     label: "Tooltip Info",
    //                     tooltip: "This tooltip is displayed when you hover over the target element.",
    //                 },

    //                 {
    //                     name: "toastMessage",
    //                     value: "toastMessage",
    //                     type: "toast",
    //                     label: "Notification Toast",
    //                     tooltip: "This toast appears to notify users of an action",
    //                 },

    //                 {
    //                     name: "autocompleteInput",
    //                     value: "autocompleteInput",
    //                     type: "autocomplete",
    //                     label: "Search with Suggestions",
    //                     tooltip: "Start typing to see suggestions",
    //                 },

    //                 {
    //                     name: "embeddedFrame",
    //                     value: "embeddedFrame",
    //                     type: "frame",
    //                     label: "Frame",
    //                     tooltip: "This frame displays content from an external URL",
    //                 },

    //                 {
    //                     name: "iframeElement",
    //                     value: "iframeElement",
    //                     type: "iframe",
    //                     label: "IFrame",
    //                     tooltip: "This iframe embeds external content securely",
    //                 },

    //                 {
    //                     name: "progressBar",
    //                     value: "progressBar",
    //                     type: "progress",
    //                     label: "Progress Bar",
    //                 },

    //                 {
    //                     name: "loadingSpinner",
    //                     value: "loadingSpinner",
    //                     type: "spinner",
    //                     label: "Loading Spinner",
    //                     tooltip: "This spinner appears while content is loading",
    //                 },

    //                 {
    //                     name: "batteryMeter",
    //                     value: "batteryMeter",
    //                     type: "meter",
    //                     label: "Battery Level",
    //                     tooltip: "Indicates battery level as a percentage of full charge",
    //                 },

    //                 {
    //                     name: "embeddedObject",
    //                     value: "embeddedObject",
    //                     type: "object",
    //                     label: "Embedded Content",
    //                     tooltip: "This object embeds external content like a PDF or multimedia",
    //                 },

    //                 {
    //                     name: "embeddedMedia",
    //                     value: "embeddedMedia",
    //                     type: "embed",
    //                     label: "Embedded Media",
    //                     tooltip: "This element embeds external media content, such as audio or video files.",
    //                 },

    //                 {
    //                     name: "hiddenToken",
    //                     value: "hiddenToken", // The token or hidden value
    //                     type: "hidden",
    //                     label: "Hidden Token", // Optional, for reference in code or documentation
    //                     tooltip: "This value is used for internal authentication and is hidden from the user",
    //                 },

    //                 {
    //                     name: "eventTime",
    //                     value: "eventTime",
    //                     type: "time",
    //                     label: "Event Time",
    //                     tooltip: "Displays the time when the event is scheduled",
    //                     datetime: "2023-03-10T15:30:00Z", // ISO 8601 format for machine-readable date/time
    //                     content: "3:30 PM", // Human-readable display of the time
    //                 },

    //                 {
    //                     name: "answerData",
    //                     value: "answerData",
    //                     type: "data",
    //                     label: "Answer Data",
    //                     tooltip: "Displays the underlying data value along with its descriptive text",
    //                 },

    //                 {
    //                     name: "calculationOutput",
    //                     value: "calculationOutput",
    //                     type: "output",
    //                     label: "Result Display",
    //                     tooltip: "This output element dynamically displays the computed result",
    //                 },
    //                 {
    //                     name: "dynamicElement",
    //                     value: "dynamicElement",
    //                     type: "div", // Can be any HTML element type (e.g., "span", "section", etc.)
    //                     label: "Dynamic Element",
    //                     tooltip: "This element's ID and classes can be updated dynamically",
    //                 },

    //                 {
    //                     name: "captchaImage",
    //                     value: "captchaImage",
    //                     type: "captcha",
    //                     label: "CAPTCHA",
    //                     tooltip: "This CAPTCHA image is generated by an external API. Click refresh if it's hard to read.",
    //                 },

    //                 {
    //                     name: "customAccessibleElement",
    //                     value: "customAccessibleElement",
    //                     type: "div",
    //                     label: "Custom Accessible Element",
    //                     tooltip: "This element includes custom data attributes and ARIA attributes for better accessibility",
    //                 },

    //                 {
    //                     name: "hiddenElement",
    //                     value: "hiddenElement",
    //                     type: "div",
    //                     label: "Hidden Element",
    //                     tooltip: "This element is hidden using CSS (display: none or visibility: hidden)",
    //                 },

    //                 {
    //                     name: "userFieldset",
    //                     value: "userFieldset",
    //                     type: "fieldset",
    //                     label: "User Details Group",
    //                     tooltip: "This container groups the input fields for user details",
    //                 },

    //                 {
    //                     name: "userFormLegend",
    //                     value: "userFormLegend",
    //                     type: "legend",
    //                     label: "Group Header: User Details",
    //                     tooltip: "This header describes the purpose of the user details group",
    //                 },
    //             ],
    //         },

    //         {
    //             name: "by",
    //             type: "select",
    //             label: "By",
    //             placeholder: "Select the locator Name",
    //             value: "",
    //             options: [
    //                 {
    //                     value: "id",
    //                     label: "ID",
    //                 },
    //                 {
    //                     value: "name",
    //                     label: "Name",
    //                 },
    //                 {
    //                     value: "className",
    //                     label: "Class Name",
    //                 },
    //                 {
    //                     value: "tagName",
    //                     label: "Tag Name",
    //                 },
    //                 {
    //                     value: "linkText",
    //                     label: "Link Text",
    //                 },
    //                 {
    //                     value: "partialLinkText",
    //                     label: "Partial LinkText",
    //                 },
    //                 {
    //                     value: "cssSelector",
    //                     label: "CSS Selctor",
    //                 },
    //                 {
    //                     value: "xpath",
    //                     label: "Xpath",
    //                 },
    //             ],
    //         },
    //         {
    //             name: "value",
    //             type: "text",
    //             label: "Value",
    //             placeholder: "Enter the value",
    //             value: "",
    //         },
    //     ],
    //     returnType: "WebElement",
    // },

    // findElements: {
    //     blockId: "",
    //     methodId: "",
    //     type: "findElements",
    //     classObject: "SearchContext",
    //     name: "findElements",
    //     label: "Find Elements",
    //     description: "It is used to locate a multiple web element on a webpage.",
    //     command: "findElements",
    //     methodSignature: "findElements(By): List<WebElement>",
    //     fields: [
    //         {
    //             name: "WebElement",
    //             value: "",
    //             type: "select",
    //             label: "WebElement",
    //             subLabel: "",
    //             required: true,
    //             disabled: false,
    //             options: [
    //                 {
    //                     name: "browserWindow",
    //                     value: "browserWindow",
    //                     type: "window",
    //                     label: "Browser Window",
    //                     tooltip: "Select a browser window action",
    //                 },

    //                 {
    //                     name: "alertPopup",
    //                     value: "alertPopup",
    //                     type: "alert",
    //                     label: "Alert/Popup",
    //                     tooltip: "Choose an alert or popup type",
    //                 },

    //                 {
    //                     name: "cookies",
    //                     value: "cookies",
    //                     type: "cookie",
    //                     label: "Cookies",
    //                     tooltip: "Manage your cookie preferences",
    //                 },

    //                 {
    //                     name: "storage",
    //                     value: "storage",
    //                     type: "storage",
    //                     label: "Storage",
    //                     tooltip: "Choose between session and local storage",
    //                 },

    //                 {
    //                     name: "title",
    //                     value: "title",
    //                     type: "text",
    //                     label: "Title",
    //                     tooltip: "Provide a title for the content",
    //                 },

    //                 {
    //                     name: "pageSource",
    //                     value: "pageSource",
    //                     type: "text",
    //                     label: "Page Source",
    //                     tooltip: "Input the source code or URL of the page",
    //                 },

    //                 {
    //                     name: "currentURL",
    //                     value: "currentURL",
    //                     type: "text",
    //                     label: "Current URL",
    //                     tooltip: "Provide the current URL of the page",
    //                 },

    //                 {
    //                     name: "textField",
    //                     value: "textField",
    //                     type: "text",
    //                     label: "Text Field",
    //                     tooltip: "Enter plain text",
    //                 },
    //                 {
    //                     name: "passwordField",
    //                     value: "passwordField",
    //                     type: "password",
    //                     label: "Password Field",
    //                     tooltip: "Enter your password",
    //                 },
    //                 {
    //                     name: "searchInput",
    //                     value: "searchInput",
    //                     type: "search",
    //                     label: "Search",
    //                     tooltip: "Enter keywords and press enter to search",
    //                 },
    //                 {
    //                     name: "emailField",
    //                     value: "emailField",
    //                     type: "email",
    //                     label: "Email",
    //                     tooltip: "Enter your email address",
    //                 },
    //                 {
    //                     name: "numberInput",
    //                     value: "numberInput",
    //                     type: "number",
    //                     label: "Enter Number",
    //                     tooltip: "Input a valid number",
    //                 },
    //                 {
    //                     name: "textArea",
    //                     value: "textArea",
    //                     type: "textarea",
    //                     label: "Text Area",
    //                     tooltip: "Enter multi-line text",
    //                 },

    //                 {
    //                     name: "submitButton",
    //                     value: "submitButton",
    //                     type: "button",
    //                     label: "Custom Submit",
    //                     tooltip: "Click to trigger custom submission logic",
    //                 },

    //                 {
    //                     name: "submitButton",
    //                     value: "submitButton",
    //                     type: "submit",
    //                     label: "Submit Form",
    //                     tooltip: "Click to submit the form automatically",
    //                 },

    //                 {
    //                     name: "inputButton",
    //                     value: "Click Me",
    //                     type: "button",
    //                     label: "Input Button",
    //                     tooltip: "Click to perform the input action",
    //                 },

    //                 {
    //                     name: "link",
    //                     value: "Link",
    //                     type: "link",
    //                     label: "Input Link",
    //                     tooltip: "Click to perform the input action",
    //                 },

    //                 {
    //                     name: "checkbox",
    //                     value: "checkbox",
    //                     type: "checkbox",
    //                     label: "Checkbox",
    //                     tooltip: "Select the checkbox if applicable",
    //                 },

    //                 {
    //                     name: "radioButton",
    //                     value: "radioButton",
    //                     type: "radio",
    //                     label: "Radio Button",
    //                     tooltip: "Select one of the options",
    //                 },

    //                 {
    //                     name: "dropdownSelect",
    //                     value: "dropdownSelect",
    //                     type: "select",
    //                     label: "Dropdown",
    //                     tooltip: "Choose an option from the dropdown",
    //                 },

    //                 {
    //                     name: "fileUpload",
    //                     value: "fileUpload",
    //                     type: "file",
    //                     label: "File Upload",
    //                     tooltip: "Upload a file from your device",
    //                 },

    //                 {
    //                     name: "mainForm",
    //                     value: "mainForm",
    //                     type: "form",
    //                     label: "Main Form",
    //                     tooltip: "Fill out and submit the form",
    //                 },

    //                 {
    //                     name: "dateInput",
    //                     value: "dateInput",
    //                     type: "date",
    //                     label: "Select Date",
    //                     tooltip: "Choose a date from the calendar",
    //                 },

    //                 {
    //                     name: "rangeInput",
    //                     value: 100, // Default value, can be adjusted as needed
    //                     type: "range",
    //                     label: "Select Value",
    //                     tooltip: "Drag the slider to select a value",
    //                 },

    //                 {
    //                     name: "paragraphText",
    //                     value: "paragraphText",
    //                     type: "paragraph",
    //                     label: "Paragraph",
    //                     tooltip: "This content will be displayed as a paragraph",
    //                 },

    //                 {
    //                     name: "pageHeading",
    //                     value: "pageHeading",
    //                     type: "heading",
    //                     level: "h1", // can be 'h1', 'h2', 'h3', etc.
    //                     label: "Main Heading",
    //                     tooltip: "This heading is used for the main title of the page",
    //                 },

    //                 {
    //                     name: "formLabel",
    //                     value: "NaformLabelme:",
    //                     type: "label",
    //                     label: "Form Label",
    //                     tooltip: "This label identifies the associated form element",
    //                 },

    //                 {
    //                     name: "textSpan",
    //                     value: "textSpan",
    //                     type: "span",
    //                     label: "Inline Text",
    //                     tooltip: "This span element is used for inline text styling",
    //                 },

    //                 {
    //                     name: "linkAnchor",
    //                     value: "Click here",
    //                     type: "link",
    //                     label: "Navigation Link",
    //                     tooltip: "Click to visit the target page",
    //                     href: "https://www.example.com", // Destination URL
    //                     target: "_blank", // Opens link in a new tab
    //                 },

    //                 {
    //                     name: "mainMenu",
    //                     type: "menu",
    //                     label: "Main Menu",
    //                     subLabel: "Primary navigation",
    //                     tooltip: "Navigate through main sections",
    //                 },

    //                 {
    //                     name: "breadcrumbNavigation",
    //                     value: "breadcrumbNavigation",
    //                     type: "breadcrumbNavigation",
    //                     label: "Breadcrumb Navigation",
    //                 },

    //                 {
    //                     name: "dragDropContainer",
    //                     value: "dragDropContainer",
    //                     type: "dragAndDrop",
    //                     label: "Drag & Drop",
    //                 },

    //                 {
    //                     name: "volumeSlider",
    //                     value: 30, // Default slider value
    //                     type: "slider",
    //                     label: "Slider",
    //                     orientation: "horizontal", // could also be 'vertical'
    //                 },

    //                 {
    //                     name: "resizablePanel",
    //                     value: "resizablePanel",
    //                     type: "resizable",
    //                     label: "Resizable Panel",
    //                 },

    //                 {
    //                     name: "dataTable",
    //                     value: "dataTable",
    //                     type: "table",
    //                     label: "Data Table",
    //                 },

    //                 {
    //                     name: "tableRow1",
    //                     value: "tableRow1",
    //                     type: "tableRow",
    //                     label: "Table Row",
    //                 },

    //                 {
    //                     name: "tableCell1",
    //                     value: "tableCell1",
    //                     type: "tableCell",
    //                     label: "Table Cell",
    //                     tooltip: "This cell shows the user's name",
    //                 },

    //                 {
    //                     name: "tableHeader1",
    //                     value: "tableHeader1",
    //                     type: "tableHeader",
    //                     label: "Table Header",
    //                     subLabel: "Column header for Name",
    //                     tooltip: "This header defines the Name column",
    //                 },

    //                 {
    //                     name: "orderedList",
    //                     value: "orderedList",
    //                     type: "orderedList",
    //                     label: "Ordered List", //Steps to Follow
    //                 },

    //                 {
    //                     name: "unorderedList",
    //                     value: "unorderedList",
    //                     type: "unorderedList",
    //                     label: "Unordered List", //Features
    //                     tooltip: "Displays a list of features without a specific order",
    //                 },

    //                 {
    //                     name: "listOptions",
    //                     value: "listOptions",
    //                     type: "list",
    //                     label: "List Options",
    //                     tooltip: "This is list item ",
    //                 },

    //                 {
    //                     name: "imageElement",
    //                     value: "imageElement",
    //                     type: "image",
    //                     label: "Image Display",
    //                 },

    //                 {
    //                     name: "drawingCanvas",
    //                     value: "drawingCanvas",
    //                     type: "canvas",
    //                     label: "Drawing Canvas",
    //                     tooltip: "Canvas area for creating graphics",
    //                 },

    //                 {
    //                     name: "svgGraphic",
    //                     value: "svgGraphic",
    //                     type: "svg",
    //                     label: "SVG Graphic",
    //                     tooltip: "Displays a scalable vector graphic",
    //                 },

    //                 {
    //                     name: "videoPlayer",
    //                     value: "videoPlayer",
    //                     type: "video",
    //                     label: "Video Player",
    //                     tooltip: "Play the video content",
    //                 },

    //                 {
    //                     name: "audioPlayer",
    //                     value: "audioPlayer",
    //                     type: "audio",
    //                     label: "Audio Player",
    //                     tooltip: "Play the audio track",
    //                 },

    //                 {
    //                     name: "infoDialog",
    //                     value: "infoDialog",
    //                     type: "dialog",
    //                     label: "Information Dialog",
    //                     tooltip: "Click to open the information dialog",
    //                 },

    //                 {
    //                     name: "detailsElement",
    //                     value: "detailsElement",
    //                     type: "details",
    //                     label: "More Information",
    //                 },

    //                 {
    //                     name: "detailsSummary",
    //                     value: "detailsSummary",
    //                     type: "summary",
    //                     label: "View Details",
    //                     tooltip: "Click to reveal more details",
    //                 },

    //                 {
    //                     name: "mainSection",
    //                     value: "mainSection",
    //                     type: "section",
    //                     label: "Main Section",
    //                     tooltip: "This section contains the main content of the page",
    //                 },

    //                 {
    //                     name: "pageHeader",
    //                     value: "pageHeader",
    //                     type: "header",
    //                     label: "Page Header",
    //                     tooltip: "This is the header area of the page",
    //                 },

    //                 {
    //                     name: "pageFooter",
    //                     value: "pageFooter",
    //                     type: "footer",
    //                     label: "Page Footer",
    //                     tooltip: "This is the footer area of the page",
    //                 },

    //                 {
    //                     name: "shadowDomElement",
    //                     value: "shadowDomElement",
    //                     type: "shadowDOM",
    //                     label: "Shadow DOM Container",
    //                     tooltip: "This element uses Shadow DOM for encapsulation",
    //                 },

    //                 {
    //                     name: "myCustomComponent",
    //                     value: "myCustomComponent",
    //                     type: "webComponent",
    //                     label: "Custom Component",
    //                     tooltip: "This is a custom web component built with Shadow DOM",
    //                 },

    //                 {
    //                     name: "lazyImage",
    //                     value: "lazyImage",
    //                     type: "lazyLoad",
    //                     label: "Lazy Loaded Image",
    //                     tooltip: "This image will load once it enters the viewport",
    //                 },

    //                 {
    //                     name: "confirmationModal",
    //                     value: "confirmationModal",
    //                     type: "modal", // Can represent either a <dialog> or a JS modal
    //                     label: "Confirmation Modal",
    //                     tooltip: "This modal dialog is used for confirming actions",
    //                 },

    //                 {
    //                     name: "infoTooltip",
    //                     value: "infoTooltip",
    //                     type: "tooltip",
    //                     label: "Tooltip Info",
    //                     tooltip: "This tooltip is displayed when you hover over the target element.",
    //                 },

    //                 {
    //                     name: "toastMessage",
    //                     value: "toastMessage",
    //                     type: "toast",
    //                     label: "Notification Toast",
    //                     tooltip: "This toast appears to notify users of an action",
    //                 },

    //                 {
    //                     name: "autocompleteInput",
    //                     value: "autocompleteInput",
    //                     type: "autocomplete",
    //                     label: "Search with Suggestions",
    //                     tooltip: "Start typing to see suggestions",
    //                 },

    //                 {
    //                     name: "embeddedFrame",
    //                     value: "embeddedFrame",
    //                     type: "frame",
    //                     label: "Frame",
    //                     tooltip: "This frame displays content from an external URL",
    //                 },

    //                 {
    //                     name: "iframeElement",
    //                     value: "iframeElement",
    //                     type: "iframe",
    //                     label: "IFrame",
    //                     tooltip: "This iframe embeds external content securely",
    //                 },

    //                 {
    //                     name: "progressBar",
    //                     value: "progressBar",
    //                     type: "progress",
    //                     label: "Progress Bar",
    //                 },

    //                 {
    //                     name: "loadingSpinner",
    //                     value: "loadingSpinner",
    //                     type: "spinner",
    //                     label: "Loading Spinner",
    //                     tooltip: "This spinner appears while content is loading",
    //                 },

    //                 {
    //                     name: "batteryMeter",
    //                     value: "batteryMeter",
    //                     type: "meter",
    //                     label: "Battery Level",
    //                     tooltip: "Indicates battery level as a percentage of full charge",
    //                 },

    //                 {
    //                     name: "embeddedObject",
    //                     value: "embeddedObject",
    //                     type: "object",
    //                     label: "Embedded Content",
    //                     tooltip: "This object embeds external content like a PDF or multimedia",
    //                 },

    //                 {
    //                     name: "embeddedMedia",
    //                     value: "embeddedMedia",
    //                     type: "embed",
    //                     label: "Embedded Media",
    //                     tooltip: "This element embeds external media content, such as audio or video files.",
    //                 },

    //                 {
    //                     name: "hiddenToken",
    //                     value: "hiddenToken", // The token or hidden value
    //                     type: "hidden",
    //                     label: "Hidden Token", // Optional, for reference in code or documentation
    //                     tooltip: "This value is used for internal authentication and is hidden from the user",
    //                 },

    //                 {
    //                     name: "eventTime",
    //                     value: "eventTime",
    //                     type: "time",
    //                     label: "Event Time",
    //                     tooltip: "Displays the time when the event is scheduled",
    //                     datetime: "2023-03-10T15:30:00Z", // ISO 8601 format for machine-readable date/time
    //                     content: "3:30 PM", // Human-readable display of the time
    //                 },

    //                 {
    //                     name: "answerData",
    //                     value: "answerData",
    //                     type: "data",
    //                     label: "Answer Data",
    //                     tooltip: "Displays the underlying data value along with its descriptive text",
    //                 },

    //                 {
    //                     name: "calculationOutput",
    //                     value: "calculationOutput",
    //                     type: "output",
    //                     label: "Result Display",
    //                     tooltip: "This output element dynamically displays the computed result",
    //                 },
    //                 {
    //                     name: "dynamicElement",
    //                     value: "dynamicElement",
    //                     type: "div", // Can be any HTML element type (e.g., "span", "section", etc.)
    //                     label: "Dynamic Element",
    //                     tooltip: "This element's ID and classes can be updated dynamically",
    //                 },

    //                 {
    //                     name: "captchaImage",
    //                     value: "captchaImage",
    //                     type: "captcha",
    //                     label: "CAPTCHA",
    //                     tooltip: "This CAPTCHA image is generated by an external API. Click refresh if it's hard to read.",
    //                 },

    //                 {
    //                     name: "customAccessibleElement",
    //                     value: "customAccessibleElement",
    //                     type: "div",
    //                     label: "Custom Accessible Element",
    //                     tooltip: "This element includes custom data attributes and ARIA attributes for better accessibility",
    //                 },

    //                 {
    //                     name: "hiddenElement",
    //                     value: "hiddenElement",
    //                     type: "div",
    //                     label: "Hidden Element",
    //                     tooltip: "This element is hidden using CSS (display: none or visibility: hidden)",
    //                 },

    //                 {
    //                     name: "userFieldset",
    //                     value: "userFieldset",
    //                     type: "fieldset",
    //                     label: "User Details Group",
    //                     tooltip: "This container groups the input fields for user details",
    //                 },

    //                 {
    //                     name: "userFormLegend",
    //                     value: "userFormLegend",
    //                     type: "legend",
    //                     label: "Group Header: User Details",
    //                     tooltip: "This header describes the purpose of the user details group",
    //                 },
    //             ],
    //         },

    //         {
    //             name: "by",
    //             type: "select",
    //             label: "By",
    //             placeholder: "Select the locator Name",
    //             value: "",
    //             options: [
    //                 {
    //                     value: "id",
    //                     label: "ID",
    //                 },
    //                 {
    //                     value: "name",
    //                     label: "Name",
    //                 },
    //                 {
    //                     value: "className",
    //                     label: "Class Name",
    //                 },
    //                 {
    //                     value: "tagName",
    //                     label: "Tag Name",
    //                 },
    //                 {
    //                     value: "linkText",
    //                     label: "Link Text",
    //                 },
    //                 {
    //                     value: "partialLinkText",
    //                     label: "Partial LinkText",
    //                 },
    //                 {
    //                     value: "cssSelector",
    //                     label: "CSS Selctor",
    //                 },
    //                 {
    //                     value: "xpath",
    //                     label: "Xpath",
    //                 },
    //             ],
    //         },
    //         {
    //             name: "value",
    //             type: "text",
    //             label: "Value",
    //             placeholder: "Enter the value",
    //             value: "",
    //         },
    //     ],
    //     returnType: "	List<WebElement>",
    // },

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    //abstract class By
    getWebDriver: {
        blockId: "",
        methodId: "",
        type: "getWebDriver",
        classObject: "By",
        name: "getWebDriver",
        label: "Get WebDriver",
        description: "Retrieves the WebDriver instance from the provided SearchContext.",
        command: "getWebDriver",
        methodSignature: "getWebDriver(SearchContext):WebDriver",
        fields: [
            {
                name: "searchContext",
                type: "select",
                options: [
                    {
                        value: "browserName",
                        label: "Browser Name",
                    },
                    {
                        value: "browserVersion",
                        label: "Browser Version",
                    },
                    {
                        value: "platformName",
                        label: "Platform Name",
                    },
                    {
                        value: "headless",
                        label: "Headless",
                    },
                    {
                        value: "implicitWait",
                        label: "Implicitly Wait",
                    },
                ],
                label: "Serch Context",
                placeholder: "Enter the SearchContext instance",
                value: "",
            },
            {
                name: "value",
                type: "text",
                label: "Value",
                placeholder: "Enter the Value",
                value: "",
            },
        ],
        returnType: "WebDriver",
    },

    getJavascriptExecutor: {
        blockId: "",
        methodId: "",
        type: "getJavascriptExecutor",
        classObject: "By",
        name: "getJavascriptExecutor",
        label: "Get JavascriptExecutor",
        description: "Retrieves the JavascriptExecutor instance from the provided SearchContext.",
        command: "getJavascriptExecutor",
        methodSignature: "getJavascriptExecutor(SearchContext):JavascriptExecutor",
        fields: [
            {
                name: "searchContext",
                type: "select",
                options: [
                    {
                        value: "browserName",
                        label: "Browser Name",
                    },
                    {
                        value: "browserVersion",
                        label: "Browser Version",
                    },
                    {
                        value: "platformName",
                        label: "Platform Name",
                    },
                    {
                        value: "script",
                        label: "Script",
                    },
                    {
                        value: "arguments",
                        label: "Arguments[]",
                    },
                ],
                label: "Serch Context",
                placeholder: "Enter the SearchContext instance",
                value: "",
            },
            {
                name: "value",
                type: "text",
                label: "Value",
                placeholder: "Enter the Value",
                value: "",
            },
        ],
        returnType: "JavascriptExecutor",
    },

    equals: {
        blockId: "",
        methodId: "",
        type: "equals",
        classObject: "By",
        name: "equals",
        label: "Equals",
        description: "Checks whether the provided object is equal to the current object.",
        command: "equals",
        methodSignature: "equals(Object obj): boolean",
        fields: [
            {
                name: "object",
                type: "text",
                label: "Object",
                placeholder: "Enter the object to compare",
                value: "",
            },
        ],
        returnType: "boolean",
    },

    hashCode: {
        blockId: "",
        methodId: "",
        type: "hashCode",
        classObject: "By",
        name: "hashCode",
        label: "Hash Code",
        description: "Generates a hash code for the current object instance.",
        command: "hashCode",
        methodSignature: "hashCode(): int",
        fields: [],
        returnType: "int",
    },

    toString: {
        blockId: "",
        methodId: "",
        type: "toString",
        classObject: "By",
        name: "toString",
        label: "To String",
        description: "Returns a string representation of the current object instance.",
        command: "toString",
        methodSignature: "toString(): String",
        fields: [],
        returnType: "String",
    },

    //interface Remotable
    using: {
        blockId: "",
        methodId: "",
        type: "using",
        classObject: "Remotable",
        name: "using",
        label: "Using",
        description: "Returns the locator strategy as a string representation for the current By instance.",
        command: "using",
        methodSignature: "using(): String",
        fields: [],
        returnType: "String",
    },

    valueObj: {
        blockId: "",
        methodId: "",
        type: "value",
        classObject: "Remotable",
        name: "value",
        label: "Get Value",
        description: "Retrieves the value associated with the locator strategy for the current By instance.",
        command: "value",
        methodSignature: "value(): Object",
        fields: [],
        returnType: "Object",
    },

    toJsonMap: {
        blockId: "",
        methodId: "",
        type: "toJson",
        classObject: "Remotable",
        name: "toJson",
        label: "To JSON",
        description: "Converts the object to a JSON representation as a map of key-value pairs.",
        command: "toJson",
        methodSignature: "toJson(): Map<String, Object>",
        fields: [],
        returnType: "Map<String, Object>",
    },

    // interface WebElement
    getText: {
        blockId: "",
        methodId: "",
        type: "getText",
        classObject: "WebElement",
        name: "getText",
        label: "Get Text",
        description: "Retrieves the visible text of the current web element.",
        command: "getText",
        methodSignature: "getText(): String",
        fields: [],
        returnType: "String",
    },

    isSelected: {
        blockId: "",
        methodId: "",
        type: "isSelected",
        classObject: "WebElement",
        name: "isSelected",
        label: "Check Selection",
        description: "Checks whether the current web element is selected (e.g., checkbox or radio button).",
        command: "isSelected",
        methodSignature: "isSelected(): boolean",
        fields: [],
        returnType: "boolean",
    },

    isEnabled: {
        blockId: "",
        methodId: "",
        type: "isEnabled",
        classObject: "WebElement",
        name: "isEnabled",
        label: "Check Element Enabled",
        description: "Checks whether the current web element is enabled or not.",
        command: "isEnabled",
        methodSignature: "isEnabled(): boolean",
        fields: [],
        returnType: "boolean",
    },

    isDisplayed: {
        blockId: "",
        methodId: "",
        type: "isDisplayed",
        classObject: "WebElement",
        name: "isDisplayed",
        label: "Check Element Display",
        description: "Checks whether the current web element is visible or displayed on the page.",
        command: "isDisplayed",
        methodSignature: "isDisplayed(): boolean",
        fields: [],
        returnType: "boolean",
    },

    click: {
        blockId: "",
        methodId: "",
        type: "click",
        classObject: "WebElement",
        name: "click",
        label: "Click Element",
        description: "Performs a click action on the current web element.",
        command: "click",
        methodSignature: "click(): void",
        fields: [],
        returnType: "void",
    },

    submit: {
        blockId: "",
        methodId: "",
        type: "submit",
        classObject: "WebElement",
        name: "submit",
        label: "Submit Form",
        description: "Submits the form containing the current web element.",
        command: "submit",
        methodSignature: "submit(): void",
        fields: [],
        returnType: "void",
    },

    clear: {
        blockId: "",
        methodId: "",
        type: "clear",
        classObject: "WebElement",
        name: "clear",
        label: "Clear",
        description: "Clears the current value in the web element (e.g., text input).",
        command: "clear",
        methodSignature: "clear(): void",
        fields: [],
        returnType: "void",
    },

    sendKeys: {
        blockId: "",
        methodId: "",
        type: "sendKeys",
        classObject: "WebElement",
        name: "sendKeys",
        label: "SendKeys",
        description: "Simulates typing into the current web element, typically used for text input fields.",
        command: "sendKeys",
        methodSignature: "sendKeys(CharSequence... keys): void",
        fields: [
            {
                name: "value",
                type: "text",
                label: "Value",
                placeholder: "Enter the values to be sent",
                value: "",
            },
        ],
        returnType: "void",
    },

    getTagName: {
        blockId: "",
        methodId: "",
        type: "getTagName",
        classObject: "WebElement",
        name: "getTagName",
        label: "Get TagName",
        description: "Retrieves the tag name of the current web element (e.g., 'input', 'div').",
        command: "getTagName",
        methodSignature: "getTagName(): String",
        fields: [],
        returnType: "String",
    },

    getCssValue: {
        blockId: "",
        methodId: "",
        type: "getCssValue",
        classObject: "WebElement",
        name: "getCssValue",
        label: "Get CSSValue",
        description: "Retrieves the value of the specified CSS property for the current web element.",
        command: "getCssValue",
        methodSignature: "getCssValue(String propertyName): String",
        fields: [
            {
                name: "propertyName",
                type: "text",
                label: "CSS Property",
                placeholder: "Enter the CSS property name",
                value: "",
            },
        ],
        returnType: "String",
    },

    getDomProperty: {
        blockId: "",
        methodId: "",
        type: "getDomProperty",
        classObject: "WebElement",
        name: "getDomProperty",
        label: "Get DOM Property",
        description: "Retrieves the value of the specified DOM property for the current web element.",
        command: "getDomProperty",
        methodSignature: "getDomProperty(String propertyName): String",
        fields: [
            {
                name: "propertyName",
                type: "text",
                label: "DOM Property Name",
                placeholder: "Enter the DOM property name",
                value: "",
            },
        ],
        returnType: "String",
    },

    getDomAttribute: {
        blockId: "",
        methodId: "",
        type: "getDomAttribute",
        classObject: "WebElement",
        name: "getDomAttribute",
        label: "Get DOM Attribute",
        description: "Retrieves the value of the specified DOM attribute for the current web element.",
        command: "getDomAttribute",
        methodSignature: "getDomAttribute(String attributeName): String",
        fields: [
            {
                name: "attributeName",
                type: "text",
                label: "DOM Attribute Name",
                placeholder: "Enter the DOM attribute name",
                value: "",
            },
        ],
        returnType: "String",
    },

    getAttribute: {
        blockId: "",
        methodId: "",
        type: "getAttribute",
        classObject: "WebElement",
        name: "getAttribute",
        label: "Get Attribute",
        description: "Retrieves the value of the specified attribute for the current web element.",
        command: "getAttribute",
        methodSignature: "getAttribute(String attributeName): String",
        fields: [
            {
                name: "attributeName",
                type: "text",
                label: "Attribute Name",
                placeholder: "Enter the attribute name",
                value: "",
            },
        ],
        returnType: "String",
    },

    getAriaRole: {
        blockId: "",
        methodId: "",
        type: "getAriaRole",
        classObject: "WebElement",
        name: "getAriaRole",
        label: "Get ARIA Role",
        description: "Retrieves the ARIA role attribute of the current web element, which defines its role in terms of accessibility.",
        command: "getAriaRole",
        methodSignature: "getAriaRole(): String",
        fields: [],
        returnType: "String",
    },

    getAccessibleName: {
        blockId: "",
        methodId: "",
        type: "getAccessibleName",
        classObject: "WebElement",
        name: "getAccessibleName",
        label: "Get Accessible Name",
        description: "Retrieves the computed WAI-ARIA label of the current web element, which defines its accessible name for assistive technologies.",
        command: "getAccessibleName",
        methodSignature: "getAccessibleName(): String",
        fields: [],
        returnType: "String",
    },

    getShadowRoot: {
        blockId: "",
        methodId: "",
        type: "getShadowRoot",
        classObject: "WebElement",
        name: "getShadowRoot",
        label: "Get Shadow Root",
        description: "Retrieves the shadow root of the current web element, if it exists, which represents a DOM subtree encapsulated in the shadow DOM.",
        command: "getShadowRoot",
        methodSignature: "getShadowRoot(): SearchContext",
        fields: [],
        returnType: "SearchContext",
    },

    getLocation: {
        blockId: "",
        methodId: "",
        type: "getLocation",
        classObject: "WebElement",
        name: "getLocation",
        label: "Get Location",
        description: "Retrieves the location of the current web element, which includes its X and Y coordinates on the page.",
        command: "getLocation",
        methodSignature: "getLocation(): Point",
        fields: [],
        returnType: "Point",
    },

    getSize: {
        blockId: "",
        methodId: "",
        type: "getSize",
        classObject: "WebElement",
        name: "getSize",
        label: "Get Size",
        description: "Retrieves the size of the current web element, which includes its width and height.",
        command: "getSize",
        methodSignature: "getSize(): Dimension",
        fields: [],
        returnType: "Dimension",
    },

    getRect: {
        blockId: "",
        methodId: "",
        type: "getRect",
        classObject: "WebElement",
        name: "getRect",
        label: "Get Rectangle",
        description: "Retrieves the bounding rectangle of the current web element, which includes its position and size (X, Y, width, and height).",
        command: "getRect",
        methodSignature: "getRect(): Rectangle",
        fields: [],
        returnType: "Rectangle",
    },

    //interface WebDriver
    get: {
        blockId: "",
        methodId: "",
        type: "get",
        classObject: "WebDriver",
        name: "get",
        label: "Get URL",
        description: "Navigates the browser to the specified URL.",
        command: "get",
        methodSignature: "get(String url): void",
        fields: [
            {
                name: "url",
                type: "text",
                label: "URL",
                placeholder: "Enter the URL to navigate to",
                value: "",
            },
        ],
        returnType: "void",
    },

    getCurrentUrl: {
        blockId: "",
        methodId: "",
        type: "getCurrentUrl",
        classObject: "WebDriver",
        name: "getCurrentUrl",
        label: "Get Current URL",
        description: "Retrieves the current URL of the browser’s active page.",
        command: "getCurrentUrl",
        methodSignature: "getCurrentUrl(): String",
        fields: [],
        returnType: "String",
    },

    getTitle: {
        blockId: "",
        methodId: "",
        type: "getTitle",
        classObject: "WebDriver",
        name: "getTitle",
        label: "Get Title",
        description: "Retrieves the title of the current page in the browser.",
        command: "getTitle",
        methodSignature: "getTitle(): String",
        fields: [],
        returnType: "String",
    },

    getPageSource: {
        blockId: "",
        methodId: "",
        type: "getPageSource",
        classObject: "WebDriver",
        name: "getPageSource",
        label: "Get Page Source",
        description: "Retrieves the source code of the current page in the browser.",
        command: "getPageSource",
        methodSignature: "getPageSource(): String",
        fields: [],
        returnType: "String",
    },

    close: {
        blockId: "",
        methodId: "",
        type: "close",
        classObject: "WebDriver",
        name: "close",
        label: "Close Browser",
        description: "Closes the current browser window. If the driver is controlling multiple windows, it will close the current window.",
        command: "close",
        methodSignature: "close(): void",
        fields: [],
        returnType: "void",
    },

    quit: {
        blockId: "",
        methodId: "",
        type: "quit",
        classObject: "WebDriver",
        name: "quit",
        label: "Quit WebDriver",
        description: "Closes all browser windows and ends the WebDriver session. This will end the session and release any resources.",
        command: "quit",
        methodSignature: "quit(): void",
        fields: [],
        returnType: "void",
    },

    getWindowHandle: {
        blockId: "",
        methodId: "",
        type: "getWindowHandle",
        classObject: "WebDriver",
        name: "getWindowHandle",
        label: "Get Current Window Handle",
        description: "Retrieves the handle of the current browser window in the WebDriver session.",
        command: "getWindowHandle",
        methodSignature: "getWindowHandle(): String",
        fields: [],
        returnType: "String",
    },

    getWindowHandles: {
        blockId: "",
        methodId: "",
        type: "getWindowHandles",
        classObject: "WebDriver",
        name: "getWindowHandles",
        label: "Get Window Handles",
        description: "Retrieves the handles of all open browser windows in the current WebDriver session.",
        command: "getWindowHandles",
        methodSignature: "getWindowHandles(): Set<String>",
        fields: [],
        returnType: "Set<String>",
    },

    switchTo: {
        blockId: "",
        methodId: "",
        type: "switchTo",
        classObject: "WebDriver",
        name: "switchTo",
        label: "Switch To",
        description:
            "Switches the focus of the WebDriver to a different context. Use 'Window' to switch to a specific browser window/tab, 'Alert' to switch to a JavaScript alert, and 'Frame' to switch to an iframe or frame.",
        command: "switchTo",
        methodSignature: "switchTo(): TargetLocator",
        fields: [
            {
                name: "context",
                type: "select",
                options: [
                    {
                        value: "Window",
                        label: "Window",
                    },
                    {
                        value: "Alert",
                        label: "Alert",
                    },
                    {
                        value: "Frame",
                        label: "Frame",
                    },
                ],
                label: "Context",
                placeholder: "Select the context to switch to",
                value: "",

                isConditional: true,
                conditions: {
                    Window: [
                        {
                            name: "value",
                            type: "text",
                            label: "Value",
                            placeholder: "Enter window handle",
                            value: "",
                        },
                    ],
                    Alert: [
                        {
                            name: "value",
                            type: "text",
                            label: "Value",
                            placeholder: "Enter index, name, or WebElement",
                            value: "",
                        },
                    ],
                    Frame: [
                        {
                            name: "value",
                            type: "text",
                            label: "Value",
                            placeholder: "Leave blank (not required)",
                            value: "",
                        },
                    ],
                },
            },
        ],
        returnType: "TargetLocator",
    },

    navigate: {
        blockId: "",
        methodId: "",
        type: "navigation",
        classObject: "Navigation",
        name: "navigation",
        label: "Browser Navigation",
        description: "Performs browser navigation actions such as Back, Forward, Refresh, or Navigate to a URL.",
        command: "navigation",
        methodSignatures: {
            back: "back(): void",
            forward: "forward(): void",
            refresh: "refresh(): void",
            toString: "to(String url): void",
            toURL: "to(URL url): void",
        },
        fields: [
            {
                name: "navigationType",
                type: "select",
                label: "Navigation Type",
                options: [
                    { value: "back", label: "Navigate Back" },
                    { value: "forward", label: "Navigate Forward" },
                    { value: "refresh", label: "Refresh Page" },
                    { value: "toString", label: "Navigate to URL (String)" },
                    { value: "toURL", label: "Navigate to URL (URL)" },
                ],
                placeholder: "Select the navigation action",
                value: "",
                isConditional: true,
                conditions: {
                    toString: [
                        {
                            name: "url",
                            type: "text",
                            label: "URL",
                            placeholder: "Enter the URL to navigate to",
                            value: "",
                        },
                    ],
                    toURL: [
                        {
                            name: "url",
                            type: "text",
                            label: "URL",
                            placeholder: "Enter the URL to navigate to",
                            value: "",
                        },
                    ],
                },
            },
        ],
        returnType: "void",
    },

    manage: {
        blockId: "",
        methodId: "",
        type: "manage",
        classObject: "WebDriver",
        name: "manage",
        label: "Manage WebDriver Options",
        description: "Provides access to various WebDriver options, such as timeouts, window management, and logs.",
        command: "manage",
        methodSignature: "manage(): Options",
        fields: [],
        returnType: "Options",
    },

    //interface Options
    addCookies: {
        methodId: "",
        classObject: "Options",
        name: "addCookie",
        label: "Add Cookie",
        description: "Adds a cookie to the current session in the WebDriver instance.",
        command: "addCookie",
        methodSignature: "addCookie(Cookie cookie): void",
        fields: [
            {
                name: "name",
                type: "text",
                label: "Name",
                placeholder: "Enter the cookie name",
                value: "",
            },
            {
                name: "value",
                type: "text",
                label: "Value",
                placeholder: "Enter the cookie Value",
                value: "",
            },
            {
                name: "domain",
                type: "text",
                label: "Domain",
                placeholder: "Enter the Domain 'Ex.example.com'",
                value: "",
            },
            {
                name: "path",
                type: "text",
                label: "Path",
                placeholder: "Enter the path Value",
                value: "",
            },
            {
                name: "expiry",
                type: "text",
                label: "Expiry",
                placeholder: "Enter the date 'Ex.2025-12-31T23:59:59'",
                value: "",
            },
            {
                name: "secure",
                type: "radio",
                label: "secure",
                placeholder: "Select the Value",
                value: "",
                options: [
                    {
                        value: "true",
                        label: "True",
                    },
                    {
                        value: "false",
                        label: "False",
                    },
                ],
            },
        ],
        returnType: "void",
    },

    deleteCookieNamed: {
        blockId: "",
        methodId: "",
        type: "deleteCookieNamed",
        classObject: "Options",
        name: "deleteCookieNamed",
        label: "Delete Cookie by Name",
        description: "Deletes the cookie with the specified name from the current session in the WebDriver instance.",
        command: "deleteCookieNamed",
        methodSignature: "deleteCookieNamed(String name): void",
        fields: [
            {
                name: "name",
                type: "text",
                label: "Cookie Name",
                placeholder: "Enter the cookie name",
                value: "",
            },
        ],
        returnType: "void",
    },

    deleteCookie: {
        blockId: "",
        methodId: "",
        type: "deleteCookie",
        classObject: "Options",
        name: "deleteCookie",
        label: "Delete Cookie",
        description: "Deletes the specified cookie from the current session in the WebDriver instance.",
        command: "deleteCookie",
        methodSignature: "deleteCookie(Cookie cookie): void",
        fields: [
            {
                name: "name",
                type: "text",
                label: "Name",
                placeholder: "Enter the cookie name",
                value: "",
            },
            {
                name: "value",
                type: "text",
                label: "Value",
                placeholder: "Enter the cookie Value",
                value: "",
            },
            {
                name: "domain",
                type: "text",
                label: "Domain",
                placeholder: "Enter the Domain 'Ex.example.com'",
                value: "",
            },
            {
                name: "path",
                type: "text",
                label: "Path",
                placeholder: "Enter the path Value",
                value: "",
            },
            {
                name: "expiry",
                type: "text",
                label: "Expiry",
                placeholder: "Enter the date 'Ex.2025-12-31T23:59:59'",
                value: "",
            },
        ],
        returnType: "void",
    },

    deleteAllCookies: {
        blockId: "",
        methodId: "",
        type: "deleteAllCookies",
        classObject: "Options",
        name: "deleteAllCookies",
        label: "Delete All Cookies",
        description: "Deletes all cookies in the current session of the WebDriver instance.",
        command: "deleteAllCookies",
        methodSignature: "deleteAllCookies(): void",
        fields: [],
        returnType: "void",
    },

    getCookies: {
        blockId: "",
        methodId: "",
        type: "getCookies",
        classObject: "Options",
        name: "getCookies",
        label: "Get All Cookies",
        description: "Retrieves all cookies associated with the current session in the WebDriver instance.",
        command: "getCookies",
        methodSignature: "getCookies(): Set<Cookie>",
        fields: [],
        returnType: "Set<Cookie>",
    },

    getCookieNamed: {
        blockId: "",
        methodId: "",
        type: "getCookieNamed",
        classObject: "Options",
        name: "getCookieNamed",
        label: "Get Cookie by Name",
        description: "Retrieves the cookie with the specified name from the current session in the WebDriver instance.",
        command: "getCookieNamed",
        methodSignature: "getCookieNamed(String name): Cookie",
        fields: [
            {
                name: "name",
                type: "text",
                label: "Cookie Name",
                placeholder: "Enter the cookie name",
                value: "",
            },
        ],
        returnType: "Cookie",
    },

    timeouts: {
        blockId: "",
        methodId: "",
        type: "timeouts",
        classObject: "Options",
        name: "timeouts",
        label: "Get Timeouts",
        description: "Retrieves the timeouts settings for the current session in the WebDriver instance, such as implicit waits and script timeouts.",
        command: "timeouts",
        methodSignature: "timeouts(): Timeouts",
        fields: [],
        returnType: "Timeouts",
    },

    window: {
        blockId: "",
        methodId: "",
        type: "window",
        classObject: "Options",
        name: "window",
        label: "Get Window",
        description: "Retrieves the window handling options for the current WebDriver session, including actions related to window management.",
        command: "window",
        methodSignature: "window(): Window",
        fields: [],
        returnType: "Window",
    },

    deleteCookieNamed: {
        blockId: "",
        methodId: "",
        type: "deleteCookieNamed",
        classObject: "Options",
        name: "deleteCookieNamed",
        label: "Delete Cookie by Name",
        description: "Deletes the cookie with the specified name from the current session in the WebDriver instance.",
        command: "deleteCookieNamed",
        methodSignature: "deleteCookieNamed(String name): void",
        fields: [
            {
                name: "name",
                type: "text",
                label: "Cookie Name",
                placeholder: "Enter the cookie name",
                value: "",
            },
        ],
        returnType: "void",
    },

    deleteCookie: {
        blockId: "",
        methodId: "",
        type: "deleteCookie",
        classObject: "Options",
        name: "deleteCookie",
        label: "Delete Cookie",
        description: "Deletes the specified cookie from the current session in the WebDriver instance.",
        command: "deleteCookie",
        methodSignature: "deleteCookie(Cookie cookie): void",
        fields: [
            {
                name: "name",
                type: "text",
                label: "Name",
                placeholder: "Enter the cookie name",
                value: "",
            },
            {
                name: "value",
                type: "text",
                label: "Value",
                placeholder: "Enter the cookie Value",
                value: "",
            },
            {
                name: "domain",
                type: "text",
                label: "Domain",
                placeholder: "Enter the Domain 'Ex.example.com'",
                value: "",
            },
            {
                name: "path",
                type: "text",
                label: "Path",
                placeholder: "Enter the path Value",
                value: "",
            },
            {
                name: "expiry",
                type: "text",
                label: "Expiry",
                placeholder: "Enter the date 'Ex.2025-12-31T23:59:59'",
                value: "",
            },
        ],
        returnType: "void",
    },

    deleteAllCookies: {
        blockId: "",
        methodId: "",
        type: "deleteAllCookies",
        classObject: "Options",
        name: "deleteAllCookies",
        label: "Delete All Cookies",
        description: "Deletes all cookies in the current session of the WebDriver instance.",
        command: "deleteAllCookies",
        methodSignature: "deleteAllCookies(): void",
        fields: [],
        returnType: "void",
    },

    getCookies: {
        blockId: "",
        methodId: "",
        type: "getCookies",
        classObject: "Options",
        name: "getCookies",
        label: "Get All Cookies",
        description: "Retrieves all cookies associated with the current session in the WebDriver instance.",
        command: "getCookies",
        methodSignature: "getCookies(): Set<Cookie>",
        fields: [],
        returnType: "Set<Cookie>",
    },

    getCookieNamed: {
        blockId: "",
        methodId: "",
        type: "getCookieNamed",
        classObject: "Options",
        name: "getCookieNamed",
        label: "Get Cookie by Name",
        description: "Retrieves the cookie with the specified name from the current session in the WebDriver instance.",
        command: "getCookieNamed",
        methodSignature: "getCookieNamed(String name): Cookie",
        fields: [
            {
                name: "name",
                type: "text",
                label: "Cookie Name",
                placeholder: "Enter the cookie name",
                value: "",
            },
        ],
        returnType: "Cookie",
    },

    timeouts: {
        blockId: "",
        methodId: "",
        type: "timeouts",
        classObject: "Options",
        name: "timeouts",
        label: "Get Timeouts",
        description: "Retrieves the timeouts settings for the current session in the WebDriver instance, such as implicit waits and script timeouts.",
        command: "timeouts",
        methodSignature: "timeouts(): Timeouts",
        fields: [],
        returnType: "Timeouts",
    },

    window: {
        blockId: "",
        methodId: "",
        type: "window",
        classObject: "Options",
        name: "window",
        label: "Get Window",
        description: "Retrieves the window handling options for the current WebDriver session, including actions related to window management.",
        command: "window",
        methodSignature: "window(): Window",
        fields: [],
        returnType: "Window",
    },

    logs: {
        blockId: "",
        methodId: "",
        type: "logs",
        classObject: "Options",
        name: "logs",
        label: "Get Logs",
        description:
            "Retrieves log entries from the WebDriver session. Allows access to logs such as 'driver', 'browser', 'performance', or 'client' logs. Useful for capturing console errors, performance metrics, and debugging web applications.",
        command: "logs",
        methodSignature: "logs(): Logs",
        fields: [
            {
                name: "action",
                type: "select",
                label: "Action",
                placeholder: "Select log action",
                value: "get",
                options: [{ value: "get", label: "Get" }],
            },
            {
                name: "logType",
                type: "select",
                label: "Log Type",
                placeholder: "Select log type",
                value: "browser",
                options: [
                    { value: "driver", label: "Driver" },
                    { value: "browser", label: "Browser" },
                    { value: "performance", label: "Performance" },
                    { value: "client", label: "Client" },
                ],
            },
            {
                name: "value",
                type: "select",
                label: "Log Level",
                placeholder: "Specify log level",
                value: { level: "ALL" },
                options: [
                    { value: "ALL", label: "ALL" },
                    { value: "INFO", label: "INFO" },
                    { value: "WARNING", label: "WARNING" },
                    { value: "ERROR", label: "ERROR" },
                    { value: "SEVERE", label: "SEVERE" },
                ],
            },
        ],
        returnType: "Logs",
    },

    //interface Timeouts

    setImplicitlyWait: {
        blockId: "",
        methodId: "",
        type: "implicitlyWait",
        classObject: "Options",
        name: "implicitlyWait",
        label: "Set Implicit Wait",
        description: "Sets the amount of time the WebDriver should wait when searching for elements if they are not immediately available. This method sets the implicit wait timeout.",
        command: "implicitlyWait",
        methodSignature: "implicitlyWait(long time, TimeUnit unit): Timeouts",
        fields: [
            {
                name: "time",
                type: "number",
                label: "Time",
                placeholder: "Enter the timeout duration",
                value: "",
            },
            {
                name: "timeUnit",
                type: "select",
                options: [
                    {
                        value: "seconds",
                        label: "SECONDS",
                    },
                    {
                        value: "miliseconds",
                        label: "MILLISECONDS",
                    },
                    {
                        value: "minute",
                        label: "MINUTES",
                    },
                    {
                        value: "hours",
                        label: "HOURS",
                    },
                ],
                label: "TimeUnit",
                placeholder: "Select the Time Unit",
                value: "",
            },
        ],
        returnType: "Timeouts",
    },

    implicitlyWait: {
        blockId: "",
        methodId: "",
        type: "implicitlyWait",
        classObject: "Options",
        name: "implicitlyWait",
        label: "Set Implicit Wait",
        description:
            "Sets the amount of time the WebDriver should wait when searching for elements if they are not immediately available. This method sets the implicit wait timeout using a `Duration` object.",
        command: "implicitlyWait",
        methodSignature: "implicitlyWait(Duration duration): Timeouts",
        fields: [
            {
                name: "duration",
                type: "text",
                label: "Duration",
                placeholder: "Enter the duration (e.g., 10 seconds)",
                value: "",
            },
            {
                name: "timeUnit",
                type: "select",
                options: [
                    {
                        value: "seconds",
                        label: "SECONDS",
                    },
                    {
                        value: "miliseconds",
                        label: "MILLISECONDS",
                    },
                    {
                        value: "minute",
                        label: "MINUTES",
                    },
                    {
                        value: "hours",
                        label: "HOURS",
                    },
                ],
                label: "TimeUnit",
                placeholder: "Select the Time Unit",
                value: "",
            },
        ],
        returnType: "Timeouts",
    },

    getImplicitWaitTimeout: {
        blockId: "",
        methodId: "",
        type: "getImplicitWaitTimeout",
        classObject: "Options",
        name: "getImplicitWaitTimeout",
        label: "Get Implicit Wait Timeout",
        description: "Retrieves the current implicit wait timeout for the WebDriver session, which specifies how long to wait for elements to appear before throwing an exception.",
        command: "getImplicitWaitTimeout",
        methodSignature: "getImplicitWaitTimeout(): Duration",
        fields: [],
        returnType: "Duration",
    },

    setScriptTimeout: {
        blockId: "",
        methodId: "",
        type: "setScriptTimeout",
        classObject: "Options",
        name: "setScriptTimeout",
        label: "Set Script Timeout",
        description: "Sets the amount of time the WebDriver should wait for asynchronous scripts to execute. This method sets the script timeout using a specified duration and time unit.",
        command: "setScriptTimeout",
        methodSignature: "setScriptTimeout(long time, TimeUnit unit): Timeouts",
        fields: [
            {
                name: "duration",
                type: "text",
                label: "Duration",
                placeholder: "Enter the duration (e.g., 10 seconds)",
                value: "",
            },
            {
                name: "timeUnit",
                type: "select",
                options: [
                    {
                        value: "seconds",
                        label: "SECONDS",
                    },
                    {
                        value: "miliseconds",
                        label: "MILLISECONDS",
                    },
                    {
                        value: "minute",
                        label: "MINUTES",
                    },
                    {
                        value: "hours",
                        label: "HOURS",
                    },
                ],
                label: "TimeUnit",
                placeholder: "Select the Time Unit",
                value: "",
            },
        ],
        returnType: "Timeouts",
    },

    setScriptTimeouts: {
        blockId: "",
        methodId: "",
        type: "setScriptTimeout",
        classObject: "Options",
        name: "setScriptTimeout",
        label: "Set Script Timeout",
        description: "Sets the amount of time the WebDriver should wait for asynchronous scripts to execute using a `Duration` object.",
        command: "setScriptTimeout",
        methodSignature: "setScriptTimeout(Duration duration): Timeouts",
        fields: [
            {
                name: "duration",
                type: "text",
                label: "Duration",
                placeholder: "Enter the duration (e.g., 10 seconds)",
                value: "",
            },
        ],
        returnType: "Timeouts",
    },

    scriptTimeout: {
        blockId: "",
        methodId: "",
        type: "scriptTimeout",
        classObject: "Options",
        name: "scriptTimeout",
        label: "Set Script Timeout",
        description: "Sets the amount of time the WebDriver should wait for asynchronous scripts to execute using a `Duration` object, specifying the timeout period for scripts.",
        command: "scriptTimeout",
        methodSignature: "scriptTimeout(Duration duration): Timeouts",
        fields: [
            {
                name: "duration",
                type: "text",
                label: "Duration",
                placeholder: "Enter the duration (e.g., 10 seconds)",
                value: "",
            },
        ],
        returnType: "Timeouts",
    },

    getScriptTimeout: {
        blockId: "",
        methodId: "",
        type: "getScriptTimeout",
        classObject: "Options",
        name: "getScriptTimeout",
        label: "Get Script Timeout",
        description: "Retrieves the current script timeout for the WebDriver session, specifying how long the WebDriver will wait for asynchronous scripts to execute.",
        command: "getScriptTimeout",
        methodSignature: "getScriptTimeout(): Duration",
        fields: [],
        returnType: "Duration",
    },

    pageLoadTimeout: {
        blockId: "",
        methodId: "",
        type: "pageLoadTimeout",
        classObject: "Options",
        name: "pageLoadTimeout",
        label: "Set Page Load Timeout",
        description:
            "Sets the amount of time the WebDriver should wait for a page to load before throwing an exception. This method sets the page load timeout using a specified duration and time unit.",
        command: "pageLoadTimeout",
        methodSignature: "pageLoadTimeout(long time, TimeUnit unit): Timeouts",
        fields: [
            {
                name: "duration",
                type: "text",
                label: "Duration",
                placeholder: "Enter the duration (e.g., 10 seconds)",
                value: "",
            },
            {
                name: "timeUnit",
                type: "select",
                options: [
                    {
                        value: "seconds",
                        label: "SECONDS",
                    },
                    {
                        value: "miliseconds",
                        label: "MILLISECONDS",
                    },
                    {
                        value: "minute",
                        label: "MINUTES",
                    },
                    {
                        value: "hours",
                        label: "HOURS",
                    },
                ],
                label: "TimeUnit",
                placeholder: "Select the Time Unit",
                value: "",
            },
        ],
        returnType: "Timeouts",
    },

    pageLoadTimeouts: {
        blockId: "",
        methodId: "",
        type: "pageLoadTimeout",
        classObject: "Options",
        name: "pageLoadTimeout",
        label: "Set Page Load Timeout",
        description: "Sets the amount of time the WebDriver should wait for a page to load before throwing an exception using a `Duration` object.",
        command: "pageLoadTimeout",
        methodSignature: "pageLoadTimeout(Duration duration): Timeouts",
        fields: [
            {
                name: "duration",
                type: "text",
                label: "Duration",
                placeholder: "Enter the duration (e.g., 10 seconds)",
                value: "",
            },
        ],
        returnType: "Timeouts",
    },

    getPageLoadTimeout: {
        blockId: "",
        methodId: "",
        type: "getPageLoadTimeout",
        classObject: "Options",
        name: "getPageLoadTimeout",
        label: "Get PageLoad Timeout",
        description: "Retrieves the current page load timeout for the WebDriver session, specifying how long the WebDriver will wait for a page to load before throwing an exception.",
        command: "getPageLoadTimeout",
        methodSignature: "getPageLoadTimeout(): Duration",
        fields: [],
        returnType: "Duration",
    },

    //interface TargetLocator

    frame: {
        blockId: "",
        methodId: "",
        type: "frame",
        classObject: "TargetLocator",
        name: "frame",
        label: "Switch to Frame",
        description: "Switches the WebDriver context to a frame identified by an index, name/ID, or WebElement.",
        command: "frame",
        methodSignatures: {
            index: "frame(int index): WebDriver",
            nameOrId: "frame(String nameOrId): WebDriver",
            frameElement: "frame(WebElement frameElement): WebDriver",
        },
        fields: [
            {
                name: "frameType",
                type: "select",
                label: "Frame Type",
                options: [
                    { value: "index", label: "Frame Index" },
                    { value: "nameOrId", label: "Frame Name or ID" },
                    { value: "frameElement", label: "Frame WebElement" },
                ],
                placeholder: "Select the method to switch frame",
                value: "",
                isConditional: true,
                conditions: {
                    index: [
                        {
                            name: "index",
                            type: "number",
                            label: "Frame Index",
                            placeholder: "Enter the frame index",
                            value: "",
                        },
                    ],
                    nameOrId: [
                        {
                            name: "nameOrId",
                            type: "text",
                            label: "Frame Name or ID",
                            placeholder: "Enter the frame name or ID",
                            value: "",
                        },
                    ],
                    frameElement: [
                        {
                            name: "frameElement",
                            type: "text",
                            label: "Frame WebElement",
                            placeholder: "Enter the WebElement representing the frame",
                            value: "",
                        },
                    ],
                },
            },
        ],
        returnType: "WebDriver",
    },

    parentFrame: {
        blockId: "",
        methodId: "",
        type: "parentFrame",
        classObject: "TargetLocator",
        name: "parentFrame",
        label: "Switch to Parent Frame",
        description: "Switches the WebDriver context to the parent frame of the current frame.",
        command: "parentFrame",
        methodSignature: "parentFrame(): WebDriver",
        fields: [],
        returnType: "WebDriver",
    },

    windowByName: {
        blockId: "",
        methodId: "",
        type: "window",
        classObject: "TargetLocator",
        name: "window",
        label: "Switch to Window by Name or Handle",
        description: "Switches the WebDriver context to the window identified by the given name or handle.",
        command: "window",
        methodSignature: "window(String nameOrHandle): WebDriver",
        fields: [
            {
                name: "nameOrHandle",
                type: "text",
                label: "Window Name or Handle",
                placeholder: "Enter the window name or handle",
                value: "",
            },
        ],
        returnType: "WebDriver",
    },

    newWindow: {
        blockId: "",
        methodId: "",
        type: "newWindow",
        classObject: "TargetLocator",
        name: "newWindow",
        label: "Open New Window",
        description: "Opens a new browser window with the specified window type.",
        command: "newWindow",
        methodSignature: "newWindow(WindowType windowType): WebDriver",
        fields: [
            {
                name: "windowType",
                type: "select",
                label: "Window Type",
                placeholder: "Select the type of window",
                value: "",
                options: [
                    {
                        value: "window",
                        label: "WINDOW",
                    },
                    {
                        value: "tab",
                        label: "TABBED",
                    },
                ],
            },
        ],
        returnType: "WebDriver",
    },

    defaultContent: {
        blockId: "",
        methodId: "",
        type: "defaultContent",
        classObject: "TargetLocator",
        name: "defaultContent",
        label: "Switch to Default Content",
        description: "Switches the WebDriver context to the default content, which is the top-level browsing context.",
        command: "defaultContent",
        methodSignature: "defaultContent(): WebDriver",
        fields: [],
        returnType: "WebDriver",
    },

    activeElement: {
        blockId: "",
        methodId: "",
        type: "activeElement",
        classObject: "TargetLocator",
        name: "activeElement",
        label: "Get Active Element",
        description: "Retrieves the currently focused (active) element in the DOM of the given search context.",
        command: "activeElement",
        methodSignature: "activeElement(): WebElement",
        fields: [],
        returnType: "WebElement",
    },

    alert: {
        blockId: "",
        methodId: "",
        type: "alert",
        classObject: "TargetLocator",
        name: "alert",
        label: "Get Alert",
        description: "Retrieves the current active alert in the browser.",
        command: "alert",
        methodSignature: "alert(): Alert",
        fields: [],
        returnType: "Alert",
    },

    // interface Window

    setSize: {
        blockId: "",
        methodId: "",
        type: "setSize",
        classObject: "Window",
        name: "setSize",
        label: "Set Element Size",
        description: "Sets the size (width and height) of the element.",
        command: "setSize",
        methodSignature: "setSize(Dimension size): void",
        fields: [
            {
                name: "width",
                type: "number",
                label: "Width",
                placeholder: "Enter a width for the element",
                value: "",
            },
            {
                name: "height",
                type: "number",
                label: "Height",
                placeholder: "Enter a height for the element",
                value: "",
            },
        ],
        returnType: "void",
    },

    getPosition: {
        blockId: "",
        methodId: "",
        type: "getPosition",
        classObject: "Window",
        name: "getPosition",
        label: "Get Position",
        description: "Retrieves the position (coordinates) of the element on the page.",
        command: "getPosition",
        methodSignature: "getPosition(): Point",
        fields: [],
        returnType: "Point",
    },

    setPosition: {
        blockId: "",
        methodId: "",
        type: "setPosition",
        classObject: "Window",
        name: "setPosition",
        label: "Set Element Position",
        description: "Sets the position (coordinates) of the element on the page.",
        command: "setPosition",
        methodSignature: "setPosition(Point position): void",
        fields: [
            {
                name: " x-coordinate",
                type: "number",
                label: "X Point",
                placeholder: "Enter a X Point for the element",
                value: "",
            },
            {
                name: " y-coordinate",
                type: "number",
                label: "Y Point",
                placeholder: "Enter a Y Point for the element",
                value: "",
            },
        ],
        returnType: "void",
    },

    maximize: {
        blockId: "",
        methodId: "",
        type: "maximize",
        classObject: "Window",
        name: "maximize",
        label: "Maximize Window",
        description: "Maximizes the browser window to full screen.",
        command: "maximize",
        methodSignature: "maximize(): void",
        fields: [],
        returnType: "void",
    },

    minimize: {
        blockId: "",
        methodId: "",
        type: "minimize",
        classObject: "Window",
        name: "minimize",
        label: "Minimize Window",
        description: "Minimizes the browser window to the taskbar or system tray.",
        command: "minimize",
        methodSignature: "minimize(): void",
        fields: [],
        returnType: "void",
    },

    fullscreen: {
        blockId: "",
        methodId: "",
        type: "fullscreen",
        classObject: "Window",
        name: "fullscreen",
        label: "Fullscreen Window",
        description: "Sets the browser window to full screen mode.",
        command: "fullscreen",
        methodSignature: "fullscreen(): void",
        fields: [],
        returnType: "void",
    },

    //interface Alert
    dismiss: {
        blockId: "",
        methodId: "",
        type: "dismiss",
        classObject: "Alert",
        name: "dismiss",
        label: "Dismiss Alert",
        description: "Dismisses the currently displayed alert dialog.",
        command: "dismiss",
        methodSignature: "dismiss(): void",
        fields: [],
        returnType: "void",
    },

    accept: {
        blockId: "",
        methodId: "",
        type: "accept",
        classObject: "Alert",
        name: "accept",
        label: "Accept Alert",
        description: "Accepts the currently displayed alert dialog.",
        command: "accept",
        methodSignature: "accept(): void",
        fields: [],
        returnType: "void",
    },

    //class AcceptedW3CCapabilityKeys
    test: {
        blockId: "",
        methodId: "",
        type: "test",
        classObject: "AcceptedW3CCapabilityKeys",
        name: "test",
        label: "Test Method",
        description: "Tests a given string for a specific condition and returns a boolean.",
        command: "test",
        methodSignature: "test(String input): boolean",
        fields: [
            {
                name: "input",
                type: "text",
                label: "Input Name",
                placeholder: "Enter the string to test",
                value: "",
            },
        ],
        returnType: "boolean",
    },

    //enum Architecture
    is: {
        blockId: "",
        methodId: "",
        type: "is",
        classObject: "Architecture",
        name: "is",
        label: "Is Architecture",
        description: "Checks whether the object is of the specified architecture and returns a boolean result.",
        command: "is",
        methodSignature: "is(Architecture architecture): boolean",
        fields: [
            {
                name: "is",
                type: "select",
                label: "Is Architecture",
                required: true,
                disabled: false,
                options: [
                    {
                        value: "X64",
                        label: "isX64",
                    },
                    {
                        value: "ARM",
                        label: "isARM",
                    },
                    {
                        value: "X86",
                        label: "isX86",
                    },
                ],
                placeholder: "Select the architecture type",
                value: "",
            },
        ],
        returnType: "boolean",
    },

    getDataModel: {
        blockId: "",
        methodId: "",
        type: "getDataModel",
        classObject: "Architecture",
        name: "getDataModel",
        label: "Get Data Model",
        description: "Retrieves the data model as an integer value.",
        command: "getDataModel",
        methodSignature: "getDataModel(): int",
        fields: [],
        returnType: "int",
    },

    getCurrent: {
        blockId: "",
        methodId: "",
        type: "getCurrent",
        classObject: "Architecture",
        name: "getCurrent",
        label: "Get Current Architecture",
        description: "Retrieves the current architecture of the system or object.",
        command: "getCurrent",
        methodSignature: "getCurrent(): Architecture",
        fields: [], //X86: 32-bit  //X64: 64-bit  //ARM: ARM architecture //UNKNOWN: Unknown or unsupported
        returnType: "Architecture",
    },

    extractFromSysProperty: {
        blockId: "",
        methodId: "",
        type: "extractFromSysProperty",
        classObject: "Architecture",
        name: "extractFromSysProperty",
        label: "Extract from System Property",
        description: "Extracts the architecture from the specified system property and returns it.",
        command: "extractFromSysProperty",
        methodSignature: "extractFromSysProperty(String sysProperty): Architecture",
        fields: [
            {
                name: "sysProperty",
                type: "text",
                label: "System Property",
                placeholder: "Enter the system property to extract from",
                value: "",
            },
        ],
        returnType: "Architecture",
    },

    //class BuildInfo
    getReleaseLabel: {
        blockId: "",
        methodId: "",
        type: "getReleaseLabel",
        classObject: "BuildInfo",
        name: "getReleaseLabel",
        label: "Get Release Label",
        description: "Retrieves the release label as a string.",
        command: "getReleaseLabel",
        methodSignature: "getReleaseLabel(): String",
        fields: [],
        returnType: "String",
    },

    getBuildRevision: {
        blockId: "",
        methodId: "",
        type: "getBuildRevision",
        classObject: "BuildInfo",
        name: "getBuildRevision",
        label: "Get Build Revision",
        description: "Retrieves the build revision as a string.",
        command: "getBuildRevision",
        methodSignature: "getBuildRevision(): String",
        fields: [],
        returnType: "String",
    },

    read: {
        blockId: "",
        methodId: "",
        type: "read",
        classObject: "BuildInfo",
        name: "read",
        label: "Read Property",
        description: "Reads the value of the specified property and returns it as a string.",
        command: "read",
        methodSignature: "read(String propertyName): String",
        fields: [
            {
                name: "propertyName",
                type: "text",
                label: "Property Name",
                placeholder: "Enter the property name to read",
                value: "", //Strings (e.g., URLs, API keys). //Numbers (e.g., timeouts, max connections).
                //Boolean flags (e.g., feature toggles).
            },
        ],
        returnType: "String",
    },

    //interface Capabilities
    getBrowserName: {
        blockId: "",
        methodId: "",
        type: "getBrowserName",
        classObject: "Capabilities",
        name: "getBrowserName",
        label: "Get Browser Name",
        description: "Retrieves the name of the current browser as a string.",
        command: "getBrowserName",
        methodSignature: "getBrowserName(): String",
        fields: [],
        returnType: "String",
    },

    getPlatformName: {
        blockId: "",
        methodId: "",
        type: "getPlatformName",
        classObject: "Capabilities",
        name: "getPlatformName",
        label: "Get Platform Name",
        description: "Retrieves the name of the platform as a Platform object.",
        command: "getPlatformName",
        methodSignature: "getPlatformName(): Platform",
        fields: [],
        returnType: "Platform",
    },

    getBrowserVersion: {
        blockId: "",
        methodId: "",
        type: "getBrowserVersion",
        classObject: "Capabilities",
        name: "getBrowserVersion",
        label: "Get Browser Version",
        description: "Retrieves the version of the current browser as a string.",
        command: "getBrowserVersion",
        methodSignature: "getBrowserVersion(): String",
        fields: [],
        returnType: "String",
    },

    asMap: {
        blockId: "",
        methodId: "",
        type: "asMap",
        classObject: "Capabilities",
        name: "asMap",
        label: "As Map",
        description: "Converts and retrieves the object as a map with key-value pairs.",
        command: "asMap",
        methodSignature: "asMap(): Map<String, Object>",
        fields: [],
        returnType: "Map<String, Object>",
    },

    getCapability: {
        blockId: "",
        methodId: "",
        type: "getCapability",
        classObject: "Capabilities",
        name: "getCapability",
        label: "Get Capability",
        description: "Retrieves the value of a specific capability by its name.",
        command: "getCapability",
        methodSignature: "getCapability(String capabilityName): Object",
        fields: [
            {
                name: "capabilityName",
                type: "text",
                label: "Capability Name",
                placeholder: "Enter the name of the capability to retrieve",
                value: "",
            },
        ],
        returnType: "Object",
    },

    isCondition: {
        blockId: "",
        methodId: "",
        type: "is",
        classObject: "Capabilities",
        name: "is",
        label: "Is Condition",
        description: "Checks if the given string satisfies a specific condition and returns a boolean.",
        command: "is",
        methodSignature: "is(String condition): boolean",
        fields: [
            {
                name: "condition",
                type: "text",
                label: "Condition",
                placeholder: "Enter the condition to check",
                value: "",
            },
        ],
        returnType: "boolean",
    },

    merge: {
        blockId: "",
        methodId: "",
        type: "merge",
        classObject: "Capabilities",
        name: "merge",
        label: "Merge Capabilities",
        description: "Merges the specified capabilities with the current capabilities and returns the updated Capabilities object.",
        command: "merge",
        methodSignature: "merge(Capabilities capabilities): Capabilities",
        fields: [
            {
                name: "customCapabilities",
                type: "select",
                options: [
                    {
                        value: "browserName",
                        label: "Browser Name",
                    },
                    {
                        value: "browserVersion",
                        label: "Browser Version",
                    },
                    {
                        value: "platformName",
                        label: "Platform Name",
                    },
                ],
                label: "Custom Capabilities",
                placeholder: "Enter the Custom Capabilities",
                value: "",
            },
            {
                name: "acceptSslCerts",
                type: "radio",
                label: "Accept Ssl Certs",
                placeholder: "Select the Value",
                value: "",
                options: [
                    {
                        value: "true",
                        label: "True",
                    },
                    {
                        value: "false",
                        label: "False",
                    },
                ],
            },
            {
                name: "javascriptEnabled",
                type: "radio",
                label: "Javascript Enabled",
                placeholder: "Select the Value",
                value: "",
                options: [
                    {
                        value: "true",
                        label: "True",
                    },
                    {
                        value: "false",
                        label: "False",
                    },
                ],
            },
            {
                name: "takesScreenshot",
                type: "radio",
                label: "Takes Screenshot",
                placeholder: "Select the Value",
                value: "",
                options: [
                    {
                        value: "true",
                        label: "True",
                    },
                    {
                        value: "false",
                        label: "False",
                    },
                ],
            },
        ],
        returnType: "Capabilities",
    },

    getCapabilityNames: {
        blockId: "",
        methodId: "",
        type: "getCapabilityNames",
        classObject: "Capabilities",
        name: "getCapabilityNames",
        label: "Get Capability Names",
        description: "Retrieves a set of all the capability names available in the current capabilities.",
        command: "getCapabilityNames",
        methodSignature: "getCapabilityNames(): Set<String>",
        fields: [],
        returnType: "Set<String>",
    },

    //interface ContextAware
    context: {
        blockId: "",
        methodId: "",
        type: "context",
        classObject: "ContextAware",
        name: "context",
        label: "Set Context",
        description: "Sets the context to the specified name and returns the associated WebDriver instance.",
        command: "context",
        methodSignature: "context(String contextName): WebDriver",
        fields: [
            {
                name: "contextName",
                type: "text",
                label: "Context Name",
                placeholder: "Enter the context name",
                value: "",
            },
        ],
        returnType: "WebDriver",
    },

    getContextHandles: {
        blockId: "",
        methodId: "",
        type: "getContextHandles",
        classObject: "ContextAware",
        name: "getContextHandles",
        label: "Get Context Handles",
        description: "Retrieves a set of all available context handles.",
        command: "getContextHandles",
        methodSignature: "getContextHandles(): Set<String>",
        fields: [],
        returnType: "Set<String>",
    },

    getContext: {
        blockId: "",
        methodId: "",
        type: "getContext",
        classObject: "ContextAware", // Replace with the actual class if known
        name: "getContext",
        label: "Get Context",
        description: "Retrieves the current context as a string.",
        command: "getContext",
        methodSignature: "getContext(): String",
        fields: [],
        returnType: "String",
    },

    //class Cookie
    getName: {
        blockId: "",
        methodId: "",
        type: "getName",
        classObject: "Cookie", // Replace with the actual class if known
        name: "getName",
        label: "Get Name",
        description: "Retrieves the name of the current object as a string.",
        command: "getName",
        methodSignature: "getName(): String",
        fields: [],
        returnType: "String",
    },

    getValue: {
        blockId: "",
        methodId: "",
        type: "getValue",
        classObject: "Cookie", // Replace with the actual class if known
        name: "getValue",
        label: "Get Value",
        description: "Retrieves the value of the current object as a string.",
        command: "getValue",
        methodSignature: "getValue(): String",
        fields: [],
        returnType: "String",
    },

    getDomain: {
        blockId: "",
        methodId: "",
        type: "getDomain",
        classObject: "Cookie", // Replace with the actual class if known
        name: "getDomain",
        label: "Get Domain",
        description: "Retrieves the domain of the current object or URL as a string.",
        command: "getDomain",
        methodSignature: "getDomain(): String",
        fields: [],
        returnType: "String",
    },

    getPath: {
        blockId: "",
        methodId: "",
        type: "getPath",
        classObject: "Cookie", // Replace with the actual class if known
        name: "getPath",
        label: "Get Path",
        description: "Retrieves the path of the current object or URL as a string.",
        command: "getPath",
        methodSignature: "getPath(): String",
        fields: [],
        returnType: "String",
    },

    isSecure: {
        blockId: "",
        methodId: "",
        type: "isSecure",
        classObject: "Cookie", // Replace with the actual class if known
        name: "isSecure",
        label: "Is Secure",
        description: "Checks if the current connection is secure (HTTPS) and returns a boolean value.",
        command: "isSecure",
        methodSignature: "isSecure(): boolean",
        fields: [],
        returnType: "boolean",
    },

    isHttpOnly: {
        blockId: "",
        methodId: "",
        type: "isHttpOnly",
        classObject: "Cookie", // Replace with the actual class if known
        name: "isHttpOnly",
        label: "Is HttpOnly",
        description: "Checks if the current cookie is marked as HttpOnly and returns a boolean value.",
        command: "isHttpOnly",
        methodSignature: "isHttpOnly(): boolean",
        fields: [],
        returnType: "boolean",
    },

    getExpiry: {
        blockId: "",
        methodId: "",
        type: "getExpiry",
        classObject: "Cookie", // Replace with the actual class if known
        name: "getExpiry",
        label: "Get Expiry",
        description: "Retrieves the expiry date of the current cookie.",
        command: "getExpiry",
        methodSignature: "getExpiry(): Date",
        fields: [],
        returnType: "Date",
    },

    getSameSite: {
        blockId: "",
        methodId: "",
        type: "getSameSite",
        classObject: "Cookie", // Replace with the actual class if known
        name: "getSameSite",
        label: "Get SameSite",
        description: "Retrieves the SameSite attribute of the current cookie as a string.",
        command: "getSameSite",
        methodSignature: "getSameSite(): String",
        fields: [],
        returnType: "String",
    },

    stripPort: {
        blockId: "",
        methodId: "",
        type: "stripPort",
        classObject: "Cookie", // Replace with the actual class if known
        name: "stripPort",
        label: "Strip Port",
        description: "Removes the port number from the provided URL string and returns the base URL without the port.",
        command: "stripPort",
        methodSignature: "stripPort(String): String",
        fields: [
            {
                name: "url",
                type: "text",
                label: "URL",
                placeholder: "Enter the URL with the port",
                value: "",
            },
        ],
        returnType: "String",
    },

    validate: {
        blockId: "",
        methodId: "",
        type: "validate",
        classObject: "Cookie", // Replace with the actual class if known
        name: "validate",
        label: "Validate",
        description: "Performs validation on the current object, ensuring it meets required conditions.",
        command: "validate",
        methodSignature: "validate(): void",
        fields: [],
        returnType: "void",
    },

    //class Builder
    domain: {
        blockId: "",
        methodId: "",
        type: "domain",
        classObject: "Builder", // Replace with the actual class if known
        name: "domain",
        label: "Domain",
        description: "Sets the domain for the current operation and returns a Builder instance.",
        command: "domain",
        methodSignature: "domain(String): Builder",
        fields: [
            {
                name: "domain",
                type: "text",
                label: "Domain",
                placeholder: "Enter the domain for the operation",
                value: "",
            },
        ],
        returnType: "Builder",
    },

    path: {
        blockId: "",
        methodId: "",
        type: "path",
        classObject: "Builder", // Replace with the actual class if known
        name: "path",
        label: "Path",
        description: "Sets the path for the current operation and returns a Builder instance.",
        command: "path",
        methodSignature: "path(String): Builder",
        fields: [
            {
                name: "path",
                type: "text",
                label: "Path",
                placeholder: "Enter the path for the operation",
                value: "",
            },
        ],
        returnType: "Builder",
    },
    /////////////////Date is Not Included so its not showing///////////////////
    expiresOn: {
        blockId: "",
        methodId: "",
        type: "expiresOn",
        classObject: "Builder", // Replace with the actual class if known
        name: "expiresOn",
        label: "Expires On",
        description: "Sets the expiration date for the current operation and returns a Builder instance.",
        command: "expiresOn",
        methodSignature: "expiresOn(Date): Builder",
        fields: [
            {
                name: "expirationDate",
                type: "date",
                label: "Expiration Date",
                placeholder: "Enter the expiration date for the operation",
                value: "",
            },
        ],
        returnType: "Builder",
    },

    secure: {
        blockId: "",
        methodId: "",
        type: "isSecure",
        classObject: "Builder", // Replace with the actual class if known
        name: "isSecure",
        label: "Is Secure",
        description: "Sets the security flag for the current operation and returns a Builder instance.",
        command: "isSecure",
        methodSignature: "isSecure(boolean): Builder",
        fields: [
            {
                name: "isSecure",
                type: "checkbox",
                label: "Secure",
                placeholder: "",
                value: false, // Boolean (true/false)
            },
        ],
        returnType: "Builder",
    },

    httpOnly: {
        blockId: "",
        methodId: "",
        type: "isHttpOnly",
        classObject: "Builder", // Replace with the actual class if known
        name: "isHttpOnly",
        label: "Is HttpOnly",
        description: "Sets the HttpOnly flag for the current operation and returns a Builder instance.",
        command: "isHttpOnly",
        methodSignature: "isHttpOnly(boolean): Builder",
        fields: [
            {
                name: "httpOnly",
                type: "checkbox",
                label: "HttpOnly",
                placeholder: "",
                value: false, // Boolean (true/false)
            },
        ],
        returnType: "Builder",
    },

    sameSite: {
        blockId: "",
        methodId: "",
        type: "sameSite",
        classObject: "Builder", // Replace with the actual class if known
        name: "sameSite",
        label: "SameSite",
        description: "Sets the SameSite attribute for the current operation and returns a Builder instance.",
        command: "sameSite",
        methodSignature: "sameSite(String): Builder",
        fields: [
            {
                name: "sameSite",
                type: "select",
                label: "SameSite Policy",
                placeholder: "Select SameSite policy",
                // Options for SameSite
                options: [
                    {
                        value: "strict",
                        label: "Strict",
                    },
                    {
                        value: "lax",
                        label: "Lax",
                    },
                    {
                        value: "none",
                        label: "None",
                    },
                ],
                value: "", // Selected option
            },
        ],
        returnType: "Builder",
    },

    build: {
        blockId: "",
        methodId: "",
        type: "build",
        classObject: "Builder", // Replace with the actual class if known
        name: "build",
        label: "Build Cookie",
        description: "Builds the Cookie object with the previously set attributes and returns a Cookie instance.",
        command: "build",
        methodSignature: "build(): Cookie",
        fields: [],
        returnType: "Cookie",
    },

    //class Device Rotation
    validateParameters: {
        blockId: "",
        methodId: "",
        type: "validateParameters",
        classObject: "Device Rotation", // Replace with the actual class if known
        name: "validateParameters",
        label: "Validate Parameters",
        description: "Validates the provided integer parameters and performs necessary actions. Returns void.",
        command: "validateParameters",
        methodSignature: "validateParameters(int, int, int): void",
        fields: [
            {
                name: "param1",
                type: "number",
                label: "First Parameter",
                placeholder: "Enter the first integer parameter",
                value: "",
            },
            {
                name: "param2",
                type: "number",
                label: "Second Parameter",
                placeholder: "Enter the second integer parameter",
                value: "",
            },
            {
                name: "param3",
                type: "number",
                label: "Third Parameter",
                placeholder: "Enter the third integer parameter",
                value: "",
            },
        ],
        returnType: "void",
    },

    getX: {
        blockId: "",
        methodId: "",
        type: "getX",
        classObject: "Device Rotation", // Replace with the actual class if known
        name: "getX",
        label: "Get X",
        description: "Retrieves the X coordinate of the object or element as an integer value.",
        command: "getX",
        methodSignature: "getX(): int",
        fields: [],
        returnType: "int",
    },

    getY: {
        blockId: "",
        methodId: "",
        type: "getY",
        classObject: "Device Rotation", // Replace with the actual class if known
        name: "getY",
        label: "Get Y",
        description: "Retrieves the Y coordinate of the object or element as an integer value.",
        command: "getY",
        methodSignature: "getY(): int",
        fields: [],
        returnType: "int",
    },

    getZ: {
        blockId: "",
        methodId: "",
        type: "getZ",
        classObject: "Device Rotation", // Replace with the actual class if known
        name: "getZ",
        label: "Get Z",
        description: "Retrieves the Z coordinate of the object or element as an integer value.",
        command: "getZ",
        methodSignature: "getZ(): int",
        fields: [],
        returnType: "int",
    },

    parameters: {
        blockId: "",
        methodId: "",
        type: "parameters",
        classObject: "Device Rotation", // Replace with the actual class if known
        name: "parameters",
        label: "Parameters",
        description: "Retrieves a map of parameters with String keys and Integer values.",
        command: "parameters",
        methodSignature: "parameters(): Map<String, Integer>",
        fields: [],
        returnType: "Map<String, Integer>",
    },

    //class Dimension
    getWidth: {
        blockId: "",
        methodId: "",
        type: "getWidth",
        classObject: "Dimension", // Replace with the actual class if known
        name: "getWidth",
        label: "Get Width",
        description: "Retrieves the width of the object or element as an integer value.",
        command: "getWidth",
        methodSignature: "getWidth(): int",
        fields: [],
        returnType: "int",
    },

    getHeight: {
        blockId: "",
        methodId: "",
        type: "getHeight",
        classObject: "Dimension", // Replace with the actual class if known
        name: "getHeight",
        label: "Get Height",
        description: "Retrieves the height of the object or element as an integer value.",
        command: "getHeight",
        methodSignature: "getHeight(): int",
        fields: [],
        returnType: "int",
    },

    //interface HasAuthentication
    register: {
        blockId: "",
        methodId: "",
        type: "register",
        classObject: "HasAuthentication", // Replace with the actual class if known
        name: "register",
        label: "Register",
        description: "Registers a predicate with a URI and a supplier for credentials, performing a registration process.",
        command: "register",
        methodSignature: "register(Predicate<URI>, Supplier<Credentials>): void",
        fields: [
            {
                name: "uriPredicate",
                type: "text",
                label: "URI Predicate",
                placeholder: "Enter the URI predicate",
                value: "",
            },
            {
                name: "credentialsSupplier",
                value: "",
                type: "list",
                label: "Credentials Supplier",
                subLabel: "",
                placeholder: "Enter the credentials supplier",
                required: true,
                disabled: false,
                options: [
                    {
                        name: "userName",
                        type: "text",
                        label: "UserName",
                        placeholder: "Enter the username",
                        value: "",
                    },
                    {
                        name: "password",
                        type: "text",
                        label: "Password",
                        placeholder: "Enter the password",
                        value: "",
                    },
                ],
            },
        ],
        returnType: "void",
    },

    setRegister: {
        blockId: "",
        methodId: "",
        type: "register",
        classObject: "HasAuthentication", // Replace with the actual class if known
        name: "register",
        label: "Register",
        description: "Registers a supplier for credentials to handle the registration process.",
        command: "register",
        methodSignature: "register(Supplier<Credentials>): void",
        fields: [
            {
                name: "credentialsSupplier",
                type: "list",
                label: "Credentials Supplier",
                placeholder: "Enter the credentials supplier",
                options: [
                    {
                        name: "userName",
                        type: "text",
                        label: "UserName",
                        placeholder: "Enter the username",
                        value: "",
                    },
                    {
                        name: "password",
                        type: "text",
                        label: "Password",
                        placeholder: "Enter the password",
                        value: "",
                    },
                ],
            },
        ],
        returnType: "void",
    },

    //interface HasCapabilities
    getCapabilities: {
        blockId: "",
        methodId: "",
        type: "getCapabilities",
        classObject: "HasCapabilities", // Replace with the actual class if known
        name: "getCapabilities",
        label: "Get Capabilities",
        description: "Retrieves the capabilities of the current object or system as a Capabilities object.",
        command: "getCapabilities",
        methodSignature: "getCapabilities(): Capabilities",
        fields: [],
        returnType: "Capabilities",
    },

    //interface HasDownloads
    requireDownloadsEnabled: {
        blockId: "",
        methodId: "",
        type: "requireDownloadsEnabled",
        classObject: "HasDownloads", // Replace with the actual class if known
        name: "requireDownloadsEnabled",
        label: "Require Downloads Enabled",
        description: "Ensures that downloads are enabled in the specified capabilities.",
        command: "requireDownloadsEnabled",
        methodSignature: "requireDownloadsEnabled(Capabilities): void",
        fields: [
            {
                name: "capabilities",
                type: "select",
                options: [
                    {
                        value: "browserName",
                        label: "Browser Name",
                    },
                    {
                        value: "browserVersion",
                        label: "Browser Version",
                    },
                    {
                        value: "platformName",
                        label: "Platform Name",
                    },
                ],
                label: "Capabilities",
                placeholder: "Enter the Capabilities",
                value: "",
            },
            {
                name: "value",
                type: "text",
                label: "Value",
                placeholder: "Enter the Value",
                value: "",
            },
            {
                name: "acceptInsecureCerts",
                value: "",
                type: "radio",
                label: "Accept Insecure Certs",
                options: [
                    {
                        value: "true",
                        label: "True",
                    },
                    {
                        value: "false",
                        label: "False",
                    },
                ],
            },
        ],
        returnType: "void",
    },

    getDownloadableFiles: {
        blockId: "",
        methodId: "",
        type: "getDownloadableFiles",
        classObject: "HasDownloads", // Replace with the actual class if known
        name: "getDownloadableFiles",
        label: "Get Downloadable Files",
        description: "Retrieves a list of downloadable files as a list of strings.",
        command: "getDownloadableFiles",
        methodSignature: "getDownloadableFiles(): List<String>",
        fields: [],
        returnType: "List<String>",
    },

    downloadFile: {
        blockId: "",
        methodId: "",
        type: "downloadFile",
        classObject: "HasDownloads", // Replace with the actual class if known
        name: "downloadFile",
        label: "Download File",
        description: "Downloads a file from a given URL to a specified path.",
        command: "downloadFile",
        methodSignature: "downloadFile(String, Path): void",
        fields: [
            {
                name: "fileUrl",
                type: "text",
                label: "File URL",
                placeholder: "Enter the URL of the file to be downloaded",
                value: "",
            },
            {
                name: "downloadPath",
                type: "text",
                label: "Download Path",
                placeholder: "Enter the path where the file will be saved",
                value: "",
            },
        ],
        returnType: "void",
    },

    deleteDownloadableFiles: {
        blockId: "",
        methodId: "",
        type: "deleteDownloadableFiles",
        classObject: "HasDownloads", // Replace with the actual class if known
        name: "deleteDownloadableFiles",
        label: "Delete Downloadable Files",
        description: "Deletes the list of downloadable files or removes their references.",
        command: "deleteDownloadableFiles",
        methodSignature: "deleteDownloadableFiles(): void",
        fields: [],
        returnType: "void",
    },

    //class ImmutableCapabilities
    copyOf: {
        blockId: "",
        methodId: "",
        type: "copyOf",
        classObject: "ImmutableCapabilities", // Replace with the actual class if known
        name: "copyOf",
        label: "Copy Of Capabilities",
        description: "Creates an immutable copy of the provided capabilities.",
        command: "copyOf",
        methodSignature: "copyOf(Capabilities): ImmutableCapabilities",
        fields: [
            {
                name: "capabilities",
                value: "",
                type: "list",
                label: "capabilities",
                placeholder: "Enter the Capabilities",
                subLabel: "",
                required: true,
                disabled: false,
                options: [
                    {
                        name: "browserName",
                        value: "",
                        type: "text",
                        label: "Browser Name",
                        subLabel: "",
                        placeholder: "Enter the browser name",
                        required: true,
                        disabled: false,
                        validation: {},
                        tooltip: "",
                    },
                    {
                        name: "browserVersion",
                        value: "",
                        type: "number",
                        label: "Browser Version",
                        subLabel: "",
                        placeholder: "Enter the browser version",
                        required: true,
                        disabled: false,
                        validation: {},
                        tooltip: "",
                    },
                    {
                        name: "platformName",
                        value: "",
                        type: "text",
                        label: "Platform Name",
                        subLabel: "",
                        placeholder: "Enter the platform name",
                        required: true,
                        disabled: false,
                        validation: {},
                        tooltip: "",
                    },
                ],
                validation: {},
                tooltip: "",
            },
        ],
        returnType: "ImmutableCapabilities",
    },

    //class InvalidSelectorException
    getSupportUrl: {
        blockId: "",
        methodId: "",
        type: "getSupportUrl",
        classObject: "InvalidSelectorException", // Replace with the actual class if known
        name: "getSupportUrl",
        label: "Get Support URL",
        description: "Retrieves the URL for support resources or documentation.",
        command: "getSupportUrl",
        methodSignature: "getSupportUrl(): String",
        fields: [],
        returnType: "String",
    },
    //interface JavascriptExecutor
    pin: {
        blockId: "",
        methodId: "",
        type: "pin",
        classObject: "JavascriptExecutor", // Replace with the actual class if known
        name: "pin",
        label: "Pin Script",
        description: "Pins a script for reuse and returns a unique ScriptKey associated with the script.",
        command: "pin",
        methodSignature: "pin(String): ScriptKey",
        fields: [
            {
                name: "script",
                type: "text",
                label: "Script",
                placeholder: "Enter the script to be pinned",
                value: "",
            },
        ],
        returnType: "ScriptKey",
    },

    unpin: {
        blockId: "",
        methodId: "",
        type: "unpin",
        classObject: "JavascriptExecutor", // Replace with the actual class if known
        name: "unpin",
        label: "Unpin Script",
        description: "Removes a previously pinned script using its ScriptKey.",
        command: "unpin",
        methodSignature: "unpin(ScriptKey): void",
        fields: [
            {
                name: "scriptKey",
                type: "text",
                label: "Script Key",
                placeholder: "Enter the ScriptKey to unpin",
                value: "",
            },
        ],
        returnType: "void",
    },

    getPinnedScript: {
        blockId: "",
        methodId: "",
        type: "getPinnedScripts",
        classObject: "JavascriptExecutor", // Replace with the actual class if known
        name: "getPinnedScripts",
        label: "Get Pinned Scripts",
        description: "Retrieves a set of all currently pinned scripts represented by their ScriptKeys.",
        command: "getPinnedScripts",
        methodSignature: "getPinnedScripts(): Set<ScriptKey>",
        fields: [],
        returnType: "Set<ScriptKey>",
    },

    executeScript: {
        blockId: "",
        methodId: "",
        type: "executeScript",
        classObject: "JavascriptExecutor", // Replace with the actual class if known
        name: "executeScript",
        label: "Execute Script",
        description: "Executes a previously pinned script identified by its ScriptKey, with optional arguments.",
        command: "executeScript",
        methodSignature: "executeScript(ScriptKey, Object...): Object",
        fields: [
            {
                name: "scriptKey",
                type: "text",
                label: "Script Key",
                placeholder: "Enter the ScriptKey of the script to execute",
                value: "",
            },
            {
                name: "arguments",
                type: "textarea",
                label: "Arguments",
                placeholder: "Enter optional arguments as a JSON array",
                value: "",
            },
        ],
        returnType: "Object",
    },

    //enum Keys
    getCodePoint: {
        blockId: "",
        methodId: "",
        type: "getCodePoint",
        classObject: "Keys", // Replace with the actual class if known
        name: "getCodePoint",
        label: "Get Code Point",
        description: "Retrieves the code point associated with a character or entity.",
        command: "getCodePoint",
        methodSignature: "getCodePoint(): int",
        fields: [],
        returnType: "int",
    },

    charAt: {
        blockId: "",
        methodId: "",
        type: "charAt",
        classObject: "Keys", // Replace with the actual class if known
        name: "charAt",
        label: "Character At",
        description: "Retrieves the character at the specified index.",
        command: "charAt",
        methodSignature: "charAt(int): char",
        fields: [
            {
                name: "index",
                type: "number",
                label: "Index",
                placeholder: "Enter the index to retrieve the character",
                value: "",
            },
        ],
        returnType: "char",
    },

    length: {
        blockId: "",
        methodId: "",
        type: "length",
        classObject: "Keys", // Replace with the actual class if known
        name: "length",
        label: "Get Length",
        description: "Returns the length of the object or collection.",
        command: "length",
        methodSignature: "length(): int",
        fields: [],
        returnType: "int",
    },

    subSequence: {
        blockId: "",
        methodId: "",
        type: "subSequence",
        classObject: "Keys", // Replace with the actual class if known
        name: "subSequence",
        label: "Subsequence",
        description: "Retrieves a subsequence of characters from the specified start and end indexes.",
        command: "subSequence",
        methodSignature: "subSequence(int, int): CharSequence",
        fields: [
            {
                name: "start",
                type: "number",
                label: "Start Index",
                placeholder: "Enter the starting index",
                value: "",
            },
            {
                name: "end",
                type: "number",
                label: "End Index",
                placeholder: "Enter the ending index (exclusive)",
                value: "",
            },
        ],
        returnType: "CharSequence",
    },

    chord: {
        blockId: "",
        methodId: "",
        type: "chord",
        classObject: "Keys", // Replace with the actual class if known
        name: "chord",
        label: "Chord",
        description: "Combines multiple character sequences into a single string.",
        command: "chord",
        methodSignature: "chord(CharSequence...): String",
        fields: [
            {
                name: "chord",
                value: "",
                type: "list",
                label: "Chord",
                subLabel: "",
                required: true,
                disabled: false,
                options: [
                    {
                        name: "charSequences",
                        value: "",
                        type: "text",
                        label: "Character Sequences",
                        subLabel: "",
                        placeholder: "Enter character sequences as a comma-separated list",
                        required: true,
                        disabled: false,
                        validation: {},
                        tooltip: "",
                    },
                ],
            },
        ],
        returnType: "String",
    },

    chords: {
        blockId: "",
        methodId: "",
        type: "chord",
        classObject: "Keys", // Replace with the actual class if known
        name: "chord",
        label: "Chord",
        description: "Combines multiple character sequences from an iterable into a single string.",
        command: "chord",
        methodSignature: "chord(Iterable<CharSequence>): String",
        fields: [
            {
                name: "chord",
                value: "",
                type: "list",
                label: "Chord",
                subLabel: "",
                required: true,
                disabled: false,
                options: [
                    {
                        name: "charSequencesIterable",
                        value: "",
                        type: "text",
                        label: "Character Sequences Iterable",
                        subLabel: "",
                        placeholder: "Enter an iterable of character sequences",
                        required: true,
                        disabled: false,
                        validation: {},
                        tooltip: "",
                    },
                ],
            },
        ],
        returnType: "String",
    },

    getKeyFromUnicode: {
        blockId: "",
        methodId: "",
        type: "getKeyFromUnicode",
        classObject: "Keys", // Replace with the actual class if known
        name: "getKeyFromUnicode",
        label: "Get Key From Unicode",
        description: "Retrieves the corresponding key for the specified Unicode character.",
        command: "getKeyFromUnicode",
        methodSignature: "getKeyFromUnicode(char): Keys",
        fields: [
            {
                name: "char",
                type: "text",
                label: "Unicode Character",
                placeholder: "Enter the Unicode character",
                value: "",
            },
        ],
        returnType: "Keys",
    },

    //MutableCapabilities
    mergeCap: {
        blockId: "",
        methodId: "",
        type: "merge",
        classObject: "MutableCapabilities", // Replace with the actual class if known
        name: "merge",
        label: "Merge Capabilities",
        description: "Merges the specified capabilities into the current capabilities and returns the updated MutableCapabilities object.",
        command: "merge",
        methodSignature: "merge(Capabilities): MutableCapabilities",
        fields: [
            {
                name: "capabilities",
                value: "",
                type: "list",
                label: "capabilities",
                placeholder: "Enter the Capabilities",
                subLabel: "",
                required: true,
                disabled: false,
                options: [
                    {
                        name: "browserName",
                        value: "",
                        type: "text",
                        label: "Browser Name",
                        subLabel: "",
                        placeholder: "Enter the browser name",
                        required: true,
                        disabled: false,
                        validation: {},
                        tooltip: "",
                    },
                    {
                        name: "browserVersion",
                        value: "",
                        type: "number",
                        label: "Browser Version",
                        subLabel: "",
                        placeholder: "Enter the browser version",
                        required: true,
                        disabled: false,
                        validation: {},
                        tooltip: "",
                    },
                    {
                        name: "platformName",
                        value: "",
                        type: "text",
                        label: "Platform Name",
                        subLabel: "",
                        placeholder: "Enter the platform name",
                        required: true,
                        disabled: false,
                        validation: {},
                        tooltip: "",
                    },
                ],
                validation: {},
                tooltip: "",
            },
        ],
        returnType: "MutableCapabilities",
    },

    setCapability1: {
        blockId: "",
        methodId: "",
        type: "setCapability",
        classObject: "MutableCapabilities", // Replace with the actual class if known
        name: "setCapability",
        label: "Set Capability",
        description: "Sets a specific capability to a boolean value.",
        command: "setCapability",
        methodSignature: "setCapability(String, boolean): void",
        fields: [
            {
                name: "capabilityName",
                type: "text",
                label: "Capability Name",
                placeholder: "Enter the name of the capability",
                value: "",
            },
            {
                name: "capabilityValue",
                type: "checkbox",
                label: "Capability Value",
                placeholder: "Select if the capability is true",
                value: false,
            },
        ],
        returnType: "void",
    },

    setCapability2: {
        blockId: "",
        methodId: "",
        type: "setCapability",
        classObject: "MutableCapabilities", // Replace with the actual class if known
        name: "setCapability",
        label: "Set Capability",
        description: "Sets a specific capability to a string value.",
        command: "setCapability",
        methodSignature: "setCapability(String, String): void",
        fields: [
            {
                name: "capabilityName",
                type: "text",
                label: "Capability Name",
                placeholder: "Enter the name of the capability",
                value: "",
            },
            {
                name: "capabilityValue",
                type: "text",
                label: "Capability Value",
                placeholder: "Enter the value of the capability",
                value: "",
            },
        ],
        returnType: "void",
    },

    setCapability3: {
        blockId: "",
        methodId: "",
        type: "setCapability",
        classObject: "MutableCapabilities", // Replace with the actual class if known
        name: "setCapability",
        label: "Set Capability",
        description: "Sets a specific capability to a platform value.",
        command: "setCapability",
        methodSignature: "setCapability(String, Platform): void",
        fields: [
            {
                name: "capabilityName",
                type: "text",
                label: "Capability Name",
                placeholder: "Enter the name of the capability",
                value: "",
            },
            {
                name: "platform",
                type: "select",
                label: "Platform",
                value: "",
                options: [
                    {
                        value: "windows",
                        label: "WINDOWS",
                    },
                    {
                        value: "linux",
                        label: "LINUX",
                    },
                    {
                        value: "macOS",
                        label: "MAC",
                    },
                ],
            },
        ],
        returnType: "void",
    },

    setCapability4: {
        blockId: "",
        methodId: "",
        type: "setCapability",
        classObject: "MutableCapabilities", // Replace with the actual class if known
        name: "setCapability",
        label: "Set Capability",
        description: "Sets a specific capability to an object value.",
        command: "setCapability",
        methodSignature: "setCapability(String, Object): void",
        fields: [
            {
                name: "capabilityName",
                type: "text",
                label: "Capability Name",
                placeholder: "Enter the name of the capability",
                value: "",
            },
            {
                name: "capabilityValue",
                type: "textarea", // This could be dynamic depending on the actual object type
                label: "Capability Value",
                placeholder: "Enter the object value of the capability",
                value: "",
            },
        ],
        returnType: "void",
    },

    //enum PageLoadStrategy
    fromString: {
        blockId: "",
        methodId: "",
        type: "fromString",
        classObject: "PageLoadStrategy", // Replace with the actual class if known
        name: "fromString",
        label: "From String",
        description: "Converts a string value into a corresponding PageLoadStrategy.",
        command: "fromString",
        methodSignature: "fromString(String): PageLoadStrategy",
        fields: [
            {
                name: "strategyString",
                type: "select",
                label: "Strategy",
                value: "",
                options: [
                    {
                        value: "normal", // Waits for the full page to load (default behavior).
                        label: "Normal",
                    },
                    {
                        value: "eager", //Waits for DOM content to be ready but doesn't wait for images, CSS, etc
                        label: "Eager",
                    },
                    {
                        value: "none", //Does not wait for the page to load (immediate execution).
                        label: "None",
                    },
                ],
            },
        ],
        returnType: "PageLoadStrategy",
    },

    //class Pdf
    getContent: {
        blockId: "",
        methodId: "",
        type: "getContent",
        classObject: "Pdf", // Replace with the actual class if known
        name: "getContent",
        label: "Get Content",
        description: "Retrieves the content as a string.",
        command: "getContent",
        methodSignature: "getContent(): String",
        fields: [],
        returnType: "String",
    },

    //class PersistentCapabilities
    toUnmodifiableMap: {
        blockId: "",
        methodId: "",
        type: "toUnmodifiableMap",
        classObject: "PersistentCapabilities", // Replace with the actual class if known
        name: "toUnmodifiableMap",
        label: "To Unmodifiable Map",
        description: "Collects elements into an unmodifiable map by applying key and value mapping functions.",
        command: "toUnmodifiableMap",
        methodSignature: "toUnmodifiableMap(Function<? super T, ? extends K>, Function<? super T, ? extends U>) <T, K, U>: Collector<T, ?, Map<K, U>>",
        fields: [
            {
                name: "Key Mapper",
                type: "text",
                label: "Key Mapper Function",
                placeholder: "Enter the function to map the key",
                value: "",
            },
            {
                name: "Value Mapper",
                type: "text",
                label: "Value Mapper Function",
                placeholder: "Enter the function to map the value",
                value: "",
            },
        ],
        returnType: "Collector<T, ?, Map<K, U>>",
    },

    toUnmodifiableSet: {
        blockId: "",
        methodId: "",
        type: "toUnmodifiableSet",
        classObject: "PersistentCapabilities", // Replace with the actual class if known
        name: "toUnmodifiableSet",
        label: "To Unmodifiable Set",
        description: "Collects elements into an unmodifiable set.",
        command: "toUnmodifiableSet",
        methodSignature: "toUnmodifiableSet() <T>: Collector<T, ?, Set<T>>",
        fields: [
            {
                name: "Set",
                value: "",
                type: "list",
                label: "Element Set",
                options: [
                    {
                        name: "Set",
                        value: "",
                        type: "text",
                        label: "Element Set",
                        subLabel: "",
                        placeholder: "Enter elements into an unmodifiable set",
                        required: true,
                        disabled: false,
                        validation: {},
                        tooltip: "",
                    },
                ],
            },
        ],
        returnType: "Collector<T, ?, Set<T>>",
    },

    //enum Platform
    getCurrentPlatform: {
        blockId: "",
        methodId: "",
        type: "getCurrent",
        classObject: "Platform", // Replace with the actual class if known
        name: "getCurrent",
        label: "Get Current Platform",
        description: "Retrieves the current platform instance.",
        command: "getCurrent",
        methodSignature: "getCurrent(): Platform",
        fields: [],
        returnType: "Platform",
    },

    extractFromSysPropertyPlatform: {
        blockId: "",
        methodId: "",
        type: "extractFromSysProperty",
        classObject: "Platform", // Replace with the actual class if known
        name: "extractFromSysProperty",
        label: "Extract From SysProperty",
        description: "Extracts the platform instance from the system property based on the given string key.",
        command: "extractFromSysProperty",
        methodSignature: "extractFromSysProperty(String): Platform",
        fields: [
            {
                name: "sysProperty",
                type: "select",
                label: "System Property",
                placeholder: "Enter the system property key",
                value: "",
                options: [
                    {
                        value: "windows",
                        label: "WINDOWS",
                    },
                    {
                        value: "linux",
                        label: "LINUX",
                    },
                    {
                        value: "macOS",
                        label: "MAC",
                    },
                ],
            },
        ],
        returnType: "Platform",
    },

    extractFromSysPropertyPlatform2: {
        blockId: "",
        methodId: "",
        type: "extractFromSysProperty",
        classObject: "Platform", // Replace with the actual class if known
        name: "extractFromSysProperty",
        label: "Extract From SysProperty",
        description: "Extracts the platform instance from the system properties based on the provided key and value.",
        command: "extractFromSysProperty",
        methodSignature: "extractFromSysProperty(String, String): Platform",
        fields: [
            {
                name: "sysPropertyKey",
                type: "text",
                label: "System Property Key",
                placeholder: "Enter the system property key",
                value: "",
            },
            {
                name: "sysPropertyValue",
                type: "text",
                label: "System Property Value",
                placeholder: "Enter the system property value",
                value: "",
            },
        ],
        returnType: "Platform",
    },

    fromStringPlatform: {
        blockId: "",
        methodId: "",
        type: "fromString",
        classObject: "Platform", // Replace with the actual class if known
        name: "fromString",
        label: "From String",
        description: "Converts a string representation of a platform into a Platform instance.",
        command: "fromString",
        methodSignature: "fromString(String): Platform",
        fields: [
            {
                name: "platform",
                type: "select",
                label: "Platform",
                placeholder: "Enter the string representation of the platform",
                value: "",
                options: [
                    {
                        value: "windows",
                        label: "WINDOWS",
                    },
                    {
                        value: "linux",
                        label: "LINUX",
                    },
                    {
                        value: "macOS",
                        label: "MAC",
                    },
                ],
            },
        ],
        returnType: "Platform",
    },

    isBetterMatch: {
        blockId: "",
        methodId: "",
        type: "isBetterMatch",
        classObject: "Platform", // Replace with the actual class if known
        name: "isBetterMatch",
        label: "Is Better Match",
        description: "Compares two platform strings and returns whether the first is a better match than the second.",
        command: "isBetterMatch",
        methodSignature: "isBetterMatch(String, String): boolean",
        fields: [
            //comparing strings Ex., platform names, browser names, or version strings
            {
                name: "compareDeviceorBrowser",
                value: "",
                type: "tabs",
                label: "Compare Device or Browser",
                options: [
                    {
                        value: "platformName",
                        label: "Platform Name",
                    },
                    {
                        value: "browserName",
                        label: "Browser Name",
                    },
                    {
                        value: "browserVersion",
                        label: "Browser Version",
                    },
                ],
                isConditional: true,
                conditions: {
                    platformName: [
                        {
                            name: "firstPlatform",
                            type: "text",
                            label: "First Platform String",
                            placeholder: "Enter the first platform string",
                            value: "",
                        },
                        {
                            name: "secondPlatform",
                            type: "text",
                            label: "Second Platform String",
                            placeholder: "Enter the second platform string",
                            value: "",
                        },
                    ],
                    browserName: [
                        {
                            name: "firstBrowserName",
                            type: "text",
                            label: "First Browser String",
                            placeholder: "Enter the first browser string",
                            value: "",
                        },
                        {
                            name: "secondBrowserName",
                            type: "text",
                            label: "Second Browser String",
                            placeholder: "Enter the second browser string",
                            value: "",
                        },
                    ],
                    browserVersion: [
                        {
                            name: "firstBrowserVersion",
                            type: "number",
                            label: "First Browser Version",
                            placeholder: "Enter the first browser version",
                            value: "",
                        },
                        {
                            name: "secondBrowserVersion",
                            type: "number",
                            label: "Second Browser Version",
                            placeholder: "Enter the second browser version",
                            value: "",
                        },
                    ],
                },
            },
        ],
        returnType: "boolean",
    },

    getPartOfOsName: {
        blockId: "",
        methodId: "",
        type: "getPartOfOsName",
        classObject: "Platform", // Replace with the actual class if known
        name: "getPartOfOsName",
        label: "Get Part of OS Name",
        description: "Returns an array of strings representing parts of the operating system name.",
        command: "getPartOfOsName",
        methodSignature: "getPartOfOsName(): String[]",
        fields: [],
        returnType: "String[]",
    },

    isPlatform: {
        blockId: "",
        methodId: "",
        type: "is",
        classObject: "Platform", // Replace with the actual class if known
        name: "is",
        label: "Is Platform",
        description: "Checks if the current platform instance matches the provided platform instance.",
        command: "is",
        methodSignature: "is(Platform): boolean",
        fields: [
            {
                name: "platform",
                type: "select",
                label: "Platform",
                placeholder: "Enter the platform instance",
                value: "",
                options: [
                    {
                        value: "windows",
                        label: "WINDOWS",
                    },
                    {
                        value: "linux",
                        label: "LINUX",
                    },
                    {
                        value: "macOS",
                        label: "MAC",
                    },
                ],
            },
        ],
        returnType: "boolean",
    },

    family: {
        blockId: "",
        methodId: "",
        type: "family",
        classObject: "Platform", // Replace with the actual class if known
        name: "family",
        label: "Family",
        description: "Returns the family of the current platform instance.",
        command: "family",
        methodSignature: "family(): Platform",
        fields: [],
        returnType: "Platform",
    },

    isCurrentPlatform: {
        blockId: "",
        methodId: "",
        type: "isCurrentPlatform",
        classObject: "Platform", // Replace with the actual class if known
        name: "isCurrentPlatform",
        label: "Is Current Platform",
        description: "Checks if the current platform matches the provided platform strings.",
        command: "isCurrentPlatform",
        methodSignature: "isCurrentPlatform(String, String): boolean",
        fields: [
            {
                name: "platform",
                type: "select",
                label: "Platform",
                placeholder: "Enter the platform name",
                value: "",
                options: [
                    {
                        value: "windows",
                        label: "WINDOWS",
                    },
                    {
                        value: "linux",
                        label: "LINUX",
                    },
                    {
                        value: "macOS",
                        label: "MAC",
                    },
                ],
            },
            {
                name: "platformVersion",
                type: "number",
                label: "Platform Version",
                placeholder: "Enter the platform version",
                value: "",
            },
        ],
        returnType: "boolean",
    },

    isExactMatch: {
        blockId: "",
        methodId: "",
        type: "isExactMatch",
        classObject: "Platform", // Replace with the actual class if known
        name: "isExactMatch",
        label: "Is Exact Match",
        description: "Checks if the provided platform name and version exactly match the current platform.",
        command: "isExactMatch",
        methodSignature: "isExactMatch(String, String): boolean",
        fields: [
            {
                name: "platformName",
                type: "text",
                label: "Platform Name",
                placeholder: "Enter the platform name",
                value: "",
            },
            {
                name: "platformVersion",
                type: "number",
                label: "Platform Version",
                placeholder: "Enter the platform version",
                value: "",
            },
        ],
        returnType: "boolean",
    },

    getMajorVersion: {
        blockId: "",
        methodId: "",
        type: "getMajorVersion",
        classObject: "Platform", // Replace with the actual class if known
        name: "getMajorVersion",
        label: "Get Major Version",
        description: "Returns the major version of the current platform.",
        command: "getMajorVersion",
        methodSignature: "getMajorVersion(): int",
        fields: [],
        returnType: "int",
    },

    getMinorVersion: {
        blockId: "",
        methodId: "",
        type: "getMinorVersion",
        classObject: "Platform", // Replace with the actual class if known
        name: "getMinorVersion",
        label: "Get Minor Version",
        description: "Returns the minor version of the current platform.",
        command: "getMinorVersion",
        methodSignature: "getMinorVersion(): int",
        fields: [],
        returnType: "int",
    },

    //class Point
    moveBy: {
        blockId: "",
        methodId: "",
        type: "moveBy",
        classObject: "Point", // Replace with the actual class if known
        name: "moveBy",
        label: "Move By",
        description: "Moves the point by the specified x and y offsets and returns the new point.",
        command: "moveBy",
        methodSignature: "moveBy(int, int): Point",
        fields: [
            {
                name: "xOffset",
                type: "number",
                label: "X Offset",
                placeholder: "Enter the X offset",
                value: "",
            },
            {
                name: "yOffset",
                type: "number",
                label: "Y Offset",
                placeholder: "Enter the Y offset",
                value: "",
            },
        ],
        returnType: "Point",
    },

    //class Proxy
    getProxyType: {
        blockId: "",
        methodId: "",
        type: "getProxyType",
        classObject: "Proxy",
        name: "getProxyType",
        label: "Get Proxy Type",
        description: "Retrieves the proxy type associated with the WebDriver instance.",
        command: "getProxyType",
        methodSignature: "getProxyType():ProxyType",
        fields: [],
        returnType: "ProxyType",
    },

    setProxyType: {
        blockId: "",
        methodId: "",
        type: "setProxyType",
        classObject: "Proxy",
        name: "setProxyType",
        label: "Set Proxy Type",
        description: "Sets the proxy type for the WebDriver instance.",
        command: "setProxyType",
        methodSignature: "setProxyType(ProxyType):Proxy",
        fields: [
            {
                name: "setProxyType",
                type: "select",
                label: "Proxy Type",
                options: [
                    { value: "HTTP", label: "HTTP" },
                    { value: "SOCKS", label: "SOCKS" },
                    { value: "FTP", label: "FTP" },
                    { value: "PAC", label: "PAC" },
                    { value: "MANUAL", label: "MANUAL" },
                    { value: "SYSTEM", label: "SYSTEM" },
                    { value: "AUTODETECT", label: "AUTODETECT" },
                ],
                placeholder: "Select Proxy Type",
                value: "",
            },
        ],
        returnType: "Proxy",
    },

    isAutodetect: {
        blockId: "",
        methodId: "",
        type: "isAutodetect",
        classObject: "Proxy",
        name: "isAutodetect",
        label: "Is Autodetect",
        description: "Checks whether the proxy is set to automatically detect the configuration.",
        command: "isAutodetect",
        methodSignature: "isAutodetect():boolean",
        fields: [],
        returnType: "boolean",
    },

    setAutodetect: {
        blockId: "",
        methodId: "",
        type: "setAutodetect",
        classObject: "Proxy",
        name: "setAutodetect",
        label: "Set Autodetect",
        description: "Sets whether the proxy should automatically detect the configuration.",
        command: "setAutodetect",
        methodSignature: "setAutodetect(boolean):Proxy",
        fields: [
            {
                name: "autodetect",
                type: "checkbox",
                label: "Autodetect",
                placeholder: "Set to true for autodetection or false to disable",
                value: "",
            },
        ],
        returnType: "Proxy",
    },

    getFtpProxy: {
        blockId: "",
        methodId: "",
        type: "getFtpProxy",
        classObject: "Proxy",
        name: "getFtpProxy",
        label: "Get FTP Proxy",
        description: "Retrieves the FTP proxy address associated with the proxy configuration.",
        command: "getFtpProxy",
        methodSignature: "getFtpProxy():String",
        fields: [],
        returnType: "String",
    },

    setFtpProxy: {
        blockId: "",
        methodId: "",
        type: "setFtpProxy",
        classObject: "Proxy",
        name: "setFtpProxy",
        label: "Set FTP Proxy",
        description: "Sets the FTP proxy address for the proxy configuration.",
        command: "setFtpProxy",
        methodSignature: "setFtpProxy(String):Proxy",
        fields: [
            {
                name: "ftpProxy",
                type: "text",
                label: "FTP Proxy",
                placeholder: "Enter the FTP proxy address",
                value: "",
            },
        ],
        returnType: "Proxy",
    },

    getHttpProxy: {
        blockId: "",
        methodId: "",
        type: "getHttpProxy",
        classObject: "Proxy",
        name: "getHttpProxy",
        label: "Get HTTP Proxy",
        description: "Retrieves the HTTP proxy address associated with the proxy configuration.",
        command: "getHttpProxy",
        methodSignature: "getHttpProxy():String",
        fields: [],
        returnType: "String",
    },

    setHttpProxy: {
        blockId: "",
        methodId: "",
        type: "setHttpProxy",
        classObject: "Proxy",
        name: "setHttpProxy",
        label: "Set HTTP Proxy",
        description: "Sets the HTTP proxy address for the proxy configuration.",
        command: "setHttpProxy",
        methodSignature: "setHttpProxy(String):Proxy",
        fields: [
            {
                name: "httpProxy",
                type: "text",
                label: "HTTP Proxy",
                placeholder: "Enter the HTTP proxy address",
                value: "",
            },
        ],
        returnType: "Proxy",
    },

    getNoProxy: {
        blockId: "",
        methodId: "",
        type: "getNoProxy",
        classObject: "Proxy",
        name: "getNoProxy",
        label: "Get No Proxy",
        description: "Retrieves the addresses that are excluded from using the proxy.",
        command: "getNoProxy",
        methodSignature: "getNoProxy():String",
        fields: [],
        returnType: "String",
    },

    setNoProxy: {
        blockId: "",
        methodId: "",
        type: "setNoProxy",
        classObject: "Proxy",
        name: "setNoProxy",
        label: "Set No Proxy",
        description: "Sets the addresses that should be excluded from using the proxy.",
        command: "setNoProxy",
        methodSignature: "setNoProxy(String):Proxy",
        fields: [
            {
                name: "noProxy",
                type: "text",
                label: "No Proxy",
                placeholder: "Enter the addresses to exclude from proxy",
                value: "",
            },
        ],
        returnType: "Proxy",
    },

    getSslProxy: {
        blockId: "",
        methodId: "",
        type: "getSslProxy",
        classObject: "Proxy",
        name: "getSslProxy",
        label: "Get SSL Proxy",
        description: "Retrieves the SSL proxy address associated with the proxy configuration.",
        command: "getSslProxy",
        methodSignature: "getSslProxy():String",
        fields: [],
        returnType: "String",
    },

    setSslProxy: {
        blockId: "",
        methodId: "",
        type: "setSslProxy",
        classObject: "Proxy",
        name: "setSslProxy",
        label: "Set SSL Proxy",
        description: "Sets the SSL proxy address for the proxy configuration.",
        command: "setSslProxy",
        methodSignature: "setSslProxy(String):Proxy",
        fields: [
            {
                name: "sslProxy",
                type: "text",
                label: "SSL Proxy",
                placeholder: "Enter the SSL proxy address",
                value: "",
            },
        ],
        returnType: "Proxy",
    },

    getSocksProxy: {
        blockId: "",
        methodId: "",
        type: "getSocksProxy",
        classObject: "Proxy",
        name: "getSocksProxy",
        label: "Get Socks Proxy",
        description: "Retrieves the SOCKS proxy address associated with the proxy configuration.",
        command: "getSocksProxy",
        methodSignature: "getSocksProxy():String",
        fields: [],
        returnType: "String",
    },

    setSocksProxy: {
        blockId: "",
        methodId: "",
        type: "setSocksProxy",
        classObject: "Proxy",
        name: "setSocksProxy",
        label: "Set Socks Proxy",
        description: "Sets the SOCKS proxy address for the proxy configuration.",
        command: "setSocksProxy",
        methodSignature: "setSocksProxy(String):Proxy",
        fields: [
            {
                name: "socksProxy",
                type: "text",
                label: "Socks Proxy",
                placeholder: "Enter the SOCKS proxy address",
                value: "",
            },
        ],
        returnType: "Proxy",
    },

    getSocksVersion: {
        blockId: "",
        methodId: "",
        type: "getSocksVersion",
        classObject: "Proxy",
        name: "getSocksVersion",
        label: "Get SOCKS Version",
        description: "Retrieves the SOCKS version used in the proxy configuration.",
        command: "getSocksVersion",
        methodSignature: "getSocksVersion():Integer",
        fields: [],
        returnType: "Integer",
    },

    setSocksVersion: {
        blockId: "",
        methodId: "",
        type: "setSocksVersion",
        classObject: "Proxy",
        name: "setSocksVersion",
        label: "Set SOCKS Version",
        description: "Sets the SOCKS version for the proxy configuration.",
        command: "setSocksVersion",
        methodSignature: "setSocksVersion(Integer):Proxy",
        fields: [
            {
                name: "socksVersion",
                type: "number",
                label: "SOCKS Version",
                placeholder: "Enter the SOCKS version number",
                value: "",
            },
        ],
        returnType: "Proxy",
    },

    getSocksUsername: {
        blockId: "",
        methodId: "",
        type: "getSocksUsername",
        classObject: "Proxy",
        name: "getSocksUsername",
        label: "Get SOCKS Username",
        description: "Retrieves the username used for authenticating with the SOCKS proxy.",
        command: "getSocksUsername",
        methodSignature: "getSocksUsername():String",
        fields: [],
        returnType: "String",
    },

    setSocksUsername: {
        blockId: "",
        methodId: "",
        type: "setSocksUsername",
        classObject: "Proxy",
        name: "setSocksUsername",
        label: "Set SOCKS Username",
        description: "Sets the username for authenticating with the SOCKS proxy.",
        command: "setSocksUsername",
        methodSignature: "setSocksUsername(String):Proxy",
        fields: [
            {
                name: "socksUsername",
                type: "text",
                label: "SOCKS Username",
                placeholder: "Enter the SOCKS username",
                value: "",
            },
        ],
        returnType: "Proxy",
    },

    getSocksPassword: {
        blockId: "",
        methodId: "",
        type: "getSocksPassword",
        classObject: "Proxy",
        name: "getSocksPassword",
        label: "Get SOCKS Password",
        description: "Retrieves the password used for authenticating with the SOCKS proxy.",
        command: "getSocksPassword",
        methodSignature: "getSocksPassword():String",
        fields: [],
        returnType: "String",
    },

    setSocksPassword: {
        blockId: "",
        methodId: "",
        type: "setSocksPassword",
        classObject: "Proxy",
        name: "setSocksPassword",
        label: "Set SOCKS Password",
        description: "Sets the password for authenticating with the SOCKS proxy.",
        command: "setSocksPassword",
        methodSignature: "setSocksPassword(String):Proxy",
        fields: [
            {
                name: "socksPassword",
                type: "password",
                label: "SOCKS Password",
                placeholder: "Enter the SOCKS password",
                value: "",
                required: true,
                disabled: false,
                validation: {},
                tooltip: "",
            },
        ],
        returnType: "Proxy",
    },

    getProxyAutoconfigUrl: {
        blockId: "",
        methodId: "",
        type: "getProxyAutoconfigUrl",
        classObject: "Proxy",
        name: "getProxyAutoconfigUrl",
        label: "Get Proxy Autoconfig URL",
        description: "Retrieves the URL for the proxy autoconfiguration script.",
        command: "getProxyAutoconfigUrl",
        methodSignature: "getProxyAutoconfigUrl():String",
        fields: [],
        returnType: "String",
    },

    setProxyAutoconfigUrl: {
        blockId: "",
        methodId: "",
        type: "setProxyAutoconfigUrl",
        classObject: "Proxy",
        name: "setProxyAutoconfigUrl",
        label: "Set Proxy Autoconfig URL",
        description: "Sets the URL for the proxy autoconfiguration script.",
        command: "setProxyAutoconfigUrl",
        methodSignature: "setProxyAutoconfigUrl(String):Proxy",
        fields: [
            {
                name: "autoconfigUrl",
                type: "text",
                label: "Autoconfig URL",
                placeholder: "Enter the URL for the proxy autoconfig script",
                value: "",
            },
        ],
        returnType: "Proxy",
    },

    verifyProxyTypeCompatibility: {
        blockId: "",
        methodId: "",
        type: "verifyProxyTypeCompatibility",
        classObject: "Proxy",
        name: "verifyProxyTypeCompatibility",
        label: "Verify Proxy Type Compatibility",
        description: "Verifies if the specified proxy type is compatible with the current configuration.",
        command: "verifyProxyTypeCompatibility",
        methodSignature: "verifyProxyTypeCompatibility(ProxyType):void",
        fields: [
            {
                name: "setProxyType",
                type: "select",
                label: "Proxy Type",
                options: [
                    { value: "HTTP", label: "HTTP" },
                    { value: "SOCKS", label: "SOCKS" },
                    { value: "FTP", label: "FTP" },
                    { value: "PAC", label: "PAC" },
                    { value: "MANUAL", label: "MANUAL" },
                    { value: "SYSTEM", label: "SYSTEM" },
                    { value: "AUTODETECT", label: "AUTODETECT" },
                ],
                placeholder: "Select Proxy Type",
                value: "",
            },
        ],
        returnType: "void",
    },

    extractFrom: {
        blockId: "",
        methodId: "",
        type: "extractFrom",
        classObject: "Proxy",
        name: "extractFrom",
        label: "Extract From Capabilities",
        description: "Extracts the proxy configuration from the provided Capabilities instance.",
        command: "extractFrom",
        methodSignature: "extractFrom(Capabilities):Proxy",
        fields: [
            {
                name: "setProxyType",
                type: "select",
                label: "Proxy Type",
                options: [
                    { value: "HTTP", label: "HTTP" },
                    { value: "SOCKS", label: "SOCKS" },
                    { value: "FTP", label: "FTP" },
                    { value: "PAC", label: "PAC" },
                    { value: "MANUAL", label: "MANUAL" },
                    { value: "SYSTEM", label: "SYSTEM" },
                    { value: "AUTODETECT", label: "AUTODETECT" },
                ],
                placeholder: "Select Proxy Type",
                value: "",
            },
            {
                name: "httpProxy",
                type: "text",
                label: "HTTP Proxy",
                placeholder: "Enter the HTTP proxy address",
                value: "",
            },
            {
                name: "sslProxy",
                type: "text",
                label: "SSL Proxy",
                placeholder: "Enter the SSL proxy address",
                value: "",
            },
            {
                name: "noProxy",
                type: "text",
                label: "NO Proxy",
                placeholder: "Enter the NO proxy address",
                value: "",
            },
            {
                name: "socksProxy",
                type: "text",
                label: "SOCKS Proxy",
                placeholder: "Enter the SOCKS proxy address",
                value: "",
            },
            {
                name: "proxyAutoconfigUrl",
                type: "text",
                label: "Proxy Autoconfig URL",
                placeholder: "Enter the ProxyAutoconfigUrl address",
                value: "",
            },
        ],
        returnType: "Proxy",
    },

    //class Rectangle
    getPoint: {
        blockId: "",
        methodId: "",
        type: "getPoint",
        classObject: "Rectangle",
        name: "getPoint",
        label: "Get Point",
        description: "Retrieves the location of the element on the screen as a Point.",
        command: "getPoint",
        methodSignature: "getPoint():Point",
        fields: [],
        returnType: "Point",
    },

    getDimension: {
        blockId: "",
        methodId: "",
        type: "getDimension",
        classObject: "Rectangle",
        name: "getDimension",
        label: "Get Dimension",
        description: "Retrieves the size (width and height) of the element as a Dimension.",
        command: "getDimension",
        methodSignature: "getDimension():Dimension",
        fields: [],
        returnType: "Dimension",
    },

    //enum ScreenOrientation
    value: {
        blockId: "",
        methodId: "value",
        type: "value",
        classObject: "ScreenOrientation", // Replace with the correct class if applicable
        name: "value",
        label: "Value",
        description: "Returns the value as a string.",
        command: "value()",
        methodSignature: "value(): String",
        fields: [],
        returnType: "String",
    },

    //class ScriptKey
    getIdentifier: {
        blockId: "",
        methodId: "getIdentifier",
        type: "getIdentifier",
        classObject: "ScriptKey", // Replace with the correct class if applicable
        name: "getIdentifier",
        label: "Get Identifier",
        description: "Returns the identifier as a string.",
        command: "getIdentifier()",
        methodSignature: "getIdentifier(): String",
        fields: [],
        returnType: "String",
    },

    toJson: {
        blockId: "",
        methodId: "toJson",
        type: "toJson",
        classObject: "ScriptKey", // Replace with the correct class if applicable
        name: "toJson",
        label: "To JSON",
        description: "Converts the object to its JSON string representation.",
        command: "toJson()",
        methodSignature: "toJson(): String",
        fields: [],
        returnType: "String",
    },

    fromJson: {
        blockId: "",
        methodId: "fromJson",
        type: "fromJson",
        classObject: "ScriptKey", // Replace with the correct class if applicable
        name: "fromJson",
        label: "From JSON",
        description: "Converts a JSON string to a ScriptKey object.",
        command: "fromJson(jsonString)",
        methodSignature: "fromJson(jsonString: String): ScriptKey",
        fields: [
            {
                name: "jsonString",
                type: "textarea",
                label: "JSON String",
                placeholder: "Enter the JSON string",
                value: "",
            },
        ],
        returnType: "ScriptKey",
    },

    //class SharedCapabilitiesMethods
    hashCodeCap: {
        blockId: "",
        methodId: "hashCode",
        type: "hashCode",
        classObject: "SharedCapabilitiesMethods", // Replace with the correct class if applicable
        name: "hashCode",
        label: "Hash Code",
        description: "Generates a hash code for the provided Capabilities object.",
        command: "hashCode(capabilities)",
        methodSignature: "hashCode(capabilities: Capabilities): int",
        fields: [
            {
                name: "browserName",
                type: "text",
                label: "Browser Name",
                placeholder: "Enter the browser name",
                value: "",
            },
            {
                name: "browserVersion",
                type: "number",
                label: "Browser Version",
                placeholder: "Enter the browser version",
                value: "",
            },
            {
                name: "platform",
                type: "text",
                label: "Platform Name",
                placeholder: "Enter the platform name",
                value: "",
            },
            {
                name: "acceptInsecureCerts",
                value: "",
                type: "checkbox",
                label: "AcceptInsecureCerts",
                subLabel: "",
                required: false,
                disabled: false,
                checked: false,
                tooltip: "",
            },
            {
                name: "pageLoadStrategyType",
                type: "select",
                label: "pageLoadStrategy  Type",
                options: [
                    { value: "normal", label: "Normal" },
                    { value: "eager", label: "Eager" },
                    { value: "none", label: "None" },
                ],
                placeholder: "Select the pageLoadStrategy Type",
                value: "",
            },
        ],
        returnType: "int",
    },

    equalsCap: {
        blockId: "",
        methodId: "equals",
        type: "equals",
        classObject: "SharedCapabilitiesMethods", // Replace with the correct class if applicable
        name: "equals",
        label: "Equals",
        description: "Compares two Capabilities objects for equality.",
        command: "equals(capabilities1, capabilities2)",
        methodSignature: "equals(capabilities1: Capabilities, capabilities2: Capabilities): boolean",
        fields: [
            {
                name: "capabilities1",
                type: "list",
                label: "Capabilities 1",
                placeholder: "Enter the first Capabilities object",
                options: [
                    {
                        name: "browserName",
                        type: "text",
                        label: "Browser Name",
                        placeholder: "Enter the browser name",
                        value: "",
                    },
                    {
                        name: "browserVersion",
                        type: "number",
                        label: "Browser Version",
                        placeholder: "Enter the browser version",
                        value: "",
                    },
                    {
                        name: "platform",
                        type: "text",
                        label: "Platform Name",
                        placeholder: "Enter the platform name",
                        value: "",
                    },
                    {
                        name: "acceptInsecureCerts",
                        value: "",
                        type: "checkbox",
                        label: "AcceptInsecureCerts",
                        subLabel: "",
                        required: false,
                        disabled: false,
                        checked: false,
                        tooltip: "",
                    },
                    {
                        name: "pageLoadStrategyType",
                        type: "select",
                        label: "pageLoadStrategy  Type",
                        options: [
                            { value: "normal", label: "Normal" },
                            { value: "eager", label: "Eager" },
                            { value: "none", label: "None" },
                        ],
                        placeholder: "Select the pageLoadStrategy Type",
                        value: "",
                    },
                ],
            },
            {
                name: "capabilities2",
                type: "list",
                label: "Capabilities 2",
                placeholder: "Enter the second Capabilities object",
                options: [
                    {
                        name: "browserName",
                        type: "text",
                        label: "Browser Name",
                        placeholder: "Enter the browser name",
                        value: "",
                    },
                    {
                        name: "browserVersion",
                        type: "number",
                        label: "Browser Version",
                        placeholder: "Enter the browser version",
                        value: "",
                    },
                    {
                        name: "platform",
                        type: "text",
                        label: "Platform Name",
                        placeholder: "Enter the platform name",
                        value: "",
                    },
                    {
                        name: "acceptInsecureCerts",
                        value: "",
                        type: "checkbox",
                        label: "AcceptInsecureCerts",
                        subLabel: "",
                        required: false,
                        disabled: false,
                        checked: false,
                        tooltip: "",
                    },
                    {
                        name: "pageLoadStrategyType",
                        type: "select",
                        label: "pageLoadStrategy  Type",
                        options: [
                            { value: "normal", label: "Normal" },
                            { value: "eager", label: "Eager" },
                            { value: "none", label: "None" },
                        ],
                        placeholder: "Select the pageLoadStrategy Type",
                        value: "",
                    },
                ],
            },
        ],
        returnType: "boolean",
    },

    setCapability: {
        blockId: "",
        methodId: "setCapability",
        type: "setCapability",
        classObject: "SharedCapabilitiesMethods", // Replace with the correct class if applicable
        name: "setCapability",
        label: "Set Capability",
        description: "Sets a capability in the capabilities map with a specific key and value.",
        command: "setCapability(capabilitiesMap, key, value)",
        methodSignature: "setCapability(capabilitiesMap: Map<String, Object>, key: String, value: Object): void",
        fields: [
            {
                name: "capabilitiesMap",
                type: "textarea",
                label: "Capabilities Map",
                placeholder: "Enter the capabilities map",
                value: "",
            },
            {
                name: "key",
                type: "text",
                label: "Key",
                placeholder: "Enter the key for the capability",
                value: "",
            },
            {
                name: "value",
                type: "textarea",
                label: "Value",
                placeholder: "Enter the value object for the capability",
                value: "",
            },
        ],
        returnType: "void",
    },

    toStringCap: {
        blockId: "",
        methodId: "toString",
        type: "toString",
        classObject: "SharedCapabilitiesMethods", // Replace with the correct class if applicable
        name: "toString",
        label: "To String",
        description: "Converts the Capabilities object to its string representation.",
        command: "toString(capabilities)",
        methodSignature: "toString(capabilities: Capabilities): String",
        fields: [
            {
                name: "browserName",
                type: "text",
                label: "Browser Name",
                placeholder: "Enter the browser name",
                value: "",
            },
            {
                name: "browserVersion",
                type: "number",
                label: "Browser Version",
                placeholder: "Enter the browser version",
                value: "",
            },
            {
                name: "platform",
                type: "text",
                label: "Platform Name",
                placeholder: "Enter the platform name",
                value: "",
            },
            {
                name: "headless",
                value: "",
                type: "checkbox",
                label: "Headless",
                subLabel: "",
                required: false,
                disabled: false,
                checked: false,
                tooltip: "",
            },
            {
                name: "disableGpu",
                value: "",
                type: "checkbox",
                label: "Disable GPU",
                subLabel: "",
                required: false,
                disabled: false,
                checked: false,
                tooltip: "",
            },
        ],
        returnType: "String",
    },

    abbreviate: {
        blockId: "",
        methodId: "abbreviate",
        type: "abbreviate",
        classObject: "SharedCapabilitiesMethods", // Replace with the correct class if applicable
        name: "abbreviate",
        label: "Abbreviate",
        description: "Abbreviates the string value for a given key from the map.",
        command: "abbreviate(map, key)",
        methodSignature: "abbreviate(map: Map<Object, String>, key: Object): String",
        fields: [
            {
                name: "map",
                type: "textarea",
                label: "Map",
                placeholder: "Enter the map of key-value pairs",
                value: "",
            },
            {
                name: "key",
                type: "textarea",
                label: "Key",
                placeholder: "Enter the key to abbreviate",
                value: "",
            },
        ],
        returnType: "String",
    },

    //interface TakesScreenshot
    getScreenshotAs: {
        blockId: "",
        methodId: "getScreenshotAs",
        type: "getScreenshotAs",
        classObject: "TakesScreenshot", // Replace with the actual class if known
        name: "getScreenshotAs",
        label: "Get Screenshot As",
        description: "Captures a screenshot and saves it as a file in the specified output type.",
        command: "getScreenshotAs",
        methodSignature: "getScreenshotAs(OutputType.FILE): File",
        fields: [
            {
                name: "outputType",
                type: "select",
                label: "Output Type",
                subLabel: "",
                required: true,
                disabled: false,
                options: [
                    {
                        value: "file",
                        label: "FILE",
                    },
                    {
                        value: "bytes",
                        label: "BYTES",
                    },
                    {
                        value: "base64",
                        label: "BASE64",
                    },
                ],
                placeholder: "Enter the output type (e.g., FILE)",
                value: "",
            },
        ],
        returnType: "File",
    },

    copyFile: {
        blockId: "",
        methodId: "copyFile",
        type: "copyFile",
        classObject: "TakesScreenshot", // Assuming the method belongs to the FileUtils class
        name: "copyFile",
        label: "Copy File",
        description: "Copies a file from the source location to the destination location.",
        command: "FileUtils.copyFile",
        methodSignature: "copyFile(srcFile: File, destFile: File): void",
        fields: [
            {
                name: "srcFile",
                type: "text",
                label: "Source File",
                placeholder: "Enter the source file path",
                value: "",
            },
            {
                name: "destFile",
                type: "text",
                label: "Destination File",
                placeholder: "Enter the destination file path",
                value: "",
            },
        ],
        returnType: "void",
    },

    //enum UnexpectedAlertBehaviour
    fromStringSetAlert: {
        blockId: "",
        methodId: "fromString",
        type: "fromString",
        classObject: "UnexpectedAlertBehaviour", // Assuming this is the class where the method belongs
        name: "fromString",
        label: "From String",
        description: "Converts a string representation to an UnexpectedAlertBehaviour enum value.",
        command: "fromString",
        methodSignature: "fromString(value: String): UnexpectedAlertBehaviour",
        fields: [
            {
                name: "fromString",
                type: "select",
                label: "UnexpectedAlertBehaviour",
                placeholder: "Select the string representation of the behavior",
                options: [
                    {
                        value: "ACCEPT",
                        label: "ACCEPT",
                    },
                    {
                        value: "DISMISS",
                        label: "DISMISS",
                    },
                    {
                        value: "IGNORE",
                        label: "IGNORE",
                    },
                ],
                value: "",
            },
        ],
        returnType: "UnexpectedAlertBehaviour",
    },

    //class UnhandledAlertException
    getAlertText: {
        blockId: "",
        methodId: "getAlertText",
        type: "getAlertText",
        classObject: "UnhandledAlertException", // Assuming this is the class where the method belongs
        name: "getAlertText",
        label: "Get Alert Text",
        description: "Retrieves the text displayed in the currently active alert.",
        command: "getAlertText",
        methodSignature: "getAlertText(): String",
        fields: [],
        returnType: "String",
    },

    getAlert: {
        blockId: "",
        methodId: "getAlert",
        type: "getAlert",
        classObject: "UnhandledAlertException", // Assuming this is the class where the method belongs
        name: "getAlert",
        label: "Get Alert",
        description: "Retrieves a map of alert details with key-value pairs.",
        command: "getAlert",
        methodSignature: "getAlert(): Map<String, String>",
        fields: [],
        returnType: "Map<String, String>",
    },

    //class UnpinnedScriptKey
    pins: {
        blockId: "",
        methodId: "pin",
        type: "pin",
        classObject: "UnpinnedScriptKey", // Replace with the actual class if known
        name: "pin",
        label: "Pin",
        description: "Pins a script in the JavascriptExecutor context and returns an UnpinnedScriptKey.",
        command: "pin",
        methodSignature: "pin(executor: JavascriptExecutor, scriptName: String): UnpinnedScriptKey",
        fields: [
            {
                name: "executor",
                type: "text",
                label: "JavascriptExecutor",
                placeholder: "Enter the JavascriptExecutor instance",
                value: "",
            },
            {
                name: "scriptName",
                type: "text",
                label: "Script Name",
                placeholder: "Enter the script name",
                value: "",
            },
        ],
        returnType: "UnpinnedScriptKey",
    },

    unpins: {
        blockId: "",
        methodId: "unpin",
        type: "unpin",
        classObject: "UnpinnedScriptKey", // Replace with the actual class if known
        name: "unpin",
        label: "Unpin",
        description: "Unpins a previously pinned script in the JavascriptExecutor context.",
        command: "unpin",
        methodSignature: "unpin(executor: JavascriptExecutor, scriptKey: UnpinnedScriptKey): void",
        fields: [
            {
                name: "executor",
                type: "text",
                label: "JavascriptExecutor",
                placeholder: "Enter the JavascriptExecutor instance",
                value: "",
            },
            {
                name: "scriptKey",
                type: "text",
                label: "Script Key",
                placeholder: "Enter the UnpinnedScriptKey",
                value: "",
            },
        ],
        returnType: "void",
    },

    getPinnedScripts: {
        blockId: "",
        methodId: "getPinnedScripts",
        type: "getPinnedScripts",
        classObject: "UnpinnedScriptKey", // Replace with the actual class if known
        name: "getPinnedScripts",
        label: "Get Pinned Scripts",
        description: "Retrieves a set of all pinned script keys in the JavascriptExecutor context.",
        command: "getPinnedScripts",
        methodSignature: "getPinnedScripts(executor: JavascriptExecutor): Set<UnpinnedScriptKey>",
        fields: [
            {
                name: "executor",
                type: "text",
                label: "JavascriptExecutor",
                placeholder: "Enter the JavascriptExecutor instance",
                value: "",
            },
        ],
        returnType: "Set<UnpinnedScriptKey>",
    },

    setScriptId: {
        blockId: "",
        methodId: "setScriptId",
        type: "setScriptId",
        classObject: "UnpinnedScriptKey", // Replace with the actual class if known
        name: "setScriptId",
        label: "Set Script ID",
        description: "Sets the script ID for the current script context.",
        command: "setScriptId",
        methodSignature: "setScriptId(scriptId: String): void",
        fields: [
            {
                name: "scriptId",
                type: "text",
                label: "Script ID",
                placeholder: "Enter the script ID",
                value: "",
            },
        ],
        returnType: "void",
    },

    getScriptId: {
        blockId: "",
        methodId: "getScriptId",
        type: "getScriptId",
        classObject: "UnpinnedScriptKey", // Replace with the actual class if known
        name: "getScriptId",
        label: "Get Script ID",
        description: "Retrieves the ID of the current script context.",
        command: "getScriptId",
        methodSignature: "getScriptId(): String",
        fields: [],
        returnType: "String",
    },

    getScript: {
        blockId: "",
        methodId: "getScript",
        type: "getScript",
        classObject: "UnpinnedScriptKey", // Replace with the actual class if known
        name: "getScript",
        label: "Get Script",
        description: "Retrieves the script associated with the current script context.",
        command: "getScript",
        methodSignature: "getScript(): String",
        fields: [],
        returnType: "String",
    },

    getScriptHandle: {
        blockId: "",
        methodId: "getScriptHandle",
        type: "getScriptHandle",
        classObject: "UnpinnedScriptKey", // Replace with the actual class if known
        name: "getScriptHandle",
        label: "Get Script Handle",
        description: "Retrieves the handle of the current script.",
        command: "getScriptHandle",
        methodSignature: "getScriptHandle(): String",
        fields: [],
        returnType: "String",
    },

    creationScript: {
        blockId: "",
        methodId: "creationScript",
        type: "creationScript",
        classObject: "UnpinnedScriptKey", // Replace with the actual class if known
        name: "creationScript",
        label: "Creation Script",
        description: "Retrieves the creation script associated with the current context.",
        command: "creationScript",
        methodSignature: "creationScript(): String",
        fields: [],
        returnType: "String",
    },

    executionScript: {
        blockId: "",
        methodId: "executionScript",
        type: "executionScript",
        classObject: "UnpinnedScriptKey", // Replace with the actual class if known
        name: "executionScript",
        label: "Execution Script",
        description: "Retrieves the execution script associated with the current context.",
        command: "executionScript",
        methodSignature: "executionScript(): String",
        fields: [],
        returnType: "String",
    },

    removalScript: {
        blockId: "",
        methodId: "removalScript",
        type: "removalScript",
        classObject: "UnpinnedScriptKey", // Replace with the actual class if known
        name: "removalScript",
        label: "Removal Script",
        description: "Retrieves the removal script associated with the current context.",
        command: "removalScript",
        methodSignature: "removalScript(): String",
        fields: [],
        returnType: "String",
    },

    //class UsernameAndPassword
    of: {
        blockId: "",
        methodId: "of",
        type: "of",
        classObject: "UsernameAndPassword", // Replace with the actual class if known
        name: "of",
        label: "Of",
        description: "Creates a Supplier of Credentials from the given username and password.",
        command: "of(username, password)",
        methodSignature: "of(username: String, password: String): Supplier<Credentials>",
        fields: [
            {
                name: "username",
                type: "text",
                label: "Username",
                placeholder: "Enter the username",
                value: "",
            },
            {
                name: "password",
                type: "password",
                label: "Password",
                placeholder: "Enter the password",
                value: "",
            },
        ],
        returnType: "Supplier<Credentials>",
    },

    username: {
        blockId: "",
        methodId: "username",
        type: "username",
        classObject: "UsernameAndPassword", // Replace with the actual class if known
        name: "username",
        label: "Username",
        description: "Retrieves the username from the credentials.",
        command: "username",
        methodSignature: "username(): String",
        fields: [],
        returnType: "String",
    },

    password: {
        blockId: "",
        methodId: "password",
        type: "password",
        classObject: "UsernameAndPassword", // Replace with the actual class if known
        name: "password",
        label: "Password",
        description: "Retrieves the password from the credentials.",
        command: "password",
        methodSignature: "password(): String",
        fields: [],
        returnType: "String",
    },

    //class WebDriverException
    getMessage: {
        blockId: "",
        methodId: "getMessage",
        type: "getMessage",
        classObject: "WebDriverException", // Assuming ErrorDetails is the actual class
        name: "getMessage",
        label: "Get Message",
        description: "Retrieves the message associated with the current error context.",
        command: "getMessage",
        methodSignature: "getMessage(): String",
        fields: [],
        returnType: "String",
    },

    getRawMessage: {
        blockId: "",
        methodId: "getRawMessage",
        type: "getRawMessage",
        classObject: "WebDriverException", // Assuming ErrorDetails is the actual class
        name: "getRawMessage",
        label: "Get Raw Message",
        description: "Retrieves the raw message associated with the current error context.",
        command: "getRawMessage",
        methodSignature: "getRawMessage(): String",
        fields: [],
        returnType: "String",
    },

    createMessage: {
        blockId: "",
        methodId: "createMessage",
        type: "createMessage",
        classObject: "WebDriverException", // Replace with the actual class if known
        name: "createMessage",
        label: "Create Message",
        description: "Creates a new message by processing the provided input string and returns the resulting message.",
        command: "createMessage",
        methodSignature: "createMessage(String): String",
        fields: [
            {
                name: "messageContent",
                type: "text",
                label: "Message Content",
                placeholder: "Enter the message content",
                value: "",
            },
        ],
        returnType: "String",
    },

    getSystemInformation: {
        blockId: "",
        methodId: "getSystemInformation",
        type: "getSystemInformation",
        classObject: "WebDriverException", // Replace with the actual class if known
        name: "getSystemInformation",
        label: "Get System Information",
        description: "Retrieves detailed system information and returns it as a string.",
        command: "getSystemInformation",
        methodSignature: "getSystemInformation(): String",
        fields: [],
        returnType: "String",
    },

    getHostInformation: {
        blockId: "",
        methodId: "getHostInformation",
        type: "getHostInformation",
        classObject: "WebDriverException", // Replace with the actual class if known
        name: "getHostInformation",
        label: "Get Host Information",
        description: "Retrieves detailed host information and returns it as a string.",
        command: "getHostInformation",
        methodSignature: "getHostInformation(): String",
        fields: [],
        returnType: "String",
    },

    getSupportUrl: {
        blockId: "",
        methodId: "getSupportUrl",
        type: "getSupportUrl",
        classObject: "WebDriverException", // Replace with the actual class if known
        name: "getSupportUrl",
        label: "Get Support URL",
        description: "Retrieves the support URL as a string.",
        command: "getSupportUrl",
        methodSignature: "getSupportUrl(): String",
        fields: [],
        returnType: "String",
    },

    getBuildInformation: {
        blockId: "",
        methodId: "getBuildInformation",
        type: "getBuildInformation",
        classObject: "WebDriverException", // Replace with the actual class if known
        name: "getBuildInformation",
        label: "Get Build Information",
        description: "Retrieves detailed build information and returns it as a BuildInfo object.",
        command: "getBuildInformation",
        methodSignature: "getBuildInformation(): BuildInfo",
        fields: [],
        returnType: "BuildInfo",
    },

    getDriverName: {
        blockId: "",
        methodId: "getDriverName",
        type: "getDriverName",
        classObject: "WebDriverException", // Replace with the actual class if known
        name: "getDriverName",
        label: "Get Driver Name",
        description: "Extracts and returns the driver name from the provided stack trace elements as a string.",
        command: "getDriverName",
        methodSignature: "getDriverName(StackTraceElement[]): String",
        fields: [
            {
                name: "stackTraceElements",
                type: "textarea",
                label: "Stack Trace Elements",
                placeholder: "Enter the stack trace elements",
                value: "",
            },
        ],
        returnType: "String",
    },

    addInfo: {
        blockId: "",
        methodId: "addInfo",
        type: "addInfo",
        classObject: "WebDriverException", // Replace with the actual class if known
        name: "addInfo",
        label: "Add Info",
        description: "Adds a new key-value pair of information.",
        command: "addInfo",
        methodSignature: "addInfo(String, String): void",
        fields: [
            {
                name: "key",
                type: "text",
                label: "Key",
                placeholder: "Enter the key for the information",
                value: "",
            },
            {
                name: "value",
                type: "text",
                label: "Value",
                placeholder: "Enter the value for the information",
                value: "",
            },
        ],
        returnType: "void",
    },

    getAdditionalInformation: {
        blockId: "",
        methodId: "getAdditionalInformation",
        type: "getAdditionalInformation",
        classObject: "WebDriverException", // Replace with the actual class if known
        name: "getAdditionalInformation",
        label: "Get Additional Information",
        description: "Retrieves any additional information as a string.",
        command: "getAdditionalInformation",
        methodSignature: "getAdditionalInformation(): String",
        fields: [],
        returnType: "String",
    },

    //interface WebDriverInfo
    getDisplayName: {
        blockId: "",
        methodId: "getDisplayName",
        type: "getDisplayName",
        classObject: "WebDriverInfo", // Replace with the actual class if known
        name: "getDisplayName",
        label: "Get Display Name",
        description: "Retrieves the display name associated with the element.",
        command: "getDisplayName",
        methodSignature: "getDisplayName(): String",
        fields: [],
        returnType: "String",
    },

    getCanonicalCapabilities: {
        blockId: "",
        methodId: "getCanonicalCapabilities",
        type: "getCanonicalCapabilities",
        classObject: "WebDriverInfo", // Replace with the actual class if known
        name: "getCanonicalCapabilities",
        label: "Get Canonical Capabilities",
        description: "Retrieves the canonical capabilities of the object.",
        command: "getCanonicalCapabilities",
        methodSignature: "getCanonicalCapabilities(): Capabilities",
        fields: [],
        returnType: "Capabilities",
    },

    isSupporting: {
        blockId: "",
        methodId: "isSupporting",
        type: "isSupporting",
        classObject: "WebDriverInfo", // Replace with the actual class if known
        name: "isSupporting",
        label: "Is Supporting Capabilities",
        description: "Checks if the given capabilities are supported by the object.",
        command: "isSupporting",
        methodSignature: "isSupporting(Capabilities): boolean",
        fields: [
            {
                name: "capabilities",
                value: "",
                type: "list",
                label: "capabilities",
                placeholder: "Enter the Capabilities",
                subLabel: "",
                required: true,
                disabled: false,
                options: [
                    {
                        name: "browserName",
                        value: "",
                        type: "text",
                        label: "Browser Name",
                        subLabel: "",
                        placeholder: "Enter the browser name",
                        required: true,
                        disabled: false,
                        validation: {},
                        tooltip: "",
                    },
                    {
                        name: "browserVersion",
                        value: "",
                        type: "number",
                        label: "Browser Version",
                        subLabel: "",
                        placeholder: "Enter the browser version",
                        required: true,
                        disabled: false,
                        validation: {},
                        tooltip: "",
                    },
                    {
                        name: "platformName",
                        value: "",
                        type: "text",
                        label: "Platform Name",
                        subLabel: "",
                        placeholder: "Enter the platform name",
                        required: true,
                        disabled: false,
                        validation: {},
                        tooltip: "",
                    },
                ],
                validation: {},
                tooltip: "",
            },
        ],
        returnType: "boolean",
    },

    isSupportingCdp: {
        blockId: "",
        methodId: "isSupportingCdp",
        type: "isSupportingCdp",
        classObject: "WebDriverInfo", // Replace with the actual class if known
        name: "isSupportingCdp",
        label: "Is Supporting CDP",
        description: "Checks if the object supports the Chrome DevTools Protocol (CDP).",
        command: "isSupportingCdp",
        methodSignature: "isSupportingCdp(): boolean",
        fields: [],
        returnType: "boolean",
    },

    isSupportingBiDi: {
        blockId: "",
        methodId: "isSupportingBiDi",
        type: "isSupportingBiDi",
        classObject: "WebDriverInfo", // Replace with the actual class if known
        name: "isSupportingBiDi",
        label: "Is Supporting BiDi",
        description: "Checks if the object supports the Bi-directional WebDriver (BiDi) protocol.",
        command: "isSupportingBiDi",
        methodSignature: "isSupportingBiDi(): boolean",
        fields: [],
        returnType: "boolean",
    },

    isAvailable: {
        blockId: "",
        methodId: "isAvailable",
        type: "isAvailable",
        classObject: "WebDriverInfo", // Replace with the actual class if known
        name: "isAvailable",
        label: "Is Available",
        description: "Checks if the resource or feature is available.",
        command: "isAvailable",
        methodSignature: "isAvailable(): boolean",
        fields: [],
        returnType: "boolean",
    },

    isPresent: {
        blockId: "",
        methodId: "isPresent",
        type: "isPresent",
        classObject: "WebDriverInfo", // Replace with the actual class if known
        name: "isPresent",
        label: "Is Present",
        description: "Checks if the element is present in the DOM.",
        command: "isPresent",
        methodSignature: "isPresent(): boolean",
        fields: [],
        returnType: "boolean",
    },

    getMaximumSimultaneousSessions: {
        blockId: "",
        methodId: "getMaximumSimultaneousSessions",
        type: "getMaximumSimultaneousSessions",
        classObject: "WebDriverInfo", // Replace with the actual class if known
        name: "getMaximumSimultaneousSessions",
        label: "Get Maximum Simultaneous Sessions",
        description: "Retrieves the maximum number of simultaneous sessions allowed.",
        command: "getMaximumSimultaneousSessions",
        methodSignature: "getMaximumSimultaneousSessions(): int",
        fields: [],
        returnType: "int",
    },

    createDriver: {
        blockId: "",
        methodId: "createDriver",
        type: "createDriver",
        classObject: "WebDriverInfo", // Replace with the actual class if known
        name: "createDriver",
        label: "Create WebDriver",
        description: "Creates a WebDriver instance based on the provided capabilities, returning an Optional WebDriver.",
        command: "createDriver",
        methodSignature: "createDriver(Capabilities): Optional<WebDriver>",
        fields: [
            {
                name: "capabilities",
                value: "",
                type: "list",
                label: "capabilities",
                placeholder: "Enter the Capabilities",
                subLabel: "",
                required: true,
                disabled: false,
                options: [
                    {
                        name: "browserName",
                        value: "",
                        type: "text",
                        label: "Browser Name",
                        subLabel: "",
                        placeholder: "Enter the browser name",
                        required: true,
                        disabled: false,
                        validation: {},
                        tooltip: "",
                    },
                    {
                        name: "browserVersion",
                        value: "",
                        type: "number",
                        label: "Browser Version",
                        subLabel: "",
                        placeholder: "Enter the browser version",
                        required: true,
                        disabled: false,
                        validation: {},
                        tooltip: "",
                    },
                    {
                        name: "platformName",
                        value: "",
                        type: "text",
                        label: "Platform Name",
                        subLabel: "",
                        placeholder: "Enter the platform name",
                        required: true,
                        disabled: false,
                        validation: {},
                        tooltip: "",
                    },
                    {
                        name: "headless",
                        value: "",
                        type: "checkbox",
                        label: "Headless",
                        subLabel: "",
                        required: false,
                        disabled: false,
                        checked: false,
                        tooltip: "",
                    },
                ],
                validation: {},
                tooltip: "",
            },
        ],
        returnType: "Optional<WebDriver>",
    },

    //enum WindowType
    fromStringWindowType: {
        blockId: "",
        methodId: "fromString",
        type: "fromString",
        classObject: "WindowType", // Replace with the actual class if known
        name: "fromString",
        label: "From String to Window Type",
        description: "Converts a string representation to a corresponding WindowType.",
        command: "fromString",
        methodSignature: "fromString(String): WindowType",
        fields: [
            {
                name: "windowType",
                type: "select",
                label: "Window Type",
                placeholder: "Select the window type",
                options: [
                    {
                        value: "window",
                        label: "WINDOW",
                    },
                    {
                        value: "popup",
                        label: "POPUP",
                    },
                ],
                value: "",
            },
        ],
        returnType: "WindowType",
    },

    //interface WrapsDriver
    getWrappedDriver: {
        blockId: "",
        methodId: "getWrappedDriver",
        type: "getWrappedDriver",
        classObject: "WrapsDriver", // Replace with the actual class if known
        name: "getWrappedDriver",
        label: "Get Wrapped WebDriver",
        description: "Returns the wrapped WebDriver instance.",
        command: "getWrappedDriver",
        methodSignature: "getWrappedDriver(): WebDriver",
        fields: [],
        returnType: "WebDriver",
    },

    //interface WrapsElement
    getWrappedElement: {
        blockId: "",
        methodId: "getWrappedElement",
        type: "getWrappedElement",
        classObject: "WrapsElement", // Replace with the actual class if known
        name: "getWrappedElement",
        label: "Get Wrapped WebElement",
        description: "Returns the wrapped WebElement instance.",
        command: "getWrappedElement",
        methodSignature: "getWrappedElement(): WebElement",
        fields: [],
        returnType: "WebElement",
    },

    //class FederatedCredentialManagementAccount
    getAccountid: {
        blockId: "",
        methodId: "getAccountid",
        type: "getAccountid",
        classObject: "FederatedCredentialManagementAccount", // Replace with the actual class if known
        name: "getAccountid",
        label: "Get Account ID",
        description: "Returns the account ID as a string.",
        command: "getAccountid",
        methodSignature: "getAccountid(): String",
        fields: [],
        returnType: "String",
    },

    getEmail: {
        blockId: "",
        methodId: "getEmail",
        type: "getEmail",
        classObject: "FederatedCredentialManagementAccount", // Replace with the actual class if known
        name: "getEmail",
        label: "Get Email",
        description: "Returns the email associated with the account as a string.",
        command: "getEmail",
        methodSignature: "getEmail(): String",
        fields: [],
        returnType: "String",
    },

    getName: {
        blockId: "",
        methodId: "getName",
        type: "getName",
        classObject: "FederatedCredentialManagementAccount", // Replace with the actual class if known
        name: "getName",
        label: "Get Name",
        description: "Returns the name associated with the entity as a string.",
        command: "getName",
        methodSignature: "getName(): String",
        fields: [],
        returnType: "String",
    },

    getGivenName: {
        blockId: "",
        methodId: "getGivenName",
        type: "getGivenName",
        classObject: "FederatedCredentialManagementAccount", // Replace with the actual class if known
        name: "getGivenName",
        label: "Get Given Name",
        description: "Returns the given name (first name) of the person as a string.",
        command: "getGivenName",
        methodSignature: "getGivenName(): String",
        fields: [],
        returnType: "String",
    },

    getPictureUrl: {
        blockId: "",
        methodId: "getPictureUrl",
        type: "getPictureUrl",
        classObject: "FederatedCredentialManagementAccount", // Replace with the actual class if known
        name: "getPictureUrl",
        label: "Get Picture URL",
        description: "Returns the URL of the user's profile picture as a string.",
        command: "getPictureUrl",
        methodSignature: "getPictureUrl(): String",
        fields: [],
        returnType: "String",
    },

    getIdpConfigUrl: {
        blockId: "",
        methodId: "getIdpConfigUrl",
        type: "getIdpConfigUrl",
        classObject: "FederatedCredentialManagementAccount", // Replace with the actual class if known
        name: "getIdpConfigUrl",
        label: "Get IDP Config URL",
        description: "Returns the URL of the Identity Provider (IDP) configuration as a string.",
        command: "getIdpConfigUrl",
        methodSignature: "getIdpConfigUrl(): String",
        fields: [],
        returnType: "String",
    },

    getLoginState: {
        blockId: "",
        methodId: "getLoginState",
        type: "getLoginState",
        classObject: "FederatedCredentialManagementAccount", // Replace with the actual class if known
        name: "getLoginState",
        label: "Get Login State",
        description: "Returns the current login state of the user as a string (e.g., logged in or logged out).",
        command: "getLoginState",
        methodSignature: "getLoginState(): String",
        fields: [],
        returnType: "String",
    },

    getTermsOfServiceUrl: {
        blockId: "",
        methodId: "getTermsOfServiceUrl",
        type: "getTermsOfServiceUrl",
        classObject: "FederatedCredentialManagementAccount", // Replace with the actual class if known
        name: "getTermsOfServiceUrl",
        label: "Get Terms of Service URL",
        description: "Returns the URL of the Terms of Service page as a string.",
        command: "getTermsOfServiceUrl",
        methodSignature: "getTermsOfServiceUrl(): String",
        fields: [],
        returnType: "String",
    },

    getPrivacyPolicyUrl: {
        blockId: "",
        methodId: "getPrivacyPolicyUrl",
        type: "getPrivacyPolicyUrl",
        classObject: "FederatedCredentialManagementAccount", // Replace with the actual class if known
        name: "getPrivacyPolicyUrl",
        label: "Get Privacy Policy URL",
        description: "Returns the URL of the Privacy Policy page as a string.",
        command: "getPrivacyPolicyUrl",
        methodSignature: "getPrivacyPolicyUrl(): String",
        fields: [],
        returnType: "String",
    },

    //interface Federated Credential ManagementDialog
    cancelDialog: {
        blockId: "",
        methodId: "cancelDialog",
        type: "cancelDialog",
        classObject: "FederatedCredentialManagementDialog", // Replace with the actual class if known
        name: "cancelDialog",
        label: "Cancel Dialog",
        description: "Cancels the currently open federated credential management dialog.",
        command: "cancelDialog",
        methodSignature: "cancelDialog(): void",
        fields: [],
        returnType: "void",
    },

    selectAccount: {
        blockId: "",
        methodId: "selectAccount",
        type: "selectAccount",
        classObject: "FederatedCredentialManagementDialog", // Replace with the actual class if known
        name: "selectAccount",
        label: "Select Account",
        description: "Selects a specific account from the federated credential management dialog by providing the account index.",
        command: "selectAccount",
        methodSignature: "selectAccount(int): void",
        fields: [
            {
                name: "accountIndex",
                type: "number",
                label: "Account Index",
                placeholder: "Enter the index of the account to select",
                value: "",
            },
        ],
        returnType: "void",
    },

    getDialogType: {
        blockId: "",
        methodId: "getDialogType",
        type: "getDialogType",
        classObject: "FederatedCredentialManagementDialog", // Replace with the actual class if known
        name: "getDialogType",
        label: "Get Dialog Type",
        description: "Retrieves the type of the federated credential management dialog.",
        command: "getDialogType",
        methodSignature: "getDialogType(): String",
        fields: [],
        returnType: "String",
    },

    getTitle: {
        blockId: "",
        methodId: "getTitle",
        type: "getTitle",
        classObject: "FederatedCredentialManagementDialog", // Replace with the actual class if known
        name: "getTitle",
        label: "Get Title",
        description: "Retrieves the title of the federated credential management dialog.",
        command: "getTitle",
        methodSignature: "getTitle(): String",
        fields: [],
        returnType: "String",
    },

    getSubtitle: {
        blockId: "",
        methodId: "getSubtitle",
        type: "getSubtitle",
        classObject: "FederatedCredentialManagementDialog", // Replace with the actual class if known
        name: "getSubtitle",
        label: "Get Subtitle",
        description: "Retrieves the subtitle of the federated credential management dialog.",
        command: "getSubtitle",
        methodSignature: "getSubtitle(): String",
        fields: [],
        returnType: "String",
    },

    getAccounts: {
        blockId: "",
        methodId: "getAccounts",
        type: "getAccounts",
        classObject: "FederatedCredentialManagementDialog", // Replace with the actual class if known
        name: "getAccounts",
        label: "Get Accounts",
        description: "Retrieves the list of accounts available in the federated credential management dialog.",
        command: "getAccounts",
        methodSignature: "getAccounts(): List<FederatedCredentialManagementAccount>",
        fields: [],
        returnType: "List<FederatedCredentialManagementAccount>",
    },

    //interface HasFederated Credential Management

    setDelayEnabled: {
        blockId: "",
        methodId: "setDelayEnabled",
        type: "setDelayEnabled",
        classObject: "HasFederatedCredentialManagement", // Assuming DelayManager is the actual class
        name: "setDelayEnabled",
        label: "Set Delay Enabled",
        description: "Enables or disables the delay for the current operation based on the provided boolean value.",
        command: "setDelayEnabled",
        methodSignature: "setDelayEnabled(enabled: boolean): void",
        fields: [
            {
                name: "enabled",
                type: "checkbox",
                label: "Enable Delay",
                placeholder: "Enables or disables the delay for the current operation based on the provided boolean value.",
                value: "",
            },
        ],
        returnType: "void",
    },

    resetCooldown: {
        blockId: "",
        methodId: "resetCooldown",
        type: "resetCooldown",
        classObject: "HasFederatedCredentialManagement", // Assuming CooldownManager is the actual class
        name: "resetCooldown",
        label: "Reset Cooldown",
        description: "Resets the cooldown for the current operation.",
        command: "resetCooldown",
        methodSignature: "resetCooldown(): void",
        fields: [],
        returnType: "void",
    },

    getFederatedCredentialManagementDialog: {
        blockId: "",
        methodId: "getFederatedCredentialManagementDialog",
        type: "getFederatedCredentialManagementDialog",
        classObject: "HasFederatedCredentialManagement", // Assuming CredentialManager is the actual class
        name: "getFederatedCredentialManagementDialog",
        label: "Get Federated Credential Management Dialog",
        description: "Retrieves the federated credential management dialog for user credentials.",
        command: "getFederatedCredentialManagementDialog",
        methodSignature: "getFederatedCredentialManagementDialog(): FederatedCredentialManagementDialog",
        fields: [],
        returnType: "FederatedCredentialManagementDialog",
    },

    //enum AppCacheStatus
    valueAppCacheStatus: {
        blockId: "",
        methodId: "value",
        type: "value",
        classObject: "AppCacheStatus", // Replace with the actual class if known
        name: "value",
        label: "Value",
        description: "Retrieves the integer value associated with the current context.",
        command: "value",
        methodSignature: "value(): int",
        fields: [],
        returnType: "int",
    },

    getEnumInt: {
        blockId: "",
        methodId: "getEnum",
        type: "getEnum",
        classObject: "AppCacheStatus", // Assuming AppCacheManager is the actual class
        name: "getEnum",
        label: "Get Enum",
        description: "Retrieves the AppCacheStatus enumeration based on the provided integer value.",
        command: "getEnum",
        methodSignature: "getEnum(value: int): AppCacheStatus",
        fields: [
            {
                name: "value",
                type: "number",
                label: "Integer Value",
                placeholder: "Enter an integer value to retrieve the AppCacheStatus",
                value: "",
            },
        ],
        returnType: "AppCacheStatus",
    },

    getEnum: {
        blockId: "",
        methodId: "getEnum",
        type: "getEnum",
        classObject: "AppCacheStatus", // Assuming AppCacheManager is the actual class
        name: "getEnum",
        label: "Get Enum",
        description: "Retrieves the AppCacheStatus enumeration based on the provided string value.",
        command: "getEnum",
        methodSignature: "getEnum(value: String): AppCacheStatus",
        fields: [
            {
                name: "value",
                type: "text",
                label: "String Value",
                placeholder: "Enter a string value to retrieve the AppCacheStatus",
                value: "",
            },
        ],
        returnType: "AppCacheStatus",
    },

    //class Location
    getLatitude: {
        blockId: "",
        methodId: "getLatitude",
        type: "getLatitude",
        classObject: "Location", // Assuming Geolocation is the actual class
        name: "getLatitude",
        label: "Get Latitude",
        description: "Retrieves the latitude value associated with the current geolocation.",
        command: "getLatitude",
        methodSignature: "getLatitude(): double",
        fields: [],
        returnType: "double",
    },

    getLongitude: {
        blockId: "",
        methodId: "getLongitude",
        type: "getLongitude",
        classObject: "Location", // Assuming Geolocation is the actual class
        name: "getLongitude",
        label: "Get Longitude",
        description: "Retrieves the longitude value associated with the current geolocation.",
        command: "getLongitude",
        methodSignature: "getLongitude(): double",
        fields: [],
        returnType: "double",
    },

    getAltitude: {
        blockId: "",
        methodId: "getAltitude",
        type: "getAltitude",
        classObject: "Location", // Assuming Geolocation is the actual class
        name: "getAltitude",
        label: "Get Altitude",
        description: "Retrieves the altitude value associated with the current geolocation.",
        command: "getAltitude",
        methodSignature: "getAltitude(): double",
        fields: [],
        returnType: "double",
    },

    //interface LocationContext
    location: {
        blockId: "",
        methodId: "location",
        type: "location",
        classObject: "LocationContext", // Assuming Geolocation is the actual class
        name: "location",
        label: "Get Location",
        description: "Retrieves the full location object associated with the current geolocation.",
        command: "location",
        methodSignature: "location(): Location",
        fields: [],
        returnType: "Location",
    },

    setLocation: {
        blockId: "",
        methodId: "setLocation",
        type: "setLocation",
        classObject: "LocationContext", // Assuming Geolocation is the actual class
        name: "setLocation",
        label: "Set Location",
        description: "Sets the geolocation to the provided location object.",
        command: "setLocation",
        methodSignature: "setLocation(location: Location): void",
        subLabel: "",
        required: true,
        disabled: false,
        fields: [
            {
                name: "location",
                type: "number",
                label: "X:",
                placeholder: "Enter the location object",
                value: "",
            },
            {
                name: "location",
                type: "number",
                label: "Y:",
                placeholder: "Enter the location object",
                value: "",
            },
        ],
        returnType: "void",
    },

    //interface Storage
    getItem: {
        blockId: "",
        methodId: "getItem",
        type: "getItem",
        classObject: "Storage", // Assuming Storage is the actual class
        name: "getItem",
        label: "Get Item",
        description: "Retrieves the value associated with the given key from the storage.",
        command: "getItem",
        methodSignature: "getItem(key: String): String",
        fields: [
            {
                name: "key",
                type: "text",
                label: "Key",
                placeholder: "Enter the key to retrieve the item",
                value: "",
            },
        ],
        returnType: "String",
    },

    keySet: {
        blockId: "",
        methodId: "keySet",
        type: "keySet",
        classObject: "Storage", // Assuming Map is the actual class
        name: "keySet",
        label: "Get Key Set",
        description: "Retrieves a set of all the keys in the map.",
        command: "keySet",
        methodSignature: "keySet(): Set<String>",
        fields: [],
        returnType: "Set<String>",
    },

    setItem: {
        blockId: "",
        methodId: "setItem",
        type: "setItem",
        classObject: "Storage", // Assuming Storage is the actual class
        name: "setItem",
        label: "Set Item",
        description: "Stores the value associated with the given key in the storage.",
        command: "setItem",
        methodSignature: "setItem(key: String, value: String): void",
        fields: [
            {
                name: "key",
                type: "text",
                label: "Key",
                placeholder: "Enter the key to store the item",
                value: "",
            },
            {
                name: "value",
                type: "text",
                label: "Value",
                placeholder: "Enter the value to store",
                value: "",
            },
        ],
        returnType: "void",
    },

    removeItem: {
        blockId: "",
        methodId: "removeItem",
        type: "removeItem",
        classObject: "Storage", // Assuming Storage is the actual class
        name: "removeItem",
        label: "Remove Item",
        description: "Removes the item associated with the given key from the storage and returns the removed value.",
        command: "removeItem",
        methodSignature: "removeItem(key: String): String",
        fields: [
            {
                name: "key",
                type: "text",
                label: "Key",
                placeholder: "Enter the key to remove the item",
                value: "",
            },
        ],
        returnType: "String",
    },

    size: {
        blockId: "",
        methodId: "size",
        type: "size",
        classObject: "Storage", // Assuming Collection is the actual class
        name: "size",
        label: "Size",
        description: "Retrieves the number of elements in the collection.",
        command: "size",
        methodSignature: "size(): int",
        fields: [],
        returnType: "int",
    },

    //interface WebStorage
    getLocalStorage: {
        blockId: "",
        methodId: "getLocalStorage",
        type: "getLocalStorage",
        classObject: "WebStorage", // Assuming WebStorage is the actual class
        name: "getLocalStorage",
        label: "Get Local Storage",
        description: "Retrieves the LocalStorage instance associated with the current browser context.",
        command: "getLocalStorage",
        methodSignature: "getLocalStorage(): LocalStorage",
        fields: [],
        returnType: "LocalStorage",
    },

    getSessionStorage: {
        blockId: "",
        methodId: "getSessionStorage",
        type: "getSessionStorage",
        classObject: "WebStorage", // Assuming WebStorage is the actual class
        name: "getSessionStorage",
        label: "Get Session Storage",
        description: "Retrieves the SessionStorage instance associated with the current browser context.",
        command: "getSessionStorage",
        methodSignature: "getSessionStorage(): SessionStorage",
        fields: [],
        returnType: "SessionStorage",
    },

    //interface Action
    perform: {
        blockId: "",
        methodId: "perform",
        type: "perform",
        classObject: "Action", // Assuming Action is the actual class
        name: "perform",
        label: "Perform Action",
        description: "Executes the action or task defined in the current context.",
        command: "perform",
        methodSignature: "perform(): void",
        fields: [],
        returnType: "void",
    },

    //class Actions
    keyDown: {
        blockId: "",
        methodId: "keyDown",
        type: "keyDown",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "keyDown",
        label: "Key Down",
        description: "Simulates a key press event with the specified key sequence.",
        command: "keyDown",
        methodSignature: "keyDown(keys: CharSequence): Actions",
        fields: [
            {
                name: "keyDown",
                value: "",
                type: "list",
                label: "Key Down",
                subLabel: "",
                required: true,
                disabled: false,
                options: [
                    {
                        name: "keys",
                        value: "",
                        type: "text",
                        label: "Keys",
                        subLabel: "",
                        placeholder: "Enter the key sequence to simulate",
                        required: true,
                        disabled: false,
                        validation: {},
                        tooltip: "",
                    },
                ],
            },
        ],
        returnType: "Actions",
    },

    keyDowns: {
        blockId: "",
        methodId: "keyDown",
        type: "keyDown",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "keyDown",
        label: "Key Down on Element",
        description: "Simulates a key press event on the specified web element with the provided key sequence.",
        command: "keyDown",
        methodSignature: "keyDown(element: WebElement, keys: CharSequence): Actions",
        fields: [
            {
                name: "element",
                type: "text",
                label: "WebElement",
                placeholder: "Enter the WebElement to perform the key press on",
                value: "",
            },
            {
                name: "keyDown",
                value: "",
                type: "list",
                label: "Key Down",
                subLabel: "",
                required: true,
                disabled: false,
                options: [
                    {
                        name: "keys",
                        value: "",
                        type: "text",
                        label: "Keys",
                        subLabel: "",
                        placeholder: "Enter character sequences as a comma-separated list",
                        required: true,
                        disabled: false,
                        validation: {},
                        tooltip: "",
                    },
                ],
            },
        ],
        returnType: "Actions",
    },

    keyUp: {
        blockId: "",
        methodId: "keyUp",
        type: "keyUp",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "keyUp",
        label: "Key Up",
        description: "Simulates releasing a key with the specified key sequence.",
        command: "keyUp",
        methodSignature: "keyUp(keys: CharSequence): Actions",
        fields: [
            {
                name: "keyUp",
                value: "",
                type: "list",
                label: "Key Up",
                subLabel: "",
                required: true,
                disabled: false,
                options: [
                    {
                        name: "keys",
                        value: "",
                        type: "text",
                        label: "Keys",
                        subLabel: "",
                        placeholder: "Enter the key sequence to release",
                        required: true,
                        disabled: false,
                        validation: {},
                        tooltip: "",
                    },
                ],
            },
        ],
        returnType: "Actions",
    },

    keyUps: {
        blockId: "",
        methodId: "keyUp",
        type: "keyUp",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "keyUp",
        label: "Key Up on Element",
        description: "Simulates releasing a key on the specified web element with the provided key sequence.",
        command: "keyUp",
        methodSignature: "keyUp(element: WebElement, keys: CharSequence): Actions",
        fields: [
            {
                name: "element",
                type: "text",
                label: "WebElement",
                placeholder: "Enter the WebElement to perform the key release on",
                value: "",
            },
            {
                name: "keyUp",
                value: "",
                type: "list",
                label: "Key Up",
                subLabel: "",
                required: true,
                disabled: false,
                options: [
                    {
                        name: "keys",
                        value: "",
                        type: "text",
                        label: "Keys",
                        subLabel: "",
                        placeholder: "Enter the key sequence to release",
                        required: true,
                        disabled: false,
                        validation: {},
                        tooltip: "",
                    },
                ],
            },
        ],
        returnType: "Actions",
    },

    sendKey: {
        blockId: "",
        methodId: "sendKeys",
        type: "sendKeys",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "sendKeys",
        label: "Send Keys",
        description: "Simulates typing a sequence of keys into an input field or element.",
        command: "sendKeys",
        methodSignature: "sendKeys(keys: CharSequence...): Actions",
        fields: [
            {
                name: "keys",
                type: "text",
                label: "Keys",
                placeholder: "Enter the key sequence to send",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    sendKeysChar: {
        blockId: "",
        methodId: "sendKeys",
        type: "sendKeys",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "sendKeys",
        label: "Send Keys on Element",
        description: "Simulates typing a sequence of keys into the specified web element.",
        command: "sendKeys",
        methodSignature: "sendKeys(element: WebElement, keys: CharSequence...): Actions",
        fields: [
            {
                name: "element",
                type: "text",
                label: "WebElement",
                placeholder: "Enter the WebElement to send the keys to",
                value: "",
            },
            {
                name: "keys",
                type: "text",
                label: "Keys",
                placeholder: "Enter the key sequence to send",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    sendKeysInTicks: {
        blockId: "",
        methodId: "sendKeysInTicks",
        type: "sendKeysInTicks",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "sendKeysInTicks",
        label: "Send Keys in Ticks",
        description: "Simulates typing a sequence of keys in individual keypresses (ticks).",
        command: "sendKeysInTicks",
        methodSignature: "sendKeysInTicks(keys: CharSequence...): Actions",
        fields: [
            {
                name: "keys",
                type: "text",
                label: "Keys",
                placeholder: "Enter the key sequence to send in ticks",
                value: "",
            },
            {
                name: "delayInMilliseconds",
                type: "number",
                label: "Delay (ms)",
                placeholder: "Enter the delay between key presses in milliseconds",
                value: 100,
            },
        ],
        returnType: "Actions",
    },

    addKeyAction: {
        blockId: "",
        methodId: "addKeyAction",
        type: "addKeyAction",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "addKeyAction",
        label: "Add Key Action",
        description: "Adds a custom key action to the action chain with a specified key sequence and consumer.",
        command: "addKeyAction",
        methodSignature: "addKeyAction(keys: CharSequence, action: IntConsumer): Actions",
        fields: [
            {
                name: "keys",
                type: "text",
                label: "Keys",
                placeholder: "Enter the key sequence for the action",
                value: "",
            },
            {
                name: "action",
                type: "text",
                label: "Action",
                placeholder: "Enter the action (consumer) to perform",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    clickAndHold: {
        blockId: "",
        methodId: "clickAndHold",
        type: "clickAndHold",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "clickAndHold",
        label: "Click and Hold",
        description: "Simulates pressing and holding the left mouse button on the specified web element.",
        command: "clickAndHold",
        methodSignature: "clickAndHold(element: WebElement): Actions",
        fields: [
            {
                name: "element",
                type: "text",
                label: "WebElement",
                placeholder: "Enter the WebElement to click and hold",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    clickAndHolds: {
        blockId: "",
        methodId: "clickAndHold",
        type: "clickAndHold",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "clickAndHold",
        label: "Click and Hold",
        description: "Simulates pressing and holding the left mouse button at the current mouse location.",
        command: "clickAndHold",
        methodSignature: "clickAndHold(): Actions",
        fields: [],
        returnType: "Actions",
    },

    release: {
        blockId: "",
        methodId: "release",
        type: "release",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "release",
        label: "Release",
        description: "Simulates releasing the left mouse button on the specified web element.",
        command: "release",
        methodSignature: "release(element: WebElement): Actions",
        fields: [
            {
                name: "element",
                type: "text",
                label: "WebElement",
                placeholder: "Enter the WebElement to release the mouse button on",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    scrollToElement: {
        blockId: "",
        methodId: "scrollToElement",
        type: "scrollToElement",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "scrollToElement",
        label: "Scroll to Element",
        description: "Scrolls the page to bring the specified web element into view.",
        command: "scrollToElement",
        methodSignature: "scrollToElement(element: WebElement): Actions",
        fields: [
            {
                name: "element",
                type: "text",
                label: "WebElement",
                placeholder: "Enter the WebElement to scroll to",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    scrollByAmount: {
        blockId: "",
        methodId: "scrollByAmount",
        type: "scrollByAmount",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "scrollByAmount",
        label: "Scroll by Amount",
        description: "Scrolls the page by the specified horizontal and vertical amounts.",
        command: "scrollByAmount",
        methodSignature: "scrollByAmount(xOffset: int, yOffset: int): Actions",
        fields: [
            {
                name: "xOffset",
                type: "number",
                label: "X Offset",
                placeholder: "Enter the horizontal scroll amount",
                value: "",
            },
            {
                name: "yOffset",
                type: "number",
                label: "Y Offset",
                placeholder: "Enter the vertical scroll amount",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    scrollFromOrigin: {
        blockId: "",
        methodId: "scrollFromOrigin",
        type: "scrollFromOrigin",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "scrollFromOrigin",
        label: "Scroll from Origin",
        description: "Scrolls the page from a specified origin point by the given horizontal and vertical amounts.",
        command: "scrollFromOrigin",
        methodSignature: "scrollFromOrigin(origin: ScrollOrigin, xOffset: int, yOffset: int): Actions",
        fields: [
            {
                name: "origin",
                type: "text",
                label: "Scroll Origin",
                placeholder: "Enter the origin of the scroll (e.g., viewport, element)",
                value: "",
            },
            {
                name: "xOffset",
                type: "number",
                label: "X Offset",
                placeholder: "Enter the horizontal scroll amount",
                value: "",
            },
            {
                name: "yOffset",
                type: "number",
                label: "Y Offset",
                placeholder: "Enter the vertical scroll amount",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    releases: {
        blockId: "",
        methodId: "release",
        type: "release",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "release",
        label: "Release",
        description: "Simulates releasing the left mouse button at the current mouse location.",
        command: "release",
        methodSignature: "release(): Actions",
        fields: [],
        returnType: "Actions",
    },

    clickOn: {
        blockId: "",
        methodId: "click",
        type: "click",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "click",
        label: "Click",
        description: "Simulates a mouse click on the specified web element.",
        command: "click",
        methodSignature: "click(element: WebElement): Actions",
        fields: [
            {
                name: "element",
                type: "text",
                label: "WebElement",
                placeholder: "Enter the WebElement to click",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    clicks: {
        blockId: "",
        methodId: "click",
        type: "click",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "click",
        label: "Click",
        description: "Simulates a mouse click at the current mouse location.",
        command: "click",
        methodSignature: "click(): Actions",
        fields: [],
        returnType: "Actions",
    },

    clickInTicks: {
        blockId: "",
        methodId: "clickInTicks",
        type: "clickInTicks",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "clickInTicks",
        label: "Click in Ticks",
        description: "Simulates a mouse click in individual ticks (press and release) using a specific mouse button.",
        command: "clickInTicks",
        methodSignature: "clickInTicks(button: MouseButton): Actions",
        fields: [
            {
                name: "button",
                type: "select",
                label: "Mouse Button",
                placeholder: "Select the mouse button",
                options: [
                    { value: "LEFT", label: "Left Button" },
                    { value: "RIGHT", label: "Right Button" },
                    { value: "MIDDLE", label: "Middle Button" },
                ],
                value: "",
            },
            {
                name: "ticks",
                type: "number",
                label: "Number of Clicks (Ticks)",
                placeholder: "Enter the number of clicks",
                value: "",
            },
            {
                name: "intervalInMillis",
                type: "number",
                label: "Interval (ms)",
                placeholder: "Enter the interval between clicks in milliseconds",
                value: "",
            },
            {
                name: "pressDuration",
                type: "number",
                label: "Press Duration (ms)",
                placeholder: "Enter the duration to hold the mouse button before release",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    focusInTicks: {
        blockId: "",
        methodId: "focusInTicks",
        type: "focusInTicks",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "focusInTicks",
        label: "Focus in Ticks",
        description: "Simulates focusing on a specified web element in individual ticks.",
        command: "focusInTicks",
        methodSignature: "focusInTicks(element: WebElement): Actions",
        fields: [
            {
                name: "element",
                type: "text",
                label: "WebElement",
                placeholder: "Enter the WebElement to focus",
                value: "",
            },
            {
                name: "ticks",
                type: "number",
                label: "Number of Clicks (Ticks)",
                placeholder: "Enter the number of clicks",
                value: "",
            },
            {
                name: "intervalInMillis",
                type: "number",
                label: "Interval (ms)",
                placeholder: "Enter the interval between clicks in milliseconds",
                value: "",
            },
            {
                name: "pressDuration",
                type: "number",
                label: "Press Duration (ms)",
                placeholder: "Enter the duration to hold the mouse button before release",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    doubleClick: {
        blockId: "",
        methodId: "doubleClick",
        type: "doubleClick",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "doubleClick",
        label: "Double Click",
        description: "Simulates a double-click on the specified web element.",
        command: "doubleClick",
        methodSignature: "doubleClick(element: WebElement): Actions",
        fields: [
            {
                name: "element",
                type: "text",
                label: "WebElement",
                placeholder: "Enter the WebElement to double-click",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    doubleClicks: {
        blockId: "",
        methodId: "doubleClick",
        type: "doubleClick",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "doubleClick",
        label: "Double Click",
        description: "Simulates a double-click at the current mouse location.",
        command: "doubleClick",
        methodSignature: "doubleClick(): Actions",
        fields: [],
        returnType: "Actions",
    },

    moveToElement: {
        blockId: "",
        methodId: "moveToElement",
        type: "moveToElement",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "moveToElement",
        label: "Move to Element",
        description: "Moves the mouse to the center of the specified web element.",
        command: "moveToElement",
        methodSignature: "moveToElement(element: WebElement): Actions",
        fields: [
            {
                name: "element",
                type: "text",
                label: "WebElement",
                placeholder: "Enter the WebElement to move to",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    moveToElementOn: {
        blockId: "",
        methodId: "moveToElement",
        type: "moveToElement",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "moveToElement",
        label: "Move to Element",
        description: "Moves the mouse to the center of the specified web element with an offset.",
        command: "moveToElement",
        methodSignature: "moveToElement(element: WebElement, xOffset: int, yOffset: int): Actions",
        fields: [
            {
                name: "element",
                type: "text",
                label: "WebElement",
                placeholder: "Enter the WebElement to move to",
                value: "",
            },
            {
                name: "xOffset",
                type: "number",
                label: "X Offset",
                placeholder: "Enter the horizontal offset",
                value: "",
            },
            {
                name: "yOffset",
                type: "number",
                label: "Y Offset",
                placeholder: "Enter the vertical offset",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    moveInTicks: {
        blockId: "",
        methodId: "moveInTicks",
        type: "moveInTicks",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "moveInTicks",
        label: "Move in Ticks",
        description: "Moves the mouse to the specified web element in individual ticks with the given horizontal and vertical offsets.",
        command: "moveInTicks",
        methodSignature: "moveInTicks(element: WebElement, xOffset: int, yOffset: int): Actions",
        fields: [
            {
                name: "element",
                type: "text",
                label: "WebElement",
                placeholder: "Enter the WebElement to move to",
                value: "",
            },
            {
                name: "xOffset",
                type: "number",
                label: "X Offset",
                placeholder: "Enter the horizontal offset",
                value: "",
            },
            {
                name: "yOffset",
                type: "number",
                label: "Y Offset",
                placeholder: "Enter the vertical offset",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    moveByOffset: {
        blockId: "",
        methodId: "moveByOffset",
        type: "moveByOffset",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "moveByOffset",
        label: "Move by Offset",
        description: "Moves the mouse by the specified horizontal and vertical offsets.",
        command: "moveByOffset",
        methodSignature: "moveByOffset(xOffset: int, yOffset: int): Actions",
        fields: [
            {
                name: "xOffset",
                type: "number",
                label: "X Offset",
                placeholder: "Enter the horizontal offset",
                value: "",
            },
            {
                name: "yOffset",
                type: "number",
                label: "Y Offset",
                placeholder: "Enter the vertical offset",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    moveToLocation: {
        blockId: "",
        methodId: "moveToLocation",
        type: "moveToLocation",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "moveToLocation",
        label: "Move to Location",
        description: "Moves the mouse to the specified coordinates (x, y).",
        command: "moveToLocation",
        methodSignature: "moveToLocation(x: int, y: int): Actions",
        fields: [
            {
                name: "x",
                type: "number",
                label: "X Coordinate",
                placeholder: "Enter the horizontal coordinate",
                value: "",
            },
            {
                name: "y",
                type: "number",
                label: "Y Coordinate",
                placeholder: "Enter the vertical coordinate",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    contextClickOn: {
        blockId: "",
        methodId: "contextClick",
        type: "contextClick",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "contextClick",
        label: "Context Click",
        description: "Simulates a right-click (context click) on the specified web element.",
        command: "contextClick",
        methodSignature: "contextClick(element: WebElement): Actions",
        fields: [
            {
                name: "element",
                type: "text",
                label: "WebElement",
                placeholder: "Enter the WebElement to right-click",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    contextClick: {
        blockId: "",
        methodId: "contextClick",
        type: "contextClick",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "contextClick",
        label: "Context Click",
        description: "Simulates a right-click (context click) at the current mouse location.",
        command: "contextClick",
        methodSignature: "contextClick(): Actions",
        fields: [],
        returnType: "Actions",
    },

    dragAndDrop: {
        blockId: "",
        methodId: "dragAndDrop",
        type: "dragAndDrop",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "dragAndDrop",
        label: "Drag and Drop",
        description: "Simulates dragging a source web element and dropping it onto a target web element.",
        command: "dragAndDrop",
        methodSignature: "dragAndDrop(source: WebElement, target: WebElement): Actions",
        fields: [
            {
                name: "source",
                type: "text",
                label: "Source WebElement",
                placeholder: "Enter the source WebElement to drag",
                value: "",
            },
            {
                name: "target",
                type: "text",
                label: "Target WebElement",
                placeholder: "Enter the target WebElement to drop onto",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    dragAndDropBy: {
        blockId: "",
        methodId: "dragAndDropBy",
        type: "dragAndDropBy",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "dragAndDropBy",
        label: "Drag and Drop By",
        description: "Simulates dragging a web element by the specified horizontal and vertical offsets.",
        command: "dragAndDropBy",
        methodSignature: "dragAndDropBy(element: WebElement, xOffset: int, yOffset: int): Actions",
        fields: [
            {
                name: "element",
                type: "text",
                label: "WebElement",
                placeholder: "Enter the WebElement to drag",
                value: "",
            },
            {
                name: "xOffset",
                type: "number",
                label: "X Offset",
                placeholder: "Enter the horizontal offset",
                value: "",
            },
            {
                name: "yOffset",
                type: "number",
                label: "Y Offset",
                placeholder: "Enter the vertical offset",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    pause: {
        blockId: "",
        methodId: "pause",
        type: "pause",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "pause",
        label: "Pause",
        description: "Pauses the current action chain for the specified duration.",
        command: "pause",
        methodSignature: "pause(duration: Duration): Actions",
        fields: [
            {
                name: "duration",
                type: "text",
                label: "Duration",
                placeholder: "Enter the pause duration",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    tick: {
        blockId: "",
        methodId: "tick",
        type: "tick",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "tick",
        label: "Tick",
        description: "Adds an interaction to be executed as part of the action chain.",
        command: "tick",
        methodSignature: "tick(interactions: Interaction...): Actions",
        fields: [
            {
                name: "interactions",
                type: "text",
                label: "Interactions",
                placeholder: "Enter the interactions to perform",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    setActiveKeyboard: {
        blockId: "",
        methodId: "setActiveKeyboard",
        type: "setActiveKeyboard",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "setActiveKeyboard",
        label: "Set Active Keyboard",
        description: "Sets the specified keyboard as the active keyboard for the current action chain.",
        command: "setActiveKeyboard",
        methodSignature: "setActiveKeyboard(keyboard: String): Actions",
        fields: [
            {
                name: "keyboard",
                type: "text",
                label: "Keyboard",
                placeholder: "Enter the name or ID of the keyboard",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    setActivePointer: {
        blockId: "",
        methodId: "setActivePointer",
        type: "setActivePointer",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "setActivePointer",
        label: "Set Active Pointer",
        description: "Sets the specified pointer kind and pointer as the active pointer for the current action chain.",
        command: "setActivePointer",
        methodSignature: "setActivePointer(kind: Kind, pointer: String): Actions",
        fields: [
            {
                name: "kind",
                type: "text",
                label: "Pointer Kind",
                placeholder: "Enter the kind of pointer",
                value: "",
            },
            {
                name: "pointer",
                type: "text",
                label: "Pointer",
                placeholder: "Enter the pointer name or ID",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    setActiveWheel: {
        blockId: "",
        methodId: "setActiveWheel",
        type: "setActiveWheel",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "setActiveWheel",
        label: "Set Active Wheel",
        description: "Sets the specified wheel as the active wheel for the current action chain.",
        command: "setActiveWheel",
        methodSignature: "setActiveWheel(wheel: String): Actions",
        fields: [
            {
                name: "wheel",
                type: "text",
                label: "Wheel",
                placeholder: "Enter the wheel name or ID",
                value: "",
            },
        ],
        returnType: "Actions",
    },

    getActiveKeyboard: {
        blockId: "",
        methodId: "getActiveKeyboard",
        type: "getActiveKeyboard",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "getActiveKeyboard",
        label: "Get Active Keyboard",
        description: "Retrieves the current active keyboard used in the action chain.",
        command: "getActiveKeyboard",
        methodSignature: "getActiveKeyboard(): Keyinput",
        fields: [],
        returnType: "Keyinput",
    },

    getActivePointer: {
        blockId: "",
        methodId: "getActivePointer",
        type: "getActivePointer",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "getActivePointer",
        label: "Get Active Pointer",
        description: "Retrieves the current active pointer used in the action chain.",
        command: "getActivePointer",
        methodSignature: "getActivePointer(): Pointerinput",
        fields: [],
        returnType: "Pointerinput",
    },

    getActiveWheel: {
        blockId: "",
        methodId: "getActiveWheel",
        type: "getActiveWheel",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "getActiveWheel",
        label: "Get Active Wheel",
        description: "Retrieves the current active wheel used in the action chain.",
        command: "getActiveWheel",
        methodSignature: "getActiveWheel(): Wheelinput",
        fields: [],
        returnType: "Wheelinput",
    },

    builds: {
        blockId: "",
        methodId: "build",
        type: "build",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "build",
        label: "Build",
        description: "Builds the action chain and returns the final Action object.",
        command: "build",
        methodSignature: "build(): Action",
        fields: [],
        returnType: "Action",
    },

    performs: {
        blockId: "",
        methodId: "perform",
        type: "perform",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "perform",
        label: "Perform",
        description: "Performs the action chain, executing all queued actions.",
        command: "perform",
        methodSignature: "perform(): void",
        fields: [],
        returnType: "void",
    },

    getSequence: {
        blockId: "",
        methodId: "getSequence",
        type: "getSequence",
        classObject: "Actions", // Assuming Actions is the actual class
        name: "getSequence",
        label: "Get Sequence",
        description: "Retrieves the sequence of actions for the given input source.",
        command: "getSequence",
        methodSignature: "getSequence(inputSource: InputSource): Sequence",
        fields: [
            {
                name: "inputSource",
                type: "textarea",
                label: "Input Source",
                placeholder: "Enter the input source",
                value: "",
            },
        ],
        returnType: "Sequence",
    },

    //class CompositeAction
    addAction: {
        blockId: "",
        methodId: "addAction",
        type: "addAction",
        classObject: "CompositeAction", // Assuming CompositeAction is the actual class
        name: "addAction",
        label: "Add Action",
        description: "Adds the specified action to the current composite action.",
        command: "addAction",
        methodSignature: "addAction(action: Action): CompositeAction",
        fields: [
            {
                name: "action",
                type: "text",
                label: "Action",
                placeholder: "Enter the action to be added",
                value: "",
            },
        ],
        returnType: "CompositeAction",
    },

    //interface Coordinates
    onScreen: {
        blockId: "",
        methodId: "onScreen",
        type: "onScreen",
        classObject: "Coordinates", // Assuming Point is the actual class
        name: "onScreen",
        label: "On Screen",
        description: "Returns the screen coordinates of the point.",
        command: "onScreen",
        methodSignature: "onScreen(): Point",
        fields: [],
        returnType: "Point",
    },

    inViewPort: {
        blockId: "",
        methodId: "inViewPort",
        type: "inViewPort",
        classObject: "Coordinates", // Assuming Point is the actual class
        name: "inViewPort",
        label: "In ViewPort",
        description: "Returns the point relative to the viewport.",
        command: "inViewPort",
        methodSignature: "inViewPort(): Point",
        fields: [],
        returnType: "Point",
    },

    onPage: {
        blockId: "",
        methodId: "onPage",
        type: "onPage",
        classObject: "Coordinates", // Assuming Point is the actual class
        name: "onPage",
        label: "On Page",
        description: "Returns the point coordinates relative to the entire page.",
        command: "onPage",
        methodSignature: "onPage(): Point",
        fields: [],
        returnType: "Point",
    },

    getAuxiliary: {
        blockId: "",
        methodId: "getAuxiliary",
        type: "getAuxiliary",
        classObject: "Coordinates", // Replace with the actual class if known
        name: "getAuxiliary",
        label: "Get Auxiliary",
        description: "Retrieves the auxiliary object associated with the current context.",
        command: "getAuxiliary",
        methodSignature: "getAuxiliary(): Object",
        fields: [],
        returnType: "Object",
    },

    //interface Encodable
    encode: {
        blockId: "",
        methodId: "encode",
        type: "encode",
        classObject: "Encodable", // Replace with the actual class if known
        name: "encode",
        label: "Encode",
        description: "Encodes the current object into a map of key-value pairs.",
        command: "encode",
        methodSignature: "encode(): Map<String, Object>",
        fields: [],
        returnType: "Map<String, Object>",
    },

    //interface InputSource
    getInputType: {
        blockId: "",
        methodId: "getInputType",
        type: "getInputType",
        classObject: "InputSource", // Replace with the actual class if known
        name: "getInputType",
        label: "Get Input Type",
        description: "Retrieves the type of the input source.",
        command: "getInputType",
        methodSignature: "getInputType(): SourceType",
        fields: [],
        returnType: "SourceType",
    },

    getNames: {
        blockId: "",
        methodId: "getName",
        type: "getName",
        classObject: "InputSource", // Replace with the actual class if known
        name: "getName",
        label: "Get Name",
        description: "Retrieves the name associated with the current object.",
        command: "getName",
        methodSignature: "getName(): String",
        fields: [],
        returnType: "String",
    },

    //class Interaction
    isValidFor: {
        blockId: "",
        methodId: "isValidFor",
        type: "isValidFor",
        classObject: "Interaction", // Replace with the actual class if known
        name: "isValidFor",
        label: "Is Valid For",
        description: "Checks if the current object is valid for the given source type.",
        command: "isValidFor",
        methodSignature: "isValidFor(sourceType: SourceType): boolean",
        fields: [
            {
                name: "sourceType",
                type: "text",
                label: "Source Type",
                placeholder: "Enter the source type",
                value: "",
            },
        ],
        returnType: "boolean",
    },

    getSource: {
        blockId: "",
        methodId: "getSource",
        type: "getSource",
        classObject: "Interaction", // Replace with the actual class if known
        name: "getSource",
        label: "Get Source",
        description: "Retrieves the source of the current input.",
        command: "getSource",
        methodSignature: "getSource(): InputSource",
        fields: [],
        returnType: "InputSource",
    },

    //interface Interactive
    performOn: {
        blockId: "",
        methodId: "perform",
        type: "perform",
        classObject: "Interactive", // Replace with the actual class if known
        name: "perform",
        label: "Perform",
        description: "Performs the specified collection of sequences.",
        command: "perform",
        methodSignature: "perform(sequences: Collection<Sequence>): void",
        fields: [
            {
                name: "sequences",
                type: "text",
                label: "Sequences",
                placeholder: "Enter the collection of sequences",
                value: "",
            },
        ],
        returnType: "void",
    },

    resetInputState: {
        blockId: "",
        methodId: "resetInputState",
        type: "resetInputState",
        classObject: "Interactive", // Replace with the actual class if known
        name: "resetInputState",
        label: "Reset Input State",
        description: "Resets the state of the input to its initial condition.",
        command: "resetInputState",
        methodSignature: "resetInputState(): void",
        fields: [],
        returnType: "void",
    },

    //class Keyinput
    createKeyDown: {
        blockId: "",
        methodId: "createKeyDown",
        type: "createKeyDown",
        classObject: "Keyinput", // Replace with the actual class if known
        name: "createKeyDown",
        label: "Create Key Down",
        description: "Creates a key down interaction for the specified key code.",
        command: "createKeyDown",
        methodSignature: "createKeyDown(keyCode: int): Interaction",
        fields: [
            {
                name: "keyCode",
                type: "number",
                label: "Key Code",
                placeholder: "Enter the key code",
                value: "",
            },
        ],
        returnType: "Interaction",
    },

    createKeyUp: {
        blockId: "",
        methodId: "createKeyUp",
        type: "createKeyUp",
        classObject: "Keyinput", // Replace with the actual class if known
        name: "createKeyUp",
        label: "Create Key Up",
        description: "Creates a key up interaction for the specified key code.",
        command: "createKeyUp",
        methodSignature: "createKeyUp(keyCode: int): Interaction",
        fields: [
            {
                name: "keyCode",
                type: "number",
                label: "Key Code",
                placeholder: "Enter the key code",
                value: "",
            },
        ],
        returnType: "Interaction",
    },

    // interface Locatable
    getCoordinates: {
        blockId: "",
        methodId: "getCoordinates",
        type: "getCoordinates",
        classObject: "Locatable", // Replace with the actual class if known
        name: "getCoordinates",
        label: "Get Coordinates",
        description: "Retrieves the coordinates associated with the current object.",
        command: "getCoordinates",
        methodSignature: "getCoordinates(): Coordinates",
        fields: [],
        returnType: "Coordinates",
    },

    //class Pointerinput
    createPointerMove: {
        blockId: "",
        methodId: "createPointerMove",
        type: "createPointerMove",
        classObject: "Pointerinput",
        name: "createPointerMove",
        label: "Create Pointer Move",
        description: "Creates a pointer move interaction with a given duration, origin, and x/y coordinates.",
        command: "createPointerMove",
        methodSignature: "createPointerMove(Duration duration, Origin origin, int xOffset, int yOffset): Interaction",
        fields: [
            {
                name: "duration",
                type: "text",
                label: "Duration",
                placeholder: "Enter the duration for the pointer move",
                value: "",
            },
            {
                name: "origin",
                type: "select",
                label: "Origin",
                placeholder: "Enter the origin of the pointer move",
                options: [
                    { value: "VIEWPORT", label: "Viewport" },
                    { value: "ELEMENT", label: "Element" },
                    { value: "POINTER", label: "Pointer" },
                ],
                value: "",
            },
            {
                name: "xOffset",
                type: "number",
                label: "X Offset",
                placeholder: "Enter the X offset for the move",
                value: "",
            },
            {
                name: "yOffset",
                type: "number",
                label: "Y Offset",
                placeholder: "Enter the Y offset for the move",
                value: "",
            },
        ],
        returnType: "Interaction",
    },

    createPointerMoves: {
        blockId: "",
        methodId: "createPointerMove",
        type: "createPointerMove",
        classObject: "Pointerinput",
        name: "createPointerMove",
        label: "Create Pointer Move",
        description: "Creates a pointer move interaction with a given duration, origin, and point.",
        command: "createPointerMove",
        methodSignature: "createPointerMove(Duration duration, Origin origin, Point point): Interaction",
        fields: [
            {
                name: "duration",
                type: "text",
                label: "Duration",
                placeholder: "Enter the duration for the pointer move",
                value: "",
            },
            {
                name: "origin",
                type: "select",
                label: "Origin",
                placeholder: "Enter the origin of the pointer move",
                options: [
                    { value: "VIEWPORT", label: "Viewport" },
                    { value: "ELEMENT", label: "Element" },
                    { value: "POINTER", label: "Pointer" },
                ],
                value: "",
            },
            {
                name: "point",
                type: "textarea",
                label: "Point",
                placeholder: "Enter the point (x, y) for the move",
                value: "",
            },
        ],
        returnType: "Interaction",
    },

    createPointerMoveOn: {
        blockId: "",
        methodId: "createPointerMove",
        type: "createPointerMove",
        classObject: "Pointerinput",
        name: "createPointerMove",
        label: "Create Pointer Move",
        description: "Creates a pointer move interaction with a given duration, origin, x/y offsets, and pointer event properties.",
        command: "createPointerMove",
        methodSignature: "createPointerMove(Duration duration, Origin origin, int xOffset, int yOffset, PointerEventProperties pointerEventProperties): Interaction",
        fields: [
            {
                name: "duration",
                type: "text",
                label: "Duration",
                placeholder: "Enter the duration for the pointer move",
                value: "",
            },
            {
                name: "origin",
                type: "select",
                label: "Origin",
                placeholder: "Enter the origin of the pointer move",
                options: [
                    { value: "VIEWPORT", label: "Viewport" },
                    { value: "ELEMENT", label: "Element" },
                    { value: "POINTER", label: "Pointer" },
                ],
                value: "",
            },
            {
                name: "xOffset",
                type: "number",
                label: "X Offset",
                placeholder: "Enter the X offset for the move",
                value: "",
            },
            {
                name: "yOffset",
                type: "number",
                label: "Y Offset",
                placeholder: "Enter the Y offset for the move",
                value: "",
            },
            {
                name: "pointerEventProperties",
                type: "textarea",
                label: "Pointer Event Properties",
                placeholder: "Enter the pointer event properties",
                value: "",
            },
        ],
        returnType: "Interaction",
    },

    createPointerMoveOns: {
        blockId: "",
        methodId: "createPointerMove",
        type: "createPointerMove",
        classObject: "Pointerinput",
        name: "createPointerMove",
        label: "Create Pointer Move",
        description: "Creates a pointer move interaction with a given duration, origin, point, and pointer event properties.",
        command: "createPointerMove",
        methodSignature: "createPointerMove(Duration duration, Origin origin, Point point, PointerEventProperties pointerEventProperties): Interaction",
        fields: [
            {
                name: "duration",
                type: "text",
                label: "Duration",
                placeholder: "Enter the duration for the pointer move",
                value: "",
            },
            {
                name: "origin",
                type: "select",
                label: "Origin",
                placeholder: "Enter the origin of the pointer move",
                options: [
                    { value: "VIEWPORT", label: "Viewport" },
                    { value: "ELEMENT", label: "Element" },
                    { value: "POINTER", label: "Pointer" },
                ],
                value: "",
            },
            {
                name: "point",
                type: "textarea",
                label: "Point",
                placeholder: "Enter the point (x, y) for the move",
                value: "",
            },
            {
                name: "pointerEventProperties",
                type: "textarea",
                label: "Pointer Event Properties",
                placeholder: "Enter the pointer event properties",
                value: "",
            },
        ],
        returnType: "Interaction",
    },

    createPointerDown: {
        blockId: "",
        methodId: "createPointerDown",
        type: "createPointerDown",
        classObject: "Pointerinput",
        name: "createPointerDown",
        label: "Create Pointer Down",
        description: "Creates a pointer down interaction with the specified button.",
        command: "createPointerDown",
        methodSignature: "createPointerDown(int button): Interaction",
        fields: [
            {
                name: "button",
                type: "number",
                label: "Button",
                placeholder: "Enter the button code (e.g., 0 for left, 1 for right)",
                value: "",
            },
        ],
        returnType: "Interaction",
    },

    createPointerDowns: {
        blockId: "",
        methodId: "createPointerDown",
        type: "createPointerDown",
        classObject: "Pointerinput",
        name: "createPointerDown",
        label: "Create Pointer Down",
        description: "Creates a pointer down interaction with the specified button and pointer event properties.",
        command: "createPointerDown",
        methodSignature: "createPointerDown(int button, PointerEventProperties pointerEventProperties): Interaction",
        fields: [
            {
                name: "button",
                type: "number",
                label: "Button",
                placeholder: "Enter the button code (e.g., 0 for left, 1 for right)",
                value: "",
            },
            {
                name: "pointerEventProperties",
                type: "textarea",
                label: "Pointer Event Properties",
                placeholder: "Enter the pointer event properties",
                value: "",
            },
        ],
        returnType: "Interaction",
    },

    createPointerUp: {
        blockId: "",
        methodId: "createPointerUp",
        type: "createPointerUp",
        classObject: "Pointerinput",
        name: "createPointerUp",
        label: "Create Pointer Up",
        description: "Creates a pointer up interaction with the specified button.",
        command: "createPointerUp",
        methodSignature: "createPointerUp(int button): Interaction",
        fields: [
            {
                name: "button",
                type: "number",
                label: "Button",
                placeholder: "Enter the button code (e.g., 0 for left, 1 for right)",
                value: "",
            },
        ],
        returnType: "Interaction",
    },

    createPointerUps: {
        blockId: "",
        methodId: "createPointerUp",
        type: "createPointerUp",
        classObject: "Pointerinput",
        name: "createPointerUp",
        label: "Create Pointer Up",
        description: "Creates a pointer up interaction with the specified button and pointer event properties.",
        command: "createPointerUp",
        methodSignature: "createPointerUp(int button, PointerEventProperties pointerEventProperties): Interaction",
        fields: [
            {
                name: "button",
                type: "number",
                label: "Button",
                placeholder: "Enter the button code (e.g., 0 for left, 1 for right)",
                value: "",
            },
            {
                name: "pointerEventProperties",
                type: "textarea",
                label: "Pointer Event Properties",
                placeholder: "Enter the pointer event properties",
                value: "",
            },
        ],
        returnType: "Interaction",
    },

    //enum Direction
    getType: {
        blockId: "",
        methodId: "getType",
        type: "getType",
        classObject: "Direction",
        name: "getType",
        label: "Get Type",
        description: "Returns the type of the WebElement (e.g., 'input', 'button', etc.).",
        command: "getType",
        methodSignature: "getType(): String",
        fields: [],
        returnType: "String",
    },
    //enum Kind
    getWireName: {
        blockId: "",
        methodId: "getWireName",
        type: "getWireName",
        classObject: "Kind",
        name: "getWireName",
        label: "Get Wire Name",
        description: "Returns the wire name of the WebElement, which is often used for identifying the element in a specific context.",
        command: "getWireName",
        methodSignature: "getWireName(): String",
        fields: [],
        returnType: "String",
    },
    //enum MouseButton
    asArg: {
        blockId: "",
        methodId: "asArg",
        type: "asArg",
        classObject: "MouseButton",
        name: "asArg",
        label: "As Argument",
        description: "Returns the element as an integer argument, often used for further processing in methods.",
        command: "asArg",
        methodSignature: "asArg(): int",
        fields: [],
        returnType: "int",
    },
    //static final class Origin
    asArgs: {
        blockId: "",
        methodId: "asArg",
        type: "asArg",
        classObject: "Origin",
        name: "asArg",
        label: "As Argument",
        description: "Returns the element as an object, often used for further processing in methods.",
        command: "asArg",
        methodSignature: "asArg(): Object",
        fields: [],
        returnType: "Object",
    },

    pointer: {
        blockId: "",
        methodId: "pointer",
        type: "pointer",
        classObject: "Origin",
        name: "pointer",
        label: "Pointer",
        description: "Returns the origin of the pointer, typically used to define the starting point for pointer interactions.",
        command: "pointer",
        methodSignature: "pointer(): Origin",
        fields: [],
        returnType: "Origin",
    },

    viewport: {
        blockId: "",
        methodId: "viewport",
        type: "viewport",
        classObject: "Origin",
        name: "viewport",
        label: "Viewport",
        description: "Returns the origin of the viewport, typically used to define the starting point for interactions based on the viewport.",
        command: "viewport",
        methodSignature: "viewport(): Origin",
        fields: [],
        returnType: "Origin",
    },

    fromElement: {
        blockId: "",
        methodId: "fromElement",
        type: "fromElement",
        classObject: "Origin",
        name: "fromElement",
        label: "From Element",
        description: "Returns the origin based on the given WebElement, typically used to define the starting point for interactions relative to an element.",
        command: "fromElement(element)",
        methodSignature: "fromElement(WebElement element): Origin",
        fields: [
            {
                name: "element",
                type: "text",
                label: "WebElement",
                placeholder: "Enter the WebElement to define the origin from",
                value: "",
            },
        ],
        returnType: "Origin",
    },

    eventProperties: {
        blockId: "",
        methodId: "eventProperties",
        type: "eventProperties",
        classObject: "Origin",
        name: "eventProperties",
        label: "Event Properties",
        description: "Returns the pointer event properties, typically used to define additional attributes for pointer interactions.",
        command: "eventProperties",
        methodSignature: "eventProperties(): PointerEventProperties",
        fields: [],
        returnType: "PointerEventProperties",
    },

    //static class PointerEventProperties
    setWidth: {
        blockId: "",
        methodId: "setWidth",
        type: "setWidth",
        classObject: "PointerEventProperties",
        name: "setWidth",
        label: "Set Width",
        description: "Sets the width of the pointer event, typically used for defining the size of the pointer interaction.",
        command: "setWidth",
        methodSignature: "setWidth(float width): PointerEventProperties",
        fields: [
            {
                name: "width",
                type: "number",
                label: "Width",
                placeholder: "Enter the width for the pointer event",
                value: "",
            },
        ],
        returnType: "PointerEventProperties",
    },

    setHeight: {
        blockId: "",
        methodId: "setHeight",
        type: "setHeight",
        classObject: "PointerEventProperties",
        name: "setHeight",
        label: "Set Height",
        description: "Sets the height of the pointer event, typically used for defining the size of the pointer interaction.",
        command: "setHeight",
        methodSignature: "setHeight(float height): PointerEventProperties",
        fields: [
            {
                name: "height",
                type: "number",
                label: "Height",
                placeholder: "Enter the height for the pointer event",
                value: "",
            },
        ],
        returnType: "PointerEventProperties",
    },

    setPressure: {
        blockId: "",
        methodId: "setPressure",
        type: "setPressure",
        classObject: "PointerEventProperties",
        name: "setPressure",
        label: "Set Pressure",
        description: "Sets the pressure of the pointer event, typically used to define the intensity of the pointer interaction.",
        command: "setPressure",
        methodSignature: "setPressure(float pressure): PointerEventProperties",
        fields: [
            {
                name: "pressure",
                type: "number",
                label: "Pressure",
                placeholder: "Enter the pressure for the pointer event",
                value: "",
            },
        ],
        returnType: "PointerEventProperties",
    },

    setTangentialPressure: {
        blockId: "",
        methodId: "setTangentialPressure",
        type: "setTangentialPressure",
        classObject: "PointerEventProperties",
        name: "setTangentialPressure",
        label: "Set Tangential Pressure",
        description: "Sets the tangential pressure of the pointer event, typically used to simulate pressure sensitivity along the pointer's tangential direction.",
        command: "setTangentialPressure",
        methodSignature: "setTangentialPressure(float tangentialPressure): PointerEventProperties",
        fields: [
            {
                name: "tangentialPressure",
                type: "number",
                label: "Tangential Pressure",
                placeholder: "Enter the tangential pressure for the pointer event",
                value: "",
            },
        ],
        returnType: "PointerEventProperties",
    },

    setTiltX: {
        blockId: "",
        methodId: "setTiltX",
        type: "setTiltX",
        classObject: "PointerEventProperties",
        name: "setTiltX",
        label: "Set Tilt X",
        description: "Sets the tilt in the X direction of the pointer event, typically used to simulate tilt sensitivity on devices like styluses.",
        command: "setTiltX",
        methodSignature: "setTiltX(int tiltX): PointerEventProperties",
        fields: [
            {
                name: "tiltX",
                type: "number",
                label: "Tilt X",
                placeholder: "Enter the tilt in the X direction for the pointer event",
                value: "",
            },
        ],
        returnType: "PointerEventProperties",
    },

    setTiltY: {
        blockId: "",
        methodId: "setTiltY",
        type: "setTiltY",
        classObject: "PointerEventProperties",
        name: "setTiltY",
        label: "Set Tilt Y",
        description: "Sets the tilt in the Y direction of the pointer event, typically used to simulate tilt sensitivity on devices like styluses.",
        command: "setTiltY",
        methodSignature: "setTiltY(int tiltY): PointerEventProperties",
        fields: [
            {
                name: "tiltY",
                type: "number",
                label: "Tilt Y",
                placeholder: "Enter the tilt in the Y direction for the pointer event",
                value: "",
            },
        ],
        returnType: "PointerEventProperties",
    },

    setTwist: {
        blockId: "",
        methodId: "setTwist",
        type: "setTwist",
        classObject: "PointerEventProperties",
        name: "setTwist",
        label: "Set Twist",
        description: "Sets the twist of the pointer event, typically used to simulate rotation or angular pressure on devices like styluses.",
        command: "setTwist",
        methodSignature: "setTwist(int twist): PointerEventProperties",
        fields: [
            {
                name: "twist",
                type: "number",
                label: "Twist",
                placeholder: "Enter the twist value for the pointer event",
                value: "",
            },
        ],
        returnType: "PointerEventProperties",
    },

    setAltitudeAngle: {
        blockId: "",
        methodId: "setAltitudeAngle",
        type: "setAltitudeAngle",
        classObject: "PointerEventProperties",
        name: "setAltitudeAngle",
        label: "Set Altitude Angle",
        description: "Sets the altitude angle of the pointer event, typically used to simulate the angle of a stylus relative to the surface.",
        command: "setAltitudeAngle",
        methodSignature: "setAltitudeAngle(float altitudeAngle): PointerEventProperties",
        fields: [
            {
                name: "altitudeAngle",
                type: "number",
                label: "Altitude Angle",
                placeholder: "Enter the altitude angle for the pointer event",
                value: "",
            },
        ],
        returnType: "PointerEventProperties",
    },

    setAzimuthAngle: {
        blockId: "",
        methodId: "setAzimuthAngle",
        type: "setAzimuthAngle",
        classObject: "PointerEventProperties",
        name: "setAzimuthAngle",
        label: "Set Azimuth Angle",
        description: "Sets the azimuth angle of the pointer event, typically used to simulate the orientation of a stylus relative to the surface.",
        command: "setAzimuthAngle",
        methodSignature: "setAzimuthAngle(float azimuthAngle): PointerEventProperties",
        fields: [
            {
                name: "azimuthAngle",
                type: "number",
                label: "Azimuth Angle",
                placeholder: "Enter the azimuth angle for the pointer event",
                value: "",
            },
        ],
        returnType: "PointerEventProperties",
    },

    //class Sequence
    addActions: {
        blockId: "",
        methodId: "addAction",
        type: "addAction",
        classObject: "Sequence",
        name: "addAction",
        label: "Add Action",
        description: "Adds an interaction action to the sequence, allowing for a series of actions to be performed.",
        command: "addAction",
        methodSignature: "addAction(Interaction interaction): Sequence",
        fields: [
            {
                name: "interaction",
                type: "text",
                label: "Interaction",
                placeholder: "Enter the interaction action to be added",
                value: "",
            },
        ],
        returnType: "Sequence",
    },

    //enum SourceType
    getTypes: {
        blockId: "",
        methodId: "getType",
        type: "getType",
        classObject: "SourceType",
        name: "getType",
        label: "Get Type",
        description: "Retrieves the type of the pointer event as a string.",
        command: "getType",
        methodSignature: "getType(): String",
        fields: [],
        returnType: "String",
    },

    //class Wheellnput
    createScroll: {
        blockId: "",
        methodId: "createScroll",
        type: "createScroll",
        classObject: "Wheellnput",
        name: "createScroll",
        label: "Create Scroll",
        description: "Creates a scroll action with specified x and y offsets, speed, and origin.",
        command: "createScroll",
        methodSignature: "createScroll(int xOffset, int yOffset, int speed, int delta, Duration duration, ScrollOrigin origin): Interaction",
        fields: [
            {
                name: "xOffset",
                type: "number",
                label: "X Offset",
                placeholder: "Enter the horizontal scroll offset",
                value: "",
            },
            {
                name: "yOffset",
                type: "number",
                label: "Y Offset",
                placeholder: "Enter the vertical scroll offset",
                value: "",
            },
            {
                name: "width",
                type: "number",
                label: "Width",
                placeholder: "Enter the scrollable area width",
                value: "",
            },
            {
                name: "height",
                type: "number",
                label: "Height",
                placeholder: "Enter the scrollable area height",
                value: "",
            },
            {
                name: "duration",
                type: "text",
                label: "Duration",
                placeholder: "Enter the duration of the scroll (e.g., PT2S for 2 seconds)",
                value: "",
            },
            {
                name: "origin",
                type: "select",
                label: "Scroll Origin",
                placeholder: "Specify the origin of the scroll (e.g., viewport or element)",
                options: [
                    { value: "VIEWPORT", label: "Viewport" },
                    { value: "ELEMENT", label: "Element" },
                    { value: "POINTER", label: "Pointer" },
                ],
                value: "",
            },
        ],
        returnType: "Interaction",
    },

    createScrolls: {
        blockId: "",
        methodId: "createScroll",
        type: "createScroll",
        classObject: "Wheellnput",
        name: "createScroll",
        label: "Create Scroll",
        description: "Creates a scroll action from a specified point, with speed, duration, and origin.",
        command: "createScroll",
        methodSignature: "createScroll(Point startPoint, int speed, int delta, Duration duration, ScrollOrigin origin): Interaction",
        fields: [
            {
                name: "startPoint",
                type: "textarea",
                label: "Start Point",
                placeholder: "Enter the starting point for the scroll (e.g., {x: 100, y: 200})",
                value: "",
            },
            {
                name: "speed",
                type: "number",
                label: "Speed",
                placeholder: "Enter the scroll speed",
                value: "",
            },
            {
                name: "delta",
                type: "number",
                label: "Delta",
                placeholder: "Enter the scroll delta",
                value: "",
            },
            {
                name: "duration",
                type: "text",
                label: "Duration",
                placeholder: "Enter the duration of the scroll (e.g., PT2S for 2 seconds)",
                value: "",
            },
            {
                name: "origin",
                type: "select",
                label: "Scroll Origin",
                placeholder: "Specify the origin of the scroll (e.g., viewport or element)",
                options: [
                    { value: "VIEWPORT", label: "Viewport" },
                    { value: "ELEMENT", label: "Element" },
                    { value: "POINTER", label: "Pointer" },
                ],
                value: "",
            },
        ],
        returnType: "Interaction",
    },

    //static final class ScrollOrigin
    fromViewport: {
        blockId: "",
        methodId: "fromViewport",
        type: "fromViewport",
        classObject: "ScrollOrigin",
        name: "fromViewport",
        label: "From Viewport",
        description: "Returns a scroll origin based on the viewport, typically used to define scrolling relative to the visible screen area.",
        command: "fromViewport",
        methodSignature: "fromViewport(): ScrollOrigin",
        fields: [],
        returnType: "ScrollOrigin",
    },

    fromViewports: {
        blockId: "",
        methodId: "fromViewport",
        type: "fromViewport",
        classObject: "ScrollOrigin",
        name: "fromViewport",
        label: "From Viewport",
        description: "Creates a scroll origin based on the viewport with specified horizontal and vertical offsets.",
        command: "fromViewport",
        methodSignature: "fromViewport(int xOffset, int yOffset): ScrollOrigin",
        fields: [
            {
                name: "xOffset",
                type: "number",
                label: "X Offset",
                placeholder: "Enter the horizontal offset from the viewport",
                value: "",
            },
            {
                name: "yOffset",
                type: "number",
                label: "Y Offset",
                placeholder: "Enter the vertical offset from the viewport",
                value: "",
            },
        ],
        returnType: "ScrollOrigin",
    },

    fromElementOn: {
        blockId: "",
        methodId: "fromElement",
        type: "fromElement",
        classObject: "ScrollOrigin",
        name: "fromElement",
        label: "From Element",
        description: "Creates a scroll origin based on a specified WebElement, allowing scrolling relative to the element's position.",
        command: "fromElement",
        methodSignature: "fromElement(WebElement element): ScrollOrigin",
        fields: [
            {
                name: "element",
                type: "text",
                label: "Element",
                placeholder: "Enter the WebElement to be used as the scroll origin",
                value: "",
            },
        ],
        returnType: "ScrollOrigin",
    },

    fromElements: {
        blockId: "",
        methodId: "fromElement",
        type: "fromElement",
        classObject: "ScrollOrigin",
        name: "fromElement",
        label: "From Element",
        description: "Creates a scroll origin based on a specified WebElement with additional horizontal and vertical offsets.",
        command: "fromElement",
        methodSignature: "fromElement(WebElement element, int xOffset, int yOffset): ScrollOrigin",
        fields: [
            {
                name: "element",
                type: "text",
                label: "Element",
                placeholder: "Enter the WebElement to be used as the scroll origin",
                value: "",
            },
            {
                name: "xOffset",
                type: "number",
                label: "X Offset",
                placeholder: "Enter the horizontal offset from the WebElement",
                value: "",
            },
            {
                name: "yOffset",
                type: "number",
                label: "Y Offset",
                placeholder: "Enter the vertical offset from the WebElement",
                value: "",
            },
        ],
        returnType: "ScrollOrigin",
    },

    getxOffset: {
        blockId: "",
        methodId: "getxOffset",
        type: "getxOffset",
        classObject: "ScrollOrigin",
        name: "getxOffset",
        label: "Get X Offset",
        description: "Retrieves the horizontal offset from the scroll origin.",
        command: "getxOffset",
        methodSignature: "getxOffset(): int",
        fields: [],
        returnType: "int",
    },

    getyOffset: {
        blockId: "",
        methodId: "getyOffset",
        type: "getyOffset",
        classObject: "ScrollOrigin",
        name: "getyOffset",
        label: "Get Y Offset",
        description: "Retrieves the vertical offset from the scroll origin.",
        command: "getyOffset",
        methodSignature: "getyOffset(): int",
        fields: [],
        returnType: "int",
    },

    //class Debug
    isDebugging: {
        blockId: "",
        methodId: "isDebugging",
        type: "isDebugging",
        classObject: "Debug",
        name: "isDebugging",
        label: "Is Debugging",
        description: "Checks if the debugger is currently active.",
        command: "isDebugging",
        methodSignature: "isDebugging(): boolean",
        fields: [],
        returnType: "boolean",
    },

    //class Either<A, B>
    leftOn: {
        blockId: "",
        methodId: "left",
        type: "left",
        classObject: "Either",
        name: "left",
        label: "Left",
        description: "Creates an instance of the 'Left' side of the Either type, representing a value of type A.",
        command: "left",
        methodSignature: "left(A value): Either<A, B>",
        fields: [
            {
                name: "value",
                type: "text",
                label: "Value (A)",
                placeholder: "Enter a value of type A",
                value: "",
            },
        ],
        returnType: "Either<A, B>",
    },

    rightOn: {
        blockId: "",
        methodId: "right",
        type: "right",
        classObject: "Either",
        name: "right",
        label: "Right",
        description: "Creates an instance of the 'Right' side of the Either type, representing a value of type B.",
        command: "right",
        methodSignature: "right(B value): Either<A, B>",
        fields: [
            {
                name: "value",
                type: "text",
                label: "Value (B)",
                placeholder: "Enter a value of type B",
                value: "",
            },
        ],
        returnType: "Either<A, B>",
    },

    isLeft: {
        blockId: "",
        methodId: "isLeft",
        type: "isLeft",
        classObject: "Either",
        name: "isLeft",
        label: "Is Left",
        description: "Checks if the current instance is of the 'Left' side of the Either type.",
        command: "isLeft",
        methodSignature: "isLeft(): boolean",
        fields: [],
        returnType: "boolean",
    },

    isRight: {
        blockId: "",
        methodId: "isRight",
        type: "isRight",
        classObject: "Either",
        name: "isRight",
        label: "Is Right",
        description: "Checks if the current instance is of the 'Right' side of the Either type.",
        command: "isRight",
        methodSignature: "isRight(): boolean",
        fields: [],
        returnType: "boolean",
    },

    left: {
        blockId: "",
        methodId: "left",
        type: "left",
        classObject: "Either",
        name: "left",
        label: "Left",
        description: "Retrieves the value of the 'Left' side of the Either type, which is of type A.",
        command: "left",
        methodSignature: "left(): A",
        fields: [],
        returnType: "A",
    },

    right: {
        blockId: "",
        methodId: "right",
        type: "right",
        classObject: "Either",
        name: "right",
        label: "Right",
        description: "Retrieves the value of the 'Right' side of the Either type, which is of type B.",
        command: "right",
        methodSignature: "right(): B",
        fields: [],
        returnType: "B",
    },

    map: {
        blockId: "",
        methodId: "map",
        type: "map",
        classObject: "Either",
        name: "map",
        label: "Map",
        description: "Applies a function to the value of the 'Right' side of the Either type, transforming it into a value of type R.",
        command: "map",
        methodSignature: "map(Function<? super B, ? extends R> function): R",
        fields: [
            {
                name: "function",
                type: "text",
                label: "Function",
                placeholder: "Enter the function to transform the value of type B into type R",
                value: "",
            },
        ],
        returnType: "R",
    },

    mapLeft: {
        blockId: "",
        methodId: "mapLeft",
        type: "mapLeft",
        classObject: "Either",
        name: "mapLeft",
        label: "Map Left",
        description: "Applies a function to the value of the 'Left' side of the Either type, transforming it into a value of type R.",
        command: "mapLeft",
        methodSignature: "mapLeft(Function<? super A, ? extends R> function): R",
        fields: [
            {
                name: "function",
                type: "text",
                label: "Function",
                placeholder: "Enter the function to transform the value of type A into type R",
                value: "",
            },
        ],
        returnType: "R",
    },

    stream: {
        blockId: "",
        methodId: "stream",
        type: "stream",
        classObject: "Either",
        name: "stream",
        label: "Stream",
        description: "Converts the value of the 'Right' side of the Either type into a Stream of type B.",
        command: "stream",
        methodSignature: "stream(): Stream<B>",
        fields: [],
        returnType: "Stream<B>",
    },

    //class Require
    precondition: {
        blockId: "",
        methodId: "precondition",
        type: "precondition",
        classObject: "Require",
        name: "precondition",
        label: "Precondition",
        description: "Checks a precondition and throws an exception if the condition is not met. Provides an error message if the precondition fails.",
        command: "precondition",
        methodSignature: "precondition(boolean condition, String message, Object... args): void",
        fields: [
            {
                name: "condition",
                type: "checkbox",
                label: "Condition",
                placeholder: "Check if the precondition is met",
                value: "",
            },
            {
                name: "message",
                type: "text",
                label: "Error Message",
                placeholder: "Enter the message to show if the precondition fails",
                value: "",
            },
            {
                name: "args",
                type: "textarea",
                label: "Arguments",
                placeholder: "Enter any arguments for the error message",
                value: "",
            },
        ],
        returnType: "void",
    },

    nonNull: {
        blockId: "",
        methodId: "nonNull",
        type: "nonNull",
        classObject: "Require",
        name: "nonNull",
        label: "Non Null",
        description: "Checks if the given object is non-null. If the object is null, it throws an exception with the specified error message.",
        command: "nonNull",
        methodSignature: "nonNull(String message, T object): T",
        fields: [
            {
                name: "message",
                type: "text",
                label: "Error Message",
                placeholder: "Enter the message to show if the object is null",
                value: "",
            },
            {
                name: "object",
                type: "texarea",
                label: "Object",
                placeholder: "Enter the object to check for null",
                value: "",
            },
        ],
        returnType: "T",
    },

    nonNulls: {
        blockId: "",
        methodId: "nonNull",
        type: "nonNull",
        classObject: "Require",
        name: "nonNull",
        label: "Non Null",
        description: "Checks if the given object is non-null. If the object is null, it throws an exception with the specified error message and additional arguments.",
        command: "nonNull",
        methodSignature: "nonNull(String message, T object, String errorMessage, Object... args): T",
        fields: [
            {
                name: "message",
                type: "text",
                label: "Error Message",
                placeholder: "Enter the message to show if the object is null",
                value: "",
            },
            {
                name: "object",
                type: "textarea",
                label: "Object",
                placeholder: "Enter the object to check for null",
                value: "",
            },
            {
                name: "errorMessage",
                type: "text",
                label: "Additional Error Message",
                placeholder: "Enter an additional error message if needed",
                value: "",
            },
            {
                name: "args",
                type: "textarea",
                label: "Arguments",
                placeholder: "Enter any additional arguments for the error message",
                value: "",
            },
        ],
        returnType: "T",
    },

    argument: {
        blockId: "",
        methodId: "argument",
        type: "argument",
        classObject: "Require",
        name: "argument",
        label: "Argument",
        description: "Creates an argument checker for a specified argument, verifying its validity based on the provided condition.",
        command: "argument",
        methodSignature: "argument(String name, T value): ArgumentChecker<T>",
        fields: [
            {
                name: "name",
                type: "text",
                label: "Argument Name",
                placeholder: "Enter the name of the argument to check",
                value: "",
            },
            {
                name: "value",
                type: "text",
                label: "Argument Value",
                placeholder: "Enter the value of the argument to check",
                value: "",
            },
        ],
        returnType: "ArgumentChecker<T>",
    },

    nonNegative: {
        blockId: "",
        methodId: "nonNegative",
        type: "nonNegative",
        classObject: "Require",
        name: "nonNegative",
        label: "Non Negative",
        description: "Checks if the provided Duration is non-negative. If the Duration is negative, it throws an exception.",
        command: "nonNegative",
        methodSignature: "nonNegative(Duration duration): Duration",
        fields: [
            {
                name: "duration",
                type: "number",
                label: "Duration",
                placeholder: "Enter the duration to check",
                value: "",
            },
        ],
        returnType: "Duration",
    },

    nonNegatives: {
        blockId: "",
        methodId: "nonNegative",
        type: "nonNegative",
        classObject: "Require",
        name: "nonNegative",
        label: "Non Negative",
        description: "Checks if the provided Duration is non-negative. If the Duration is negative, it throws an exception with the specified error message.",
        command: "nonNegative",
        methodSignature: "nonNegative(String message, Duration duration): Duration",
        fields: [
            {
                name: "message",
                type: "text",
                label: "Error Message",
                placeholder: "Enter the message to show if the duration is negative",
                value: "",
            },
            {
                name: "duration",
                type: "number",
                label: "Duration",
                placeholder: "Enter the duration to check",
                value: "",
            },
        ],
        returnType: "Duration",
    },

    positive: {
        blockId: "",
        methodId: "positive",
        type: "positive",
        classObject: "Require",
        name: "positive",
        label: "Positive",
        description: "Checks if the provided Duration is positive. If the Duration is zero or negative, it throws an exception.",
        command: "positive",
        methodSignature: "positive(Duration duration): Duration",
        fields: [
            {
                name: "duration",
                type: "number",
                label: "Duration",
                placeholder: "Enter the duration to check",
                value: "",
            },
        ],
        returnType: "Duration",
    },

    positives: {
        blockId: "",
        methodId: "positive",
        type: "positive",
        classObject: "Require",
        name: "positive",
        label: "Positive",
        description: "Checks if the provided Duration is positive. If the Duration is zero or negative, it throws an exception with the specified error message.",
        command: "positive",
        methodSignature: "positive(String message, Duration duration): Duration",
        fields: [
            {
                name: "message",
                type: "text",
                label: "Error Message",
                placeholder: "Enter the message to show if the duration is not positive",
                value: "",
            },
            {
                name: "duration",
                type: "number",
                label: "Duration",
                placeholder: "Enter the duration to check",
                value: "",
            },
        ],
        returnType: "Duration",
    },

    nonNegativeInt: {
        blockId: "",
        methodId: "nonNegative",
        type: "nonNegative",
        classObject: "Require",
        name: "nonNegative",
        label: "Non Negative",
        description: "Checks if the provided integer is non-negative. If the integer is negative, it throws an exception with the specified error message.",
        command: "nonNegative",
        methodSignature: "nonNegative(String message, Integer value): int",
        fields: [
            {
                name: "message",
                type: "text",
                label: "Error Message",
                placeholder: "Enter the message to show if the value is negative",
                value: "",
            },
            {
                name: "value",
                type: "number",
                label: "Integer Value",
                placeholder: "Enter the integer value to check",
                value: "",
            },
        ],
        returnType: "int",
    },

    positiveIntWithMsg: {
        blockId: "",
        methodId: "positive",
        type: "positive",
        classObject: "Require",
        name: "positive",
        label: "Positive",
        description: "Checks if the provided integer is positive. If the integer is zero or negative, it throws an exception with the specified error message and additional message.",
        command: "positive",
        methodSignature: "positive(String message, Integer value, String errorMessage): int",
        fields: [
            {
                name: "message",
                type: "text",
                label: "Error Message",
                placeholder: "Enter the message to show if the value is not positive",
                value: "",
            },
            {
                name: "value",
                type: "number",
                label: "Integer Value",
                placeholder: "Enter the integer value to check",
                value: "",
            },
            {
                name: "errorMessage",
                type: "text",
                label: "Additional Error Message",
                placeholder: "Enter an additional error message if needed",
                value: "",
            },
        ],
        returnType: "int",
    },

    positiveDoubleWithMsg: {
        blockId: "",
        methodId: "positive",
        type: "positive",
        classObject: "Require",
        name: "positive",
        label: "Positive",
        description: "Checks if the provided double value is positive. If the value is zero or negative, it throws an exception with the specified error message and additional message.",
        command: "positive",
        methodSignature: "positive(String message, Double value, String errorMessage): double",
        fields: [
            {
                name: "message",
                type: "text",
                label: "Error Message",
                placeholder: "Enter the message to show if the value is not positive",
                value: "",
            },
            {
                name: "value",
                type: "number",
                label: "Double Value",
                placeholder: "Enter the double value to check",
                value: "",
            },
            {
                name: "errorMessage",
                type: "text",
                label: "Additional Error Message",
                placeholder: "Enter an additional error message if needed",
                value: "",
            },
        ],
        returnType: "double",
    },

    positiveDouble: {
        blockId: "",
        methodId: "positive",
        type: "positive",
        classObject: "Require",
        name: "positive",
        label: "Positive",
        description: "Checks if the provided double value is positive. If the value is zero or negative, it throws an exception with the specified error message.",
        command: "positive",
        methodSignature: "positive(String message, Double value): double",
        fields: [
            {
                name: "message",
                type: "text",
                label: "Error Message",
                placeholder: "Enter the message to show if the value is not positive",
                value: "",
            },
            {
                name: "value",
                type: "number",
                label: "Double Value",
                placeholder: "Enter the double value to check",
                value: "",
            },
        ],
        returnType: "double",
    },

    positiveInt: {
        blockId: "",
        methodId: "positive",
        type: "positive",
        classObject: "Require",
        name: "positive",
        label: "Positive",
        description: "Checks if the provided integer is positive. If the integer is zero or negative, it throws an exception with the specified error message.",
        command: "positive",
        methodSignature: "positive(String message, Integer value): int",
        fields: [
            {
                name: "message",
                type: "text",
                label: "Error Message",
                placeholder: "Enter the message to show if the value is not positive",
                value: "",
            },
            {
                name: "value",
                type: "number",
                label: "Integer Value",
                placeholder: "Enter the integer value to check",
                value: "",
            },
        ],
        returnType: "int",
    },

    argumentInt: {
        blockId: "",
        methodId: "argument",
        type: "argument",
        classObject: "Require",
        name: "argument",
        label: "Argument",
        description: "Creates an argument checker for the specified integer value to verify its validity based on the provided condition.",
        command: "argument",
        methodSignature: "argument(String name, Integer value): IntChecker",
        fields: [
            {
                name: "name",
                type: "text",
                label: "Argument Name",
                placeholder: "Enter the name of the argument to check",
                value: "",
            },
            {
                name: "value",
                type: "number",
                label: "Integer Value",
                placeholder: "Enter the integer value to check",
                value: "",
            },
        ],
        returnType: "IntChecker",
    },

    argumentWithFile: {
        blockId: "",
        methodId: "argument",
        type: "argument",
        classObject: "Require",
        name: "argument",
        label: "Argument",
        description: "Creates an argument checker for the specified file to verify its validity based on the provided condition.",
        command: "argument",
        methodSignature: "argument(String name, File file): FileChecker",
        fields: [
            {
                name: "name",
                type: "text",
                label: "Argument Name",
                placeholder: "Enter the name of the argument to check",
                value: "",
            },
            {
                name: "file",
                type: "file",
                label: "File",
                placeholder: "Select the file to check",
                value: "",
            },
        ],
        returnType: "FileChecker",
    },

    stateCondition: {
        blockId: "",
        methodId: "stateCondition",
        type: "stateCondition",
        classObject: "Require",
        name: "stateCondition",
        label: "State Condition",
        description: "Checks the specified condition and, if it is false, throws an exception with the provided error message and additional arguments.",
        command: "stateCondition",
        methodSignature: "stateCondition(boolean condition, String message, Object... args): void",
        fields: [
            {
                name: "condition",
                type: "checkbox",
                label: "Condition",
                placeholder: "Check if the condition is true or false",
                value: false,
            },
            {
                name: "message",
                type: "text",
                label: "Error Message",
                placeholder: "Enter the message to show if the condition is false",
                value: "",
            },
            {
                name: "args",
                type: "text",
                label: "Arguments",
                placeholder: "Enter any additional arguments for the error message",
                value: "",
            },
        ],
        returnType: "void",
    },

    stateWithValue: {
        blockId: "",
        methodId: "state",
        type: "state",
        classObject: "Require",
        name: "state",
        label: "State",
        description: "Creates a state checker for a specified object, verifying the object's state based on the provided condition.",
        command: "state",
        methodSignature: "state(String name, T value): StateChecker<T>",
        fields: [
            {
                name: "name",
                type: "text",
                label: "State Name",
                placeholder: "Enter the name of the state to check",
                value: "",
            },
            {
                name: "value",
                type: "text",
                label: "Value",
                placeholder: "Enter the value of the state to check",
                value: "",
            },
        ],
        returnType: "StateChecker<T>",
    },

    stateWithFile: {
        blockId: "",
        methodId: "state",
        type: "state",
        classObject: "Require",
        name: "state",
        label: "State",
        description: "Creates a state checker for a specified file, verifying the file's state based on the provided condition.",
        command: "state",
        methodSignature: "state(String name, File file): FileStateChecker",
        fields: [
            {
                name: "name",
                type: "text",
                label: "State Name",
                placeholder: "Enter the name of the state to check",
                value: "",
            },
            {
                name: "file",
                type: "file",
                label: "File",
                placeholder: "Select the file to check",
                value: "",
            },
        ],
        returnType: "FileStateChecker",
    },

    state: {
        blockId: "",
        methodId: "state",
        type: "state",
        classObject: "Require",
        name: "state",
        label: "State",
        description: "Creates a state checker for a specified path, verifying the path's state based on the provided condition.",
        command: "state",
        methodSignature: "state(String name, Path path): PathStateChecker",
        fields: [
            {
                name: "name",
                type: "text",
                label: "State Name",
                placeholder: "Enter the name of the state to check",
                value: "",
            },
            {
                name: "path",
                type: "text",
                label: "Path",
                placeholder: "Enter the path to check",
                value: "",
            },
        ],
        returnType: "PathStateChecker",
    },

    //static class ArgumentChecker<T>
    nonNullArg: {
        blockId: "",
        methodId: "nonNull",
        type: "nonNull",
        classObject: "ArgumentChecker<T>",
        name: "nonNull",
        label: "Non-Null",
        description: "Validates that the object is not null. If the object is null, an exception is thrown.",
        command: "nonNull",
        methodSignature: "nonNull(): T",
        fields: [],
        returnType: "T",
    },

    nonNullObj: {
        blockId: "",
        methodId: "nonNull",
        type: "nonNull",
        classObject: "ArgumentChecker<T>",
        name: "nonNull",
        label: "Non-Null",
        description: "Validates that the specified object is not null. If the object is null, an exception is thrown with the provided error message and additional arguments.",
        command: "nonNull",
        methodSignature: "nonNull(String message, Object... args): T",
        fields: [
            {
                name: "message",
                type: "text",
                label: "Error Message",
                placeholder: "Enter the error message to display if the object is null",
                value: "",
            },
            {
                name: "args",
                type: "text",
                label: "Additional Arguments",
                placeholder: "Enter additional arguments for the error message, if any",
                value: "",
            },
        ],
        returnType: "T",
    },

    equalTo: {
        blockId: "",
        methodId: "equalTo",
        type: "equalTo",
        classObject: "ArgumentChecker<T>",
        name: "equalTo",
        label: "Equal To",
        description: "Checks if the specified object is equal to the current object. Returns the current object if they are equal, otherwise throws an exception.",
        command: "equalTo",
        methodSignature: "equalTo(Object object): T",
        fields: [
            {
                name: "object",
                type: "textarea",
                label: "Object",
                placeholder: "Enter the object to compare for equality",
                value: "",
            },
        ],
        returnType: "T",
    },

    instanceOf: {
        blockId: "",
        methodId: "instanceOf",
        type: "instanceOf",
        classObject: "ArgumentChecker<T>",
        name: "instanceOf",
        label: "Instance Of",
        description: "Validates that the current object is an instance of the specified class. Returns the current object if the validation passes, otherwise throws an exception.",
        command: "instanceOf",
        methodSignature: "instanceOf(Class<?> clazz): T",
        fields: [
            {
                name: "class",
                type: "text",
                label: "Class",
                placeholder: "Enter the class to check against",
                value: "",
            },
        ],
        returnType: "T",
    },

    //static class IntChecker
    greaterThan: {
        blockId: "",
        methodId: "greaterThan",
        type: "greaterThan",
        classObject: "IntChecker",
        name: "greaterThan",
        label: "Greater Than",
        description: "Checks if the specified integer value is greater than a given threshold. Throws an exception with the provided message if the condition is not met.",
        command: "greaterThan",
        methodSignature: "greaterThan(int value, String message): int",
        fields: [
            {
                name: "value",
                type: "number",
                label: "Integer Value",
                placeholder: "Enter the integer value to check",
                value: "",
            },
            {
                name: "message",
                type: "text",
                label: "Error Message",
                placeholder: "Enter the error message to display if the value is not greater",
                value: "",
            },
        ],
        returnType: "int",
    },
    //static class FileChecker
    isFile: {
        blockId: "",
        methodId: "isFile",
        type: "isFile",
        classObject: "FileChecker",
        name: "isFile",
        label: "Is File",
        description: "Validates that the current object is a file. Returns the file if the validation passes, otherwise throws an exception.",
        command: "isFile",
        methodSignature: "isFile(): File",
        fields: [],
        returnType: "File",
    },

    isDirectory: {
        blockId: "",
        methodId: "isDirectory",
        type: "isDirectory",
        classObject: "FileChecker",
        name: "isDirectory",
        label: "Is Directory",
        description: "Validates that the current object is a directory. Returns the directory if the validation passes, otherwise throws an exception.",
        command: "isDirectory",
        methodSignature: "isDirectory(): File",
        fields: [],
        returnType: "File",
    },

    //static class PathStateChecker
    isFilePath: {
        blockId: "",
        methodId: "isFile",
        type: "isFile",
        classObject: "PathStateChecker",
        name: "isFile",
        label: "Is File",
        description: "Validates that the current path refers to a file. Returns the path if it is a file, otherwise throws an exception.",
        command: "isFile",
        methodSignature: "isFile(): Path",
        fields: [],
        returnType: "Path",
    },

    isDirectoryPath: {
        blockId: "",
        methodId: "isDirectory",
        type: "isDirectory",
        classObject: "PathStateChecker",
        name: "isDirectory",
        label: "Is Directory",
        description: "Validates that the current path refers to a directory. Returns the path if it is a directory, otherwise throws an exception.",
        command: "isDirectory",
        methodSignature: "isDirectory(): Path",
        fields: [],
        returnType: "Path",
    },

    //interface EventType<X>
    consume: {
        blockId: "",
        methodId: "consume",
        type: "consume",
        classObject: "EventType<X>",
        name: "consume",
        label: "Consume Event",
        description: "Consumes the specified event, marking it as handled and preventing further propagation.",
        command: "consume",
        methodSignature: "consume(X event): void",
        fields: [
            {
                name: "event",
                type: "text",
                label: "Event",
                placeholder: "Enter the event to be consumed",
                value: "",
            },
        ],
        returnType: "void",
    },

    initializeListener: {
        blockId: "",
        methodId: "",
        type: "initializeListener",
        classObject: "EventType<X>",
        name: "initializeListener",
        label: "Initialize Listener",
        description: "Initializes an event listener for the provided WebDriver instance to start handling events.",
        command: "initializeListener",
        methodSignature: "initializeListener(WebDriver webDriver): void",
        fields: [
            {
                name: "initializeListener",
                value: "",
                type: "list",
                label: "Initialize Listener",
                subLabel: "",
                required: true,
                disabled: false,
                options: [
                    {
                        name: "browser",
                        type: "select",
                        label: "Browser Name",
                        placeholder: "Select a browser to initialize",
                        options: [
                            { value: "chrome", label: "Google Chrome" },
                            { value: "firefox", label: "Mozilla Firefox" },
                            { value: "edge", label: "Microsoft Edge" },
                            { value: "safari", label: "Apple Safari" },
                            { value: "opera", label: "Opera" },
                            { value: "ie", label: "Internet Explorer" },
                            { value: "brave", label: "Brave" },
                            { value: "chromium", label: "Chromium" },
                            { value: "yandex", label: "Yandex" },
                        ],
                        value: "",
                    },
                    {
                        name: "browserVersion",
                        type: "number",
                        label: "Browser Version",
                        placeholder: "Enter the browser version to initialize",
                        value: "",
                    },
                    {
                        name: "platformName",
                        type: "text",
                        label: "Platform Name",
                        placeholder: "Enter the platform name to initialize",
                        value: "",
                    },
                    {
                        name: "browserDriver",
                        type: "select",
                        label: "Browser Driver",
                        placeholder: "Select a browser driver to initialize",
                        options: [
                            { value: "chromedriver", label: "Chrome Driver" },
                            { value: "firefoxdriver", label: "Mozilla Firefox" },
                            { value: "edgedriver", label: "Microsoft Edge" },
                            { value: "safaridriver", label: "Apple Safari" },
                            { value: "operadriver", label: "Opera" },
                            { value: "iedriver", label: "Internet Explorer" },
                            { value: "bravedriver", label: "Brave Driver" },
                            { value: "chromiumdriver", label: "Chromium Driver" },
                        ],
                        value: "",
                    },
                ],
            },
        ],
        returnType: "void",
    },

    //interface HasLogEvents
    onLogEvent: {
        blockId: "",
        methodId: "onLogEvent",
        type: "onLogEvent",
        classObject: "HasLogEvents",
        name: "onLogEvent",
        label: "Log Event",
        description: "Handles and logs the specified event of type `EventType<X>`. Used to capture and log event information.",
        command: "onLogEvent",
        methodSignature: "onLogEvent(EventType<X> kind): void",
        fields: [
            {
                name: "kind",
                type: "select",
                label: "Event Type",
                options: [
                    { value: "BEFORE_NAVIGATE_TO", label: "Before Navigate To" },
                    { value: "AFTER_NAVIGATE_TO", label: "After Navigate To" },
                    { value: "BEFORE_NAVIGATE_BACK", label: "Before Navigate Back" },
                    { value: "AFTER_NAVIGATE_BACK", label: "After Navigate Back" },
                    {
                        value: "BEFORE_NAVIGATE_FORWARD",
                        label: "Before Navigate Forward",
                    },
                    { value: "AFTER_NAVIGATE_FORWARD", label: "After Navigate Forward" },
                    {
                        value: "BEFORE_NAVIGATE_REFRESH",
                        label: "Before Navigate Refresh",
                    },
                    { value: "AFTER_NAVIGATE_REFRESH", label: "After Navigate Refresh" },
                    { value: "BEFORE_CLICK", label: "Before Click" },
                    { value: "AFTER_CLICK", label: "After Click" },
                    { value: "BEFORE_CHANGE_VALUE_OF", label: "Before Change Value Of" },
                    { value: "AFTER_CHANGE_VALUE_OF", label: "After Change Value Of" },
                    { value: "BEFORE_FIND_BY", label: "Before Find By" },
                    { value: "AFTER_FIND_BY", label: "After Find By" },
                    { value: "ON_EXCEPTION", label: "On Exception" },
                    { value: "BEFORE_SCRIPT", label: "Before Script Execution" },
                    { value: "AFTER_SCRIPT", label: "After Script Execution" },
                    { value: "BEFORE_REQUEST", label: "Before Request" },
                    { value: "AFTER_REQUEST", label: "After Request" },
                    { value: "BEFORE_RESPONSE", label: "Before Response" },
                    { value: "AFTER_RESPONSE", label: "After Response" },
                ],
                placeholder: "Select the event type to be logged",
                value: "",
            },
        ],
        returnType: "void",
    },
    //class LocalLogs
    getNullLogger: {
        blockId: "",
        methodId: "getNullLogger",
        type: "getNullLogger",
        classObject: "LocalLogs",
        name: "getNullLogger",
        label: "Get Null Logger",
        description: "Returns a logger that discards all log messages, effectively ignoring them.",
        command: "getNullLogger",
        methodSignature: "getNullLogger(): LocalLogs",
        fields: [],
        returnType: "LocalLogs",
    },

    getStoringLoggerinstance: {
        blockId: "",
        methodId: "getStoringLoggerinstance",
        type: "getStoringLoggerinstance",
        classObject: "LocalLogs",
        name: "getStoringLoggerinstance",
        label: "Get Storing Logger",
        description: "Returns a logger that stores log messages based on the provided set of log levels.",
        command: "getStoringLoggerinstance",
        methodSignature: "getStoringLoggerinstance(Set<String> logLevels): LocalLogs",
        fields: [
            {
                name: "logLevels",
                type: "select",
                label: "Log Levels",
                placeholder: "Enter the log levels to store",
                options: [
                    { value: "ALL", label: "ALL" },
                    { value: "INFO", label: "INFO" },
                    { value: "WARNING", label: "WARNING" },
                    { value: "ERROR", label: "ERROR" },
                    { value: "SEVERE", label: "SEVERE" },
                ],
                value: "",
            },
        ],
        returnType: "LocalLogs",
    },

    getHandlerBasedLoggerInstance: {
        blockId: "",
        methodId: "getHandlerBasedLoggerInstance",
        type: "getHandlerBasedLoggerInstance",
        classObject: "LocalLogs",
        name: "getHandlerBasedLoggerInstance",
        label: "Get Handler-Based Logger",
        description: "Returns a logger that uses the specified logging handler and stores log messages based on the provided set of log levels.",
        command: "getHandlerBasedLoggerInstance",
        methodSignature: "getHandlerBasedLoggerInstance(Logging Handler handler, Set<String> logLevels): LocalLogs",
        fields: [
            {
                name: "handler",
                type: "textarea",
                label: "Logging Handler",
                placeholder: "Enter the logging handler to use",
                value: "",
            },
            {
                name: "logLevel",
                type: "select",
                label: "Log Level",
                placeholder: "Enter the log level",
                value: { level: "ALL" },
                options: [
                    { value: "ALL", label: "ALL" },
                    { value: "INFO", label: "INFO" },
                    { value: "WARNING", label: "WARNING" },
                    { value: "ERROR", label: "ERROR" },
                    { value: "SEVERE", label: "SEVERE" },
                ],
            },
        ],
        returnType: "LocalLogs",
    },

    getCombinedLogsHolder: {
        blockId: "",
        methodId: "getCombinedLogsHolder",
        type: "getCombinedLogsHolder",
        classObject: "LocalLogs",
        name: "getCombinedLogsHolder",
        label: "Get Combined Logs Holder",
        description: "Combines two separate `LocalLogs` instances into a single holder, aggregating all log entries.",
        command: "getCombinedLogsHolder",
        methodSignature: "getCombinedLogsHolder(LocalLogs log1, LocalLogs log2): LocalLogs",
        fields: [
            {
                name: "getCombinedLogsHolder",
                value: "",
                type: "list",
                label: "Get Combined Logs Holder",
                subLabel: "",
                required: true,
                disabled: false,
                options: [
                    {
                        name: "log1",
                        type: "text",
                        label: "First Log Instance",
                        placeholder: "Enter the first LocalLogs instance",
                        value: "",
                        options: [
                            {
                                name: "logLevel",
                                type: "select",
                                label: "Log Level",
                                placeholder: "Enter the log level",
                                value: { level: "" },
                                options: [
                                    { value: "ALL", label: "ALL" },
                                    { value: "INFO", label: "INFO" },
                                    { value: "WARNING", label: "WARNING" },
                                    { value: "ERROR", label: "ERROR" },
                                    { value: "SEVERE", label: "SEVERE" },
                                ],
                            },
                            {
                                name: "message",
                                type: "text",
                                label: "Message",
                                placeholder: "Enter the message",
                                value: "",
                            },
                        ],
                    },
                    {
                        name: "log2",
                        type: "text",
                        label: "Second Log Instance",
                        placeholder: "Enter the second LocalLogs instance",
                        value: "",
                        options: [
                            {
                                name: "logLevel",
                                type: "select",
                                label: "Log Level",
                                placeholder: "Enter the log level",
                                value: { level: "" },
                                options: [
                                    { value: "ALL", label: "ALL" },
                                    { value: "INFO", label: "INFO" },
                                    { value: "WARNING", label: "WARNING" },
                                    { value: "ERROR", label: "ERROR" },
                                    { value: "SEVERE", label: "SEVERE" },
                                ],
                            },
                            {
                                name: "message",
                                type: "text",
                                label: "Message",
                                placeholder: "Enter the message",
                                value: "",
                            },
                        ],
                    },
                ],
            },
        ],
        returnType: "LocalLogs",
    },

    addEntry: {
        blockId: "",
        methodId: "addEntry",
        type: "addEntry",
        classObject: "LocalLogs",
        name: "addEntry",
        label: "Add Log Entry",
        description: "Adds a log entry to the specified log category. Each entry consists of a message and additional log details.",
        command: "addEntry",
        methodSignature: "addEntry(String category, LogEntry entry): void",
        fields: [
            {
                name: "category",
                type: "text",
                label: "Log Category",
                placeholder: "Enter the category for the log entry",
                value: "",
            },
            {
                name: "logEntry",
                type: "select",
                label: "Log Entry",
                placeholder: "Enter the log entry details",
                options: [
                    { value: "ALL", label: "ALL" },
                    { value: "INFO", label: "INFO" },
                    { value: "WARNING", label: "WARNING" },
                    { value: "ERROR", label: "ERROR" },
                    { value: "SEVERE", label: "SEVERE" },
                ],
                value: "",
            },
        ],
        returnType: "void",
    },

    //class LogCombiner
    combine: {
        blockId: "",
        methodId: "combine",
        type: "combine",
        classObject: "LogCombiner",
        name: "combine",
        label: "Combine Log Entries",
        description: "Combines multiple `LogEntries` into a single `LogEntries` instance. This method aggregates all the entries into one collection.",
        command: "combine",
        methodSignature: "combine(LogEntries... entries): LogEntries",
        fields: [
            {
                name: "combine",
                value: "",
                type: "list",
                label: "Combine Log Entries",
                placeholder: "Enter the LogEntries to combine",
                subLabel: "",
                required: true,
                disabled: false,
                options: [
                    {
                        name: "logLevel",
                        type: "select",
                        label: "Log Level",
                        placeholder: "Enter the log level",
                        value: { level: "" },
                        options: [
                            { value: "ALL", label: "ALL" },
                            { value: "INFO", label: "INFO" },
                            { value: "WARNING", label: "WARNING" },
                            { value: "ERROR", label: "ERROR" },
                            { value: "SEVERE", label: "SEVERE" },
                        ],
                    },
                    {
                        name: "message",
                        type: "text",
                        label: "Message",
                        placeholder: "Enter the message",
                        value: "",
                    },
                ],
            },
        ],
        returnType: "LogEntries",
    },

    //class LogEntries
    getAll: {
        blockId: "",
        methodId: "getAll",
        type: "getAll",
        classObject: "LogEntries",
        name: "getAll",
        label: "Get All Log Entries",
        description: "Retrieves all log entries from the log collection as a list of `LogEntry` objects.",
        command: "getAll",
        methodSignature: "getAll(): List<LogEntry>",
        fields: [],
        returnType: "List<LogEntry>",
    },

    toJsonList: {
        blockId: "",
        methodId: "toJson",
        type: "toJson",
        classObject: "LogEntries",
        name: "toJson",
        label: "Convert to JSON",
        description: "Converts the log entries into a JSON format and returns them as a list of `LogEntry` objects.",
        command: "toJson",
        methodSignature: "toJson(): List<LogEntry>",
        fields: [],
        returnType: "List<LogEntry>",
    },

    //class LogEntry
    getLevel: {
        blockId: "",
        methodId: "getLevel",
        type: "getLevel",
        classObject: "LogEntry",
        name: "getLevel",
        label: "Get Log Level",
        description: "Retrieves the log level associated with the log entry, which indicates the severity of the log.",
        command: "getLevel",
        methodSignature: "getLevel(): Level",
        fields: [],
        returnType: "Level",
    },

    getTimestamp: {
        blockId: "",
        methodId: "getTimestamp",
        type: "getTimestamp",
        classObject: "LogEntry",
        name: "getTimestamp",
        label: "Get Timestamp",
        description: "Retrieves the timestamp of the log entry, which represents the time when the log was created.",
        command: "getTimestamp",
        methodSignature: "getTimestamp(): long",
        fields: [],
        returnType: "long",
    },

    getMessages: {
        blockId: "",
        methodId: "getMessage",
        type: "getMessage",
        classObject: "LogEntry",
        name: "getMessage",
        label: "Get Log Message",
        description: "Retrieves the message associated with the log entry, which describes the event or action being logged.",
        command: "getMessage",
        methodSignature: "getMessage(): String",
        fields: [],
        returnType: "String",
    },

    //class LoggingHandler
    getInstance: {
        blockId: "",
        methodId: "getInstance",
        type: "getInstance",
        classObject: "LoggingHandler",
        name: "getInstance",
        label: "Get Logging Handler Instance",
        description: "Retrieves an instance of the logging handler, which is responsible for processing and handling log entries.",
        command: "getInstance",
        methodSignature: "getInstance(): Logging Handler",
        fields: [],
        returnType: "Logging Handler",
    },

    getRecords: {
        blockId: "",
        methodId: "getRecords",
        type: "getRecords",
        classObject: "LoggingHandler",
        name: "getRecords",
        label: "Get Log Records",
        description: "Retrieves all the log records, returning them as a collection of `LogEntry` objects.",
        command: "getRecords",
        methodSignature: "getRecords(): Collection<LogEntry>",
        fields: [],
        returnType: "Collection<LogEntry>",
    },

    publish: {
        blockId: "",
        methodId: "publish",
        type: "publish",
        classObject: "LoggingHandler",
        name: "publish",
        label: "Publish Log Record",
        description: "Publishes the specified `LogRecord`, which represents a log entry to be processed or stored by the logging system.",
        command: "publish",
        methodSignature: "publish(LogRecord logRecord): void",
        fields: [
            {
                name: "logRecord",
                type: "text",
                label: "Log Record",
                placeholder: "Enter the log record to publish",
                value: "",
            },
        ],
        returnType: "void",
    },

    flush: {
        blockId: "",
        methodId: "flush",
        type: "flush",
        classObject: "LoggingHandler",
        name: "flush",
        label: "Flush Logs",
        description: "Flushes all the buffered log entries to their respective output destinations.",
        command: "flush",
        methodSignature: "flush(): void",
        fields: [],
        returnType: "void",
    },

    //class LoggingPreferences
    enable: {
        blockId: "",
        methodId: "enable",
        type: "enable",
        classObject: "LoggingPreferences",
        name: "enable",
        label: "Enable Logging",
        description: "Enables logging for a specified category at the given log level. This allows capturing logs at the specified severity level for the category.",
        command: "enable",
        methodSignature: "enable(String category, Level level): void",
        fields: [
            {
                name: "category",
                type: "text",
                label: "Log Category",
                placeholder: "Enter the category for enabling logging",
                value: "",
            },
            {
                name: "loglevel",
                type: "select",
                label: "Log Level",
                placeholder: "Enter the log level (e.g., DEBUG, INFO, WARN)",
                options: [
                    { value: "ALL", label: "ALL" },
                    { value: "INFO", label: "INFO" },
                    { value: "WARNING", label: "WARNING" },
                    { value: "ERROR", label: "ERROR" },
                    { value: "SEVERE", label: "SEVERE" },
                ],
                value: "",
            },
        ],
        returnType: "void",
    },

    getEnabledLogTypes: {
        blockId: "",
        methodId: "getEnabledLogTypes",
        type: "getEnabledLogTypes",
        classObject: "LoggingPreferences",
        name: "getEnabledLogTypes",
        label: "Get Enabled Log Types",
        description: "Retrieves the set of log types that are currently enabled in the logging configuration.",
        command: "getEnabledLogTypes",
        methodSignature: "getEnabledLogTypes(): Set<String>",
        fields: [],
        returnType: "Set<String>",
    },

    getLevels: {
        blockId: "",
        methodId: "getLevel",
        type: "getLevel",
        classObject: "LoggingPreferences",
        name: "getLevel",
        label: "Get Log Level for Category",
        description: "Retrieves the log level for a specific log category, indicating the severity level of the logs for that category.",
        command: "getLevel",
        methodSignature: "getLevel(String category): Level",
        fields: [
            {
                name: "category",
                type: "select",
                label: "Log Category",
                placeholder: "Enter the category for which to retrieve the log level",
                options: [
                    { value: "ALL", label: "ALL" },
                    { value: "INFO", label: "INFO" },
                    { value: "WARNING", label: "WARNING" },
                    { value: "ERROR", label: "ERROR" },
                    { value: "SEVERE", label: "SEVERE" },
                ],
                value: "",
            },
        ],
        returnType: "Level",
    },

    addPreferences: {
        blockId: "",
        methodId: "addPreferences",
        type: "addPreferences",
        classObject: "LoggingPreferences",
        name: "addPreferences",
        label: "Add Logging Preferences",
        description: "Adds the provided `LoggingPreferences` to the current configuration, allowing customization of log handling behavior.",
        command: "addPreferences",
        methodSignature: "addPreferences(LoggingPreferences preferences): LoggingPreferences",
        fields: [
            {
                name: "logType",
                type: "select",
                label: "Log Type",
                placeholder: "Select log type",
                value: "browser",
                options: [
                    { value: "driver", label: "Driver" },
                    { value: "browser", label: "Browser" },
                    { value: "performance", label: "Performance" },
                    { value: "client", label: "Client" },
                ],
            },
            {
                name: "value",
                type: "select",
                label: "Log Level",
                placeholder: "Specify log level",
                value: { level: "ALL" },
                options: [
                    { value: "ALL", label: "ALL" },
                    { value: "INFO", label: "INFO" },
                    { value: "WARNING", label: "WARNING" },
                    { value: "ERROR", label: "ERROR" },
                    { value: "SEVERE", label: "SEVERE" },
                ],
            },
        ],
        returnType: "LoggingPreferences",
    },

    //class LogLevelMapping
    normalize: {
        blockId: "",
        methodId: "normalize",
        type: "normalize",
        classObject: "LogLevelMapping",
        name: "normalize",
        label: "Normalize Log Level",
        description: "Normalizes a given `Level` to ensure it adheres to the expected log level format or constraints in the logging system.",
        command: "normalize",
        methodSignature: "normalize(Level level): Level",
        fields: [
            {
                name: "normalize",
                type: "select",
                label: "Normalize Log Level",
                placeholder: "Select the log level to normalize",
                options: [
                    { value: "ALL", label: "ALL" },
                    { value: "INFO", label: "INFO" },
                    { value: "WARNING", label: "WARNING" },
                    { value: "ERROR", label: "ERROR" },
                    { value: "SEVERE", label: "SEVERE" },
                ],
                value: "",
            },
        ],
        returnType: "Level",
    },

    getLogName: {
        blockId: "",
        methodId: "getName",
        type: "getName",
        classObject: "LogLevelMapping",
        name: "getName",
        label: "Get Log Level Name",
        description: "Retrieves the name associated with the specified log `Level`, typically used to display the log level as a string.",
        command: "getName",
        methodSignature: "getName(Level level): String",
        fields: [
            {
                name: "getLevelName",
                type: "select",
                label: "Log Level Name",
                placeholder: "Enter the log level to get the name",
                options: [
                    { value: "ALL", label: "ALL" },
                    { value: "INFO", label: "INFO" },
                    { value: "WARNING", label: "WARNING" },
                    { value: "ERROR", label: "ERROR" },
                    { value: "SEVERE", label: "SEVERE" },
                ],
                value: "",
            },
        ],
        returnType: "String",
    },

    toLevel: {
        blockId: "",
        methodId: "toLevel",
        type: "toLevel",
        classObject: "LogLevelMapping",
        name: "toLevel",
        label: "Convert to Log Level",
        description: "Converts a string representation of a log level into its corresponding `Level` object.",
        command: "toLevel",
        methodSignature: "toLevel(String levelName): Level",
        fields: [
            {
                name: "toLevel",
                type: "select",
                label: "To Log Level",
                placeholder: "select the log level to convert",
                options: [
                    { value: "ALL", label: "ALL" },
                    { value: "INFO", label: "INFO" },
                    { value: "WARNING", label: "WARNING" },
                    { value: "ERROR", label: "ERROR" },
                    { value: "SEVERE", label: "SEVERE" },
                ],
                value: "",
            },
        ],
        returnType: "Level",
    },

    //interface Logs
    getLogType: {
        blockId: "",
        methodId: "get",
        type: "get",
        classObject: "Logs",
        name: "get",
        label: "Get Log Entries",
        description: "Retrieves log entries for a specified log type, returning them as a collection of `LogEntries`.",
        command: "get",
        methodSignature: "get(String logType): LogEntries",
        fields: [
            {
                name: "logType",
                type: "select",
                label: "Log Type",
                placeholder: "Enter the type of logs to retrieve",
                options: [
                    { value: "driver", label: "Driver" },
                    { value: "browser", label: "Browser" },
                    { value: "performance", label: "Performance" },
                    { value: "client", label: "Client" },
                ],
                value: "",
            },
        ],
        returnType: "LogEntries",
    },

    getAvailableLogTypes: {
        blockId: "",
        methodId: "getAvailableLogTypes",
        type: "getAvailableLogTypes",
        classObject: "Logs",
        name: "getAvailableLogTypes",
        label: "Get Available Log Types",
        description: "Retrieves the set of available log types, indicating all the log categories that can be logged by the system.",
        command: "getAvailableLogTypes",
        methodSignature: "getAvailableLogTypes(): Set<String>",
        fields: [],
        returnType: "Set<String>",
    },

    //interface NeedsLocalLogs
    setLocalLogs: {
        blockId: "",
        methodId: "setLocalLogs",
        type: "setLocalLogs",
        classObject: "NeedsLocalLogs",
        name: "setLocalLogs",
        label: "Set Local Logs",
        description: "Sets the provided `LocalLogs` instance as the current log storage for the logging system.",
        command: "setLocalLogs",
        methodSignature: "setLocalLogs(LocalLogs logs): void",
        fields: [
            {
                name: "logs",
                type: "select",
                label: "Local Logs",
                placeholder: "Select the LocalLogs instance to set",
                options: [
                    { value: "ALL", label: "ALL" },
                    { value: "INFO", label: "INFO" },
                    { value: "WARNING", label: "WARNING" },
                    { value: "ERROR", label: "ERROR" },
                    { value: "SEVERE", label: "SEVERE" },
                ],
                value: "",
            },
        ],
        returnType: "void",
    },

    //class SessionLogHandler
    getSessionLogs: {
        blockId: "",
        methodId: "getSessionLogs",
        type: "getSessionLogs",
        classObject: "SessionLogHandler",
        name: "getSessionLogs",
        label: "Get Session Logs",
        description: "Retrieves the session logs based on the provided parameters, returning them as a map of `SessionLogs` associated with different keys.",
        command: "getSessionLogs",
        methodSignature: "getSessionLogs(Map<String, Object> params): Map<String, SessionLogs>",
        fields: [
            {
                name: "logType",
                type: "select",
                label: "Log Type",
                placeholder: "Select log type",
                value: "browser",
                options: [
                    { value: "driver", label: "Driver" },
                    { value: "browser", label: "Browser" },
                    { value: "performance", label: "Performance" },
                    { value: "client", label: "Client" },
                ],
            },
            {
                name: "value",
                type: "select",
                label: "Log Level",
                placeholder: "Specify log level",
                value: { level: "ALL" },
                options: [
                    { value: "ALL", label: "ALL" },
                    { value: "INFO", label: "INFO" },
                    { value: "WARNING", label: "WARNING" },
                    { value: "ERROR", label: "ERROR" },
                    { value: "SEVERE", label: "SEVERE" },
                ],
            },
        ],
        returnType: "Map<String, SessionLogs>",
    },

    //class SessionLogs
    getLogs: {
        blockId: "",
        methodId: "getLogs",
        type: "getLogs",
        classObject: "SessionLogs",
        name: "getLogs",
        label: "Get Logs by Type",
        description: "Retrieves logs for a specified log type, returning them as a collection of `LogEntries`.",
        command: "getLogs",
        methodSignature: "getLogs(String logType): LogEntries",
        fields: [
            {
                name: "logType",
                type: "select",
                label: "Log Type",
                placeholder: "Enter the log type to retrieve",
                options: [
                    { value: "driver", label: "Driver" },
                    { value: "browser", label: "Browser" },
                    { value: "performance", label: "Performance" },
                    { value: "client", label: "Client" },
                ],
                value: "",
            },
        ],
        returnType: "LogEntries",
    },

    addLog: {
        blockId: "",
        methodId: "addLog",
        type: "addLog",
        classObject: "SessionLogs",
        name: "addLog",
        label: "Add Log Entries",
        description: "Adds the provided `LogEntries` to the specified log type, allowing logs to be stored under that category.",
        command: "addLog",
        methodSignature: "addLog(String logType, LogEntries entries): void",
        fields: [
            {
                name: "logType",
                type: "select",
                label: "Log Type",
                placeholder: "Enter the log type to add entries to",
                options: [
                    { value: "driver", label: "Driver" },
                    { value: "browser", label: "Browser" },
                    { value: "performance", label: "Performance" },
                    { value: "client", label: "Client" },
                ],
                value: "",
            },
            {
                name: "message",
                type: "text",
                label: "Log Message",
                placeholder: "Enter the log message",
                value: "",
            },
        ],
        returnType: "void",
    },

    getLogTypes: {
        blockId: "",
        methodId: "getLogTypes",
        type: "getLogTypes",
        classObject: "SessionLogs",
        name: "getLogTypes",
        label: "Get Available Log Types",
        description: "Retrieves the set of log types that are available for the logging system, indicating all categories that can be logged.",
        command: "getLogTypes",
        methodSignature: "getLogTypes(): Set<String>",
        fields: [],
        returnType: "Set<String>",
    },

    getAllLogEntries: {
        blockId: "",
        methodId: "getAll",
        type: "getAll",
        classObject: "SessionLogs",
        name: "getAll",
        label: "Get All Logs",
        description: "Retrieves all log entries, returning them as a map where each key is a log type and the corresponding value is the `LogEntries` for that type.",
        command: "getAll",
        methodSignature: "getAll(): Map<String, LogEntries>",
        fields: [],
        returnType: "Map<String, LogEntries>",
    },

    fromJSON: {
        blockId: "",
        methodId: "fromJSON",
        type: "fromJSON",
        classObject: "SessionLogs",
        name: "fromJSON",
        label: "Parse Session Logs from JSON",
        description: "Parses the given map of data (usually a JSON structure) and converts it into `SessionLogs` objects.",
        command: "fromJSON",
        methodSignature: "fromJSON(Map<String, Object> data): SessionLogs",
        fields: [
            {
                name: "data",
                type: "textarea",
                label: "Data (Map)",
                placeholder: "Enter the JSON data to parse",
                value: "",
            },
        ],
        returnType: "SessionLogs",
    },

    toJson: {
        blockId: "",
        methodId: "toJson",
        type: "toJson",
        classObject: "SessionLogs",
        name: "toJson",
        label: "Convert Logs to JSON",
        description: "Converts the log entries into a JSON-compatible map, where each key represents a log type and the corresponding value is the `LogEntries` for that type.",
        command: "toJson",
        methodSignature: "toJson(): Map<String, LogEntries>",
        fields: [],
        returnType: "Map<String, LogEntries>",
    },

    //class StoringLocalLogs
    getLocalLogs: {
        blockId: "",
        methodId: "getLocalLogs",
        type: "getLocalLogs",
        classObject: "StoringLocalLogs",
        name: "getLocalLogs",
        label: "Get Local Logs by Type",
        description: "Retrieves local logs for a specified log type, returning them as an iterable collection of `LogEntry` objects.",
        command: "getLocalLogs",
        methodSignature: "getLocalLogs(String logType): Iterable<LogEntry>",
        fields: [
            {
                name: "logType",
                type: "select",
                label: "Log Type",
                placeholder: "Enter the log type to retrieve local logs for",
                options: [
                    { value: "driver", label: "Driver" },
                    { value: "browser", label: "Browser" },
                    { value: "performance", label: "Performance" },
                    { value: "client", label: "Client" },
                ],
                value: "",
            },
        ],
        returnType: "Iterable<LogEntry>",
    },

    // class HttpProfilerLogEntry
    constructMessage: {
        blockId: "",
        methodId: "constructMessage",
        type: "constructMessage",
        classObject: "HttpProfilerLogEntry",
        name: "constructMessage",
        label: "Construct Log Message",
        description: "Constructs a log message based on the event type, command name, and start/end status, returning it as a formatted string.",
        command: "constructMessage",
        methodSignature: "constructMessage(EventType eventType, String commandName, boolean isStart): String",
        fields: [
            {
                name: "eventType",
                type: "text",
                label: "Event Type",
                placeholder: "Enter the event type",
                value: "",
            },
            {
                name: "commandName",
                type: "text",
                label: "Command Name",
                placeholder: "Enter the command name",
                value: "",
            },
            {
                name: "isStart",
                type: "checkbox",
                label: "Is Start",
                placeholder: "",
                value: false,
            },
        ],
        returnType: "String",
    },

    //interface NetworkConnection
    isAirplaneMode: {
        blockId: "",
        methodId: "isAirplaneMode",
        type: "isAirplaneMode",
        classObject: "NetworkConnection",
        name: "isAirplaneMode",
        label: "Check Airplane Mode",
        description: "Checks whether the device is currently in airplane mode, returning a boolean value indicating its status.",
        command: "isAirplaneMode",
        methodSignature: "isAirplaneMode(): Boolean",
        fields: [],
        returnType: "Boolean",
    },

    isWifiEnabled: {
        blockId: "",
        methodId: "isWifiEnabled",
        type: "isWifiEnabled",
        classObject: "NetworkConnection",
        name: "isWifiEnabled",
        label: "Check Wi-Fi Status",
        description: "Checks whether Wi-Fi is currently enabled on the device, returning a boolean value indicating its status.",
        command: "isWifiEnabled",
        methodSignature: "isWifiEnabled(): Boolean",
        fields: [],
        returnType: "Boolean",
    },

    isDataEnabled: {
        blockId: "",
        methodId: "isDataEnabled",
        type: "isDataEnabled",
        classObject: "NetworkConnection",
        name: "isDataEnabled",
        label: "Check Mobile Data Status",
        description: "Checks whether mobile data is currently enabled on the device, returning a boolean value indicating its status.",
        command: "isDataEnabled",
        methodSignature: "isDataEnabled(): Boolean",
        fields: [],
        returnType: "Boolean",
    },

    toJsons: {
        blockId: "",
        methodId: "toJson",
        type: "toJson",
        classObject: "NetworkConnection",
        name: "toJson",
        label: "Convert to JSON",
        description: "Converts data into a JSON-compatible format, returning an integer representation of the result.",
        command: "toJson",
        methodSignature: "toJson(): Integer",
        fields: [],
        returnType: "Integer",
    },

    getNetworkConnection: {
        blockId: "",
        methodId: "getNetworkConnection",
        type: "getNetworkConnection",
        classObject: "NetworkConnection",
        name: "getNetworkConnection",
        label: "Get Network Connection Type",
        description: "Retrieves the current network connection type, returning a value indicating the type of connection (e.g., Wi-Fi, mobile data).",
        command: "getNetworkConnection",
        methodSignature: "getNetworkConnection(): ConnectionType",
        fields: [],
        returnType: "ConnectionType",
    },

    setNetworkConnection: {
        blockId: "",
        methodId: "setNetworkConnection",
        type: "setNetworkConnection",
        classObject: "NetworkConnection",
        name: "setNetworkConnection",
        label: "Set Network Connection Type",
        description: "Sets the network connection type to the specified value, allowing you to change the current connection (e.g., switch between Wi-Fi and mobile data).",
        command: "setNetworkConnection",
        methodSignature: "setNetworkConnection(ConnectionType connectionType): ConnectionType",
        fields: [
            {
                name: "connectionType",
                type: "select",
                label: "Connection Type",
                options: [
                    { value: "NONE", label: "None" },
                    { value: "WIFI", label: "Wi-Fi" },
                    { value: "MOBILE_DATA", label: "Mobile Data" },
                    { value: "ETHERNET", label: "Ethernet" },
                    { value: "BLUETOOTH", label: "Bluetooth" },
                ],
                placeholder: "Select the desired network connection type",
                value: "",
            },
        ],
        returnType: "ConnectionType",
    },

    //class DefaultNetworkInterfaceProvider
    getLocalInterfaceName: {
        blockId: "",
        methodId: "getLocalInterfaceName",
        type: "getLocalInterfaceName",
        classObject: "DefaultNetworkInterfaceProvider",
        name: "getLocalInterfaceName",
        label: "Get Local Interface Name",
        description: "Retrieves the name of the local network interface (e.g., Ethernet or Wi-Fi interface) currently in use by the device.",
        command: "getLocalInterfaceName",
        methodSignature: "getLocalInterfaceName(): String",
        fields: [],
        returnType: "String",
    },

    //interface EphemeralPortRangeDetector
    getLowestEphemeralPort: {
        blockId: "",
        methodId: "getLowestEphemeralPort",
        type: "getLowestEphemeralPort",
        classObject: "EphemeralPortRangeDetector",
        name: "getLowestEphemeralPort",
        label: "Get Lowest Ephemeral Port",
        description: "Retrieves the lowest available ephemeral port number that can be used for network connections.",
        command: "getLowestEphemeralPort",
        methodSignature: "getLowestEphemeralPort(): int",
        fields: [],
        returnType: "int",
    },

    getHighestEphemeralPort: {
        blockId: "",
        methodId: "getHighestEphemeralPort",
        type: "getHighestEphemeralPort",
        classObject: "EphemeralPortRangeDetector",
        name: "getHighestEphemeralPort",
        label: "Get Highest Ephemeral Port",
        description: "Retrieves the highest available ephemeral port number that can be used for network connections.",
        command: "getHighestEphemeralPort",
        methodSignature: "getHighestEphemeralPort(): int",
        fields: [],
        returnType: "int",
    },

    //class HostIdentifier
    resolveHostName: {
        blockId: "",
        methodId: "resolveHostName",
        type: "resolveHostName",
        classObject: "HostIdentifier",
        name: "resolveHostName",
        label: "Resolve Host Name",
        description: "Resolves the host name of the device or network endpoint to its corresponding IP address, returning it as a string.",
        command: "resolveHostName",
        methodSignature: "resolveHostName(): String",
        fields: [],
        returnType: "String",
    },

    resolveHostAddress: {
        blockId: "",
        methodId: "resolveHostAddress",
        type: "resolveHostAddress",
        classObject: "HostIdentifier",
        name: "resolveHostAddress",
        label: "Resolve Host Address",
        description: "Resolves the host address of a device or network endpoint, returning the corresponding IP address as a string.",
        command: "resolveHostAddress",
        methodSignature: "resolveHostAddress(): String",
        fields: [],
        returnType: "String",
    },

    getHostName: {
        blockId: "",
        methodId: "getHostName",
        type: "getHostName",
        classObject: "HostIdentifier",
        name: "getHostName",
        label: "Get Host Name",
        description: "Retrieves the host name of the device or network endpoint, returning it as a string.",
        command: "getHostName",
        methodSignature: "getHostName(): String",
        fields: [],
        returnType: "String",
    },

    getHostAddress: {
        blockId: "",
        methodId: "getHostAddress",
        type: "getHostAddress",
        classObject: "HostIdentifier",
        name: "getHostAddress",
        label: "Get Host Address",
        description: "Retrieves the host address (IP address) of the device or network endpoint, returning it as a string.",
        command: "getHostAddress",
        methodSignature: "getHostAddress(): String",
        fields: [],
        returnType: "String",
    },

    //class LinuxEphemeralPortRangeDetector
    getInstances: {
        blockId: "",
        methodId: "getInstance",
        type: "getInstance",
        classObject: "LinuxEphemeralPortRangeDetector",
        name: "getInstance",
        label: "Get Instance of LinuxEphemeralPortRangeDetector",
        description: "Returns a singleton instance of the LinuxEphemeralPortRangeDetector class, which detects the range of ephemeral ports on Linux systems.",
        command: "getInstance",
        methodSignature: "getInstance(): LinuxEphemeralPortRangeDetector",
        fields: [],
        returnType: "LinuxEphemeralPortRangeDetector",
    },

    //class NetworkInterface
    islp4AddressBindingOnly: {
        blockId: "",
        methodId: "islp4AddressBindingOnly",
        type: "islp4AddressBindingOnly",
        classObject: "NetworkInterface",
        name: "islp4AddressBindingOnly",
        label: "Check IPv4 Address Binding Only",
        description: "Checks whether the system is configured to bind only to an IPv4 address, returning a boolean indicating the status.",
        command: "islp4AddressBindingOnly",
        methodSignature: "islp4AddressBindingOnly(): boolean",
        fields: [],
        returnType: "boolean",
    },

    isLoopBack: {
        blockId: "",
        methodId: "isLoopBack",
        type: "isLoopBack",
        classObject: "NetworkInterface",
        name: "isLoopBack",
        label: "Check if Loopback Address",
        description: "Checks if the network address is a loopback address (e.g., 127.0.0.1), returning a boolean indicating if it is loopback.",
        command: "isLoopBack",
        methodSignature: "isLoopBack(): boolean",
        fields: [],
        returnType: "boolean",
    },

    isLoopBackFromInetAddresses: {
        blockId: "",
        methodId: "isLoopBackFromInetAddresses",
        type: "isLoopBackFromInetAddresses",
        classObject: "NetworkInterface",
        name: "isLoopBackFromInetAddresses",
        label: "Check if Loopback from InetAddresses",
        description: "Checks if any address from the given Iterable of InetAddress objects is a loopback address, returning a boolean indicating if a loopback address is found.",
        command: "isLoopBackFromInetAddresses",
        methodSignature: "isLoopBackFromInetAddresses(Iterable<InetAddress> inetAddresses): boolean",
        fields: [
            {
                name: "isLoopBackFromInetAddresses",
                value: "",
                type: "list",
                label: "Loopback from InetAddresses",
                placeholder: "Enter the Iterable of InetAddresses",
                subLabel: "",
                required: true,
                disabled: false,
                options: [
                    {
                        name: "inetAddresses",
                        type: "number",
                        label: "Inet Addresses",
                        placeholder: "Enter the Iterable of InetAddresses",
                        value: "",
                    },
                ],
            },
        ],
        returnType: "boolean",
    },

    getlp4LoopbackOnly: {
        blockId: "",
        methodId: "getlp4LoopbackOnly",
        type: "getlp4LoopbackOnly",
        classObject: "NetworkInterface",
        name: "getlp4LoopbackOnly",
        label: "Get IPv4 Loopback Address Only",
        description: "Returns the IPv4 loopback address (e.g., 127.0.0.1) as an InetAddress, if the system is configured to use only IPv4 loopback.",
        command: "getlp4LoopbackOnly",
        methodSignature: "getlp4LoopbackOnly(): InetAddress",
        fields: [],
        returnType: "InetAddress",
    },

    islpv6: {
        blockId: "",
        methodId: "islpv6",
        type: "islpv6",
        classObject: "NetworkInterface",
        name: "islpv6",
        label: "Check if IPv6 Address",
        description: "Checks if the provided InetAddress is an IPv6 address, returning a boolean indicating whether it is IPv6.",
        command: "islpv6",
        methodSignature: "islpv6(InetAddress inetAddress): boolean",
        fields: [
            {
                name: "inetAddresses",
                type: "number",
                label: "Inet Addresses",
                placeholder: "Enter the InetAddress to check",
                value: "",
            },
        ],
        returnType: "boolean",
    },

    getlp4NonLoopBackOnly: {
        blockId: "",
        methodId: "getlp4NonLoopBackOnly",
        type: "getlp4NonLoopBackOnly",
        classObject: "NetworkInterface",
        name: "getlp4NonLoopBackOnly",
        label: "Get IPv4 Non-Loopback Address Only",
        description: "Returns the IPv4 non-loopback address (not 127.0.0.1) as an InetAddress, if the system is configured to use only non-loopback IPv4 addresses.",
        command: "getlp4NonLoopBackOnly",
        methodSignature: "getlp4NonLoopBackOnly(): InetAddress",
        fields: [],
        returnType: "InetAddress",
    },

    getlp6Address: {
        blockId: "",
        methodId: "getlp6Address",
        type: "getlp6Address",
        classObject: "NetworkInterface",
        name: "getlp6Address",
        label: "Get IPv6 Address",
        description: "Returns the IPv6 address of the system as an InetAddress object.",
        command: "getlp6Address",
        methodSignature: "getlp6Address(): InetAddress",
        fields: [],
        returnType: "InetAddress",
    },

    getInetAddresses: {
        blockId: "",
        methodId: "getInetAddresses",
        type: "getInetAddresses",
        classObject: "NetworkInterface",
        name: "getInetAddresses",
        label: "Get Inet Addresses",
        description: "Returns an iterable collection of InetAddress objects representing the network addresses of the system.",
        command: "getInetAddresses",
        methodSignature: "getInetAddresses(): Iterable<InetAddress>",
        fields: [],
        returnType: "Iterable<InetAddress>",
    },

    getNetworkName: {
        blockId: "",
        methodId: "getName",
        type: "getName",
        classObject: "NetworkInterface",
        name: "getName",
        label: "Get Name",
        description: "Returns the name of the system or network, typically the hostname, as a string.",
        command: "getName",
        methodSignature: "getName(): String",
        fields: [],
        returnType: "String",
    },

    //interface NetworkInterfaceProvider
    getNetworkInterfaces: {
        blockId: "",
        methodId: "getNetworkInterfaces",
        type: "getNetworkInterfaces",
        classObject: "NetworkInterfaceProvider",
        name: "getNetworkInterfaces",
        label: "Get Network Interfaces",
        description: "Returns an iterable collection of NetworkInterface objects representing the network interfaces of the system.",
        command: "getNetworkInterfaces",
        methodSignature: "getNetworkInterfaces(): Iterable<NetworkInterface>",
        fields: [],
        returnType: "Iterable<NetworkInterface>",
    },

    getLoInterface: {
        blockId: "",
        methodId: "getLoInterface",
        type: "getLoInterface",
        classObject: "NetworkInterfaceProvider",
        name: "getLoInterface",
        label: "Get Loopback Interface",
        description: "Returns the loopback network interface (typically 'lo' or 'lo0') as a NetworkInterface object.",
        command: "getLoInterface",
        methodSignature: "getLoInterface(): NetworkInterface",
        fields: [],
        returnType: "NetworkInterface",
    },

    //class NetworkUtils
    getHostname: {
        blockId: "",
        methodId: "getHostname",
        type: "getHostname",
        classObject: "NetworkUtils",
        name: "getHostname",
        label: "Get Hostname",
        description: "Returns the hostname of the system as a string.",
        command: "getHostname",
        methodSignature: "getHostname(): String",
        fields: [],
        returnType: "String",
    },

    getsHostAddress: {
        blockId: "",
        methodId: "getHostAddress",
        type: "getHostAddress",
        classObject: "NetworkUtils",
        name: "getHostAddress",
        label: "Get Host Address",
        description: "Returns the host address (IP address) of the system as a string.",
        command: "getHostAddress",
        methodSignature: "getHostAddress(): String",
        fields: [],
        returnType: "String",
    },

    getPrivateLocalAddress: {
        blockId: "",
        methodId: "getPrivateLocalAddress",
        type: "getPrivateLocalAddress",
        classObject: "NetworkUtils",
        name: "getPrivateLocalAddress",
        label: "Get Private Local Address",
        description: "Returns the private local address (e.g., from a local network) as a string.",
        command: "getPrivateLocalAddress",
        methodSignature: "getPrivateLocalAddress(): String",
        fields: [],
        returnType: "String",
    },

    getNonLoopbackAddressOfThisMachine: {
        blockId: "",
        methodId: "getNonLoopbackAddressOfThisMachine",
        type: "getNonLoopbackAddressOfThisMachine",
        classObject: "NetworkUtils",
        name: "getNonLoopbackAddressOfThisMachine",
        label: "Get Non-Loopback Address of This Machine",
        description: "Returns the non-loopback address of the system (i.e., the address used for external communication) as a string.",
        command: "getNonLoopbackAddressOfThisMachine",
        methodSignature: "getNonLoopbackAddressOfThisMachine(): String",
        fields: [],
        returnType: "String",
    },

    getip4NonLoopbackAddressOfThisMachine: {
        blockId: "",
        methodId: "getip4NonLoopbackAddressOfThisMachine",
        type: "getip4NonLoopbackAddressOfThisMachine",
        classObject: "NetworkUtils",
        name: "getip4NonLoopbackAddressOfThisMachine",
        label: "Get IPv4 Non-Loopback Address of This Machine",
        description: "Returns the IPv4 non-loopback address of the system as an InetAddress, excluding addresses like 127.0.0.1.",
        command: "getip4NonLoopbackAddressOfThisMachine",
        methodSignature: "getip4NonLoopbackAddressOfThisMachine(): InetAddress",
        fields: [],
        returnType: "InetAddress",
    },

    obtainLoopbackIp4Address: {
        blockId: "",
        methodId: "obtainLoopbackIp4Address",
        type: "obtainLoopbackIp4Address",
        classObject: "NetworkUtils",
        name: "obtainLoopbackIp4Address",
        label: "Obtain IPv4 Loopback Address",
        description: "Returns the IPv4 loopback address (typically 127.0.0.1) of the system as a string.",
        command: "obtainLoopbackIp4Address",
        methodSignature: "obtainLoopbackIp4Address(): String",
        fields: [],
        returnType: "String",
    },

    grabFirstNetworkAddress: {
        blockId: "",
        methodId: "grabFirstNetworkAddress",
        type: "grabFirstNetworkAddress",
        classObject: "NetworkUtils",
        name: "grabFirstNetworkAddress",
        label: "Grab First Network Address",
        description: "Returns the first network address of the system, typically the first valid network interface address, as an InetAddress.",
        command: "grabFirstNetworkAddress",
        methodSignature: "grabFirstNetworkAddress(): InetAddress",
        fields: [],
        returnType: "InetAddress",
    },

    getIpOfLoopBackIp4: {
        blockId: "",
        methodId: "getIpOfLoopBackIp4",
        type: "getIpOfLoopBackIp4",
        classObject: "NetworkUtils",
        name: "getIpOfLoopBackIp4",
        label: "Get IPv4 Loopback IP",
        description: "Returns the IPv4 loopback IP address (typically 127.0.0.1) as a string.",
        command: "getIpOfLoopBackIp4",
        methodSignature: "getIpOfLoopBackIp4(): String",
        fields: [],
        returnType: "String",
    },

    getLoopBackAndIp4Only: {
        blockId: "",
        methodId: "getLoopBackAndIp4Only",
        type: "getLoopBackAndIp4Only",
        classObject: "NetworkUtils",
        name: "getLoopBackAndIp4Only",
        label: "Get Loopback and IPv4 Only Interface",
        description: "Returns the loopback network interface with only IPv4 addresses (typically 'lo' or 'lo0') as a NetworkInterface object.",
        command: "getLoopBackAndIp4Only",
        methodSignature: "getLoopBackAndIp4Only(): NetworkInterface",
        fields: [],
        returnType: "NetworkInterface",
    },

    getLocalInterfaceAddress: {
        blockId: "",
        methodId: "getLocalInterfaceAddress",
        type: "getLocalInterfaceAddress",
        classObject: "NetworkUtils",
        name: "getLocalInterfaceAddress",
        label: "Get Local Interface Address",
        description: "Returns a list of InetAddress objects representing the local network interface addresses of the system.",
        command: "getLocalInterfaceAddress",
        methodSignature: "getLocalInterfaceAddress(): List<InetAddress>",
        fields: [],
        returnType: "List<InetAddress>",
    },

    getNetworkDiags: {
        blockId: "",
        methodId: "getNetworkDiags",
        type: "getNetworkDiags",
        classObject: "NetworkUtils",
        name: "getNetworkDiags",
        label: "Get Network Diagnostics",
        description: "Returns a string containing network diagnostic information about the system, such as interface status, IP addresses, etc.",
        command: "getNetworkDiags",
        methodSignature: "getNetworkDiags(): String",
        fields: [],
        returnType: "String",
    },

    dumpToConsole: {
        blockId: "",
        methodId: "dumpToConsole",
        type: "dumpToConsole",
        classObject: "NetworkUtils",
        name: "dumpToConsole",
        label: "Dump Network Interface Details to Console",
        description: "Dumps the details of the provided NetworkInterface to the console using the provided StringBuilder.",
        command: "dumpToConsole",
        methodSignature: "dumpToConsole(StringBuilder, NetworkInterface): void",
        fields: [
            {
                name: "StringBuilder",
                type: "text",
                label: "StringBuilder",
                placeholder: "Enter StringBuilder instance",
                value: "",
            },
            {
                name: "NetworkInterface",
                type: "text",
                label: "Network Interface",
                placeholder: "Enter NetworkInterface instance",
                value: "",
            },
        ],
        returnType: "void",
    },

    dumpAddresses: {
        blockId: "",
        methodId: "dumpAddresses",
        type: "dumpAddresses",
        classObject: "NetworkUtils",
        name: "dumpAddresses",
        label: "Dump Addresses to StringBuilder",
        description: "Dumps a list of InetAddress objects to the provided StringBuilder for console output.",
        command: "dumpAddresses",
        methodSignature: "dumpAddresses(StringBuilder, Iterable<InetAddress>): void",
        fields: [
            {
                name: "StringBuilder",
                type: "text",
                label: "StringBuilder",
                placeholder: "Enter StringBuilder instance",
                value: "",
            },
            {
                name: "InetAddresses",
                type: "number",
                label: "Iterable of InetAddress",
                placeholder: "Enter Iterable of InetAddress",
                value: "",
            },
        ],
        returnType: "void",
    },

    determineHostnameAndAddress: {
        blockId: "",
        methodId: "determineHostnameAndAddress",
        type: "determineHostnameAndAddress",
        classObject: "NetworkUtils",
        name: "determineHostnameAndAddress",
        label: "Determine Hostname and Address",
        description: "Determines and retrieves the system's hostname and IP address, typically for diagnostic or network-related purposes.",
        command: "determineHostnameAndAddress",
        methodSignature: "determineHostnameAndAddress(): void",
        fields: [],
        returnType: "void",
    },

    //class PortProber
    findFreePort: {
        blockId: "",
        methodId: "findFreePort",
        type: "findFreePort",
        classObject: "PortProber",
        name: "findFreePort",
        label: "Find Free Port",
        description: "Finds and returns a free port number available for use on the local system.",
        command: "findFreePort",
        methodSignature: "findFreePort(): int",
        fields: [],
        returnType: "int",
    },

    createAcceptablePort: {
        blockId: "",
        methodId: "createAcceptablePort",
        type: "createAcceptablePort",
        classObject: "PortProber",
        name: "createAcceptablePort",
        label: "Create Acceptable Port",
        description: "Creates and returns an acceptable port number, typically used for binding network services that are free and valid.",
        command: "createAcceptablePort",
        methodSignature: "createAcceptablePort(): int",
        fields: [],
        returnType: "int",
    },

    isFree: {
        blockId: "",
        methodId: "isFree",
        type: "isFree",
        classObject: "PortProber",
        name: "isFree",
        label: "Check If Port is Free",
        description: "Checks if the given port is free on the specified network interface or host.",
        command: "isFree",
        methodSignature: "isFree(String, int): boolean",
        fields: [
            {
                name: "String",
                type: "text",
                label: "Host or Network Address",
                placeholder: "Enter host or network interface name",
                value: "",
            },
            {
                name: "int",
                type: "number",
                label: "Port Number",
                placeholder: "Enter port number to check",
                value: "",
            },
        ],
        returnType: "boolean",
    },

    checkPortisFree: {
        blockId: "",
        methodId: "checkPortisFree",
        type: "checkPortisFree",
        classObject: "PortProber",
        name: "checkPortisFree",
        label: "Check If Port is Free",
        description: "Checks if the given port is free on the system and returns the port number if it's free, otherwise returns -1.",
        command: "checkPortisFree",
        methodSignature: "checkPortisFree(int): int",
        fields: [
            {
                name: "int",
                type: "number",
                label: "Port Number",
                placeholder: "Enter port number to check",
                value: "",
            },
        ],
        returnType: "int",
    },

    waitForPortUp: {
        blockId: "",
        methodId: "waitForPortUp",
        type: "waitForPortUp",
        classObject: "PortProber",
        name: "waitForPortUp",
        label: "Wait for Port to be Up",
        description: "Waits for the specified port to become available within the given timeout and unit of time.",
        command: "waitForPortUp",
        methodSignature: "waitForPortUp(int, int, TimeUnit): void",
        fields: [
            {
                name: "int",
                type: "number",
                label: "Port Number",
                placeholder: "Enter port number to check",
                value: "",
            },
            {
                name: "int",
                type: "number",
                label: "Timeout",
                placeholder: "Enter timeout value",
                value: "",
            },
            {
                name: "timeUnit",
                type: "select",
                options: [
                    {
                        value: "seconds",
                        label: "SECONDS",
                    },
                    {
                        value: "miliseconds",
                        label: "MILLISECONDS",
                    },
                    {
                        value: "minute",
                        label: "MINUTES",
                    },
                    {
                        value: "hours",
                        label: "HOURS",
                    },
                ],
                label: "TimeUnit",
                placeholder: "Select the Time Unit",
                value: "",
            },
        ],
        returnType: "void",
    },

    //class UrlChecker
    waitUntilAvailable: {
        blockId: "",
        methodId: "waitUntilAvailable",
        type: "waitUntilAvailable",
        classObject: "UrlChecker",
        name: "waitUntilAvailable",
        label: "Wait Until URL is Available",
        description: "Waits until the specified URL(s) are available, using a timeout and time unit for the wait duration.",
        command: "waitUntilAvailable",
        methodSignature: "waitUntilAvailable(long, TimeUnit, URL...): void",
        fields: [
            {
                name: "long",
                type: "number",
                label: "Timeout",
                placeholder: "Enter timeout value",
                value: "",
            },
            {
                name: "timeUnit",
                type: "select",
                options: [
                    {
                        value: "seconds",
                        label: "SECONDS",
                    },
                    {
                        value: "miliseconds",
                        label: "MILLISECONDS",
                    },
                    {
                        value: "minute",
                        label: "MINUTES",
                    },
                    {
                        value: "hours",
                        label: "HOURS",
                    },
                ],
                label: "TimeUnit",
                placeholder: "Select the Time Unit",
                value: "",
            },
            {
                name: "URL...",
                type: "text",
                label: "URLs to Check",
                placeholder: "Enter one or more URLs to check availability",
                value: "",
            },
        ],
        returnType: "void",
    },

    waitUntilUnavailable: {
        blockId: "",
        methodId: "waitUntilUnavailable",
        type: "waitUntilUnavailable",
        classObject: "UrlChecker",
        name: "waitUntilUnavailable",
        label: "Wait Until URL is Unavailable",
        description: "Waits until the specified URL becomes unavailable, using a timeout and time unit for the wait duration.",
        command: "waitUntilUnavailable",
        methodSignature: "waitUntilUnavailable(long, TimeUnit, URL): void",
        fields: [
            {
                name: "long",
                type: "number",
                label: "Timeout",
                placeholder: "Enter timeout value",
                value: "",
            },
            {
                name: "timeUnit",
                type: "select",
                options: [
                    {
                        value: "seconds",
                        label: "SECONDS",
                    },
                    {
                        value: "miliseconds",
                        label: "MILLISECONDS",
                    },
                    {
                        value: "minute",
                        label: "MINUTES",
                    },
                    {
                        value: "hours",
                        label: "HOURS",
                    },
                ],
                label: "TimeUnit",
                placeholder: "Select the Time Unit",
                value: "",
            },
            {
                name: "URL",
                type: "text",
                label: "URL to Check",
                placeholder: "Enter URL to check availability",
                value: "",
            },
        ],
        returnType: "void",
    },

    connectToUrl: {
        blockId: "",
        methodId: "connectToUrl",
        type: "connectToUrl",
        classObject: "UrlChecker",
        name: "connectToUrl",
        label: "Connect to URL",
        description: "Establishes a connection to the specified URL and returns the associated HttpURLConnection object.",
        command: "connectToUrl",
        methodSignature: "connectToUrl(URL): HttpURLConnection",
        fields: [
            {
                name: "URL",
                type: "text",
                label: "URL to Connect",
                placeholder: "Enter the URL to connect to",
                value: "",
            },
        ],
        returnType: "HttpURLConnection",
    },

    //class Urls
    urlEncode: {
        blockId: "",
        methodId: "urlEncode",
        type: "urlEncode",
        classObject: "Urls",
        name: "urlEncode",
        label: "URL Encode",
        description: "Encodes the provided string as a valid URL component.",
        command: "urlEncode",
        methodSignature: "urlEncode(String): String",
        fields: [
            {
                name: "String",
                type: "text",
                label: "Encode",
                placeholder: "Enter the string to encode",
                value: "",
            },
        ],
        returnType: "String",
    },

    fromUri: {
        blockId: "",
        methodId: "fromUri",
        type: "fromUri",
        classObject: "Urls",
        name: "fromUri",
        label: "Convert URI to URL",
        description: "Converts the given URI object to a URL object.",
        command: "fromUri",
        methodSignature: "fromUri(URI): URL",
        fields: [
            {
                name: "URI",
                type: "text",
                label: "URI to Convert",
                placeholder: "Enter the URI to convert to a URL",
                value: "",
            },
        ],
        returnType: "URL",
    },

    from: {
        blockId: "",
        methodId: "from",
        type: "from",
        classObject: "Urls",
        name: "from",
        label: "Create URI from String",
        description: "Creates a URI object from the provided string.",
        command: "from",
        methodSignature: "from(String): URI",
        fields: [
            {
                name: "String",
                type: "text",
                label: "String to Convert",
                placeholder: "Enter the string to create a URI",
                value: "",
            },
        ],
        returnType: "URI",
    },

    createHttpUri: {
        blockId: "",
        methodId: "createHttpUri",
        type: "createHttpUri",
        classObject: "Urls",
        name: "createHttpUri",
        label: "Create HTTP URI from String",
        description: "Creates a URI object with the HTTP scheme from the provided string.",
        command: "createHttpUri",
        methodSignature: "createHttpUri(String): URI",
        fields: [
            {
                name: "String",
                type: "text",
                label: "String to Convert",
                placeholder: "Enter the string to create an HTTP URI",
                value: "",
            },
        ],
        returnType: "URI",
    },

    //class PageMargin
    getTop: {
        blockId: "",
        methodId: "getTop",
        type: "getTop",
        classObject: "PageMargin",
        name: "getTop",
        label: "Get Top Position",
        description: "Returns the top position (in pixels) of an element, typically relative to its offset parent.",
        command: "getTop",
        methodSignature: "getTop(): double",
        fields: [],
        returnType: "double",
    },

    getBottom: {
        blockId: "",
        methodId: "getBottom",
        type: "getBottom",
        classObject: "PageMargin",
        name: "getBottom",
        label: "Get Bottom Position",
        description: "Returns the bottom position (in pixels) of an element, typically relative to its offset parent.",
        command: "getBottom",
        methodSignature: "getBottom(): double",
        fields: [],
        returnType: "double",
    },

    getLeft: {
        blockId: "",
        methodId: "getLeft",
        type: "getLeft",
        classObject: "PageMargin",
        name: "getLeft",
        label: "Get Left Position",
        description: "Returns the left position (in pixels) of an element, typically relative to its offset parent.",
        command: "getLeft",
        methodSignature: "getLeft(): double",
        fields: [],
        returnType: "double",
    },

    getRight: {
        blockId: "",
        methodId: "getRight",
        type: "getRight",
        classObject: "PageMargin",
        name: "getRight",
        label: "Get Right Position",
        description: "Returns the right position (in pixels) of an element, typically relative to its offset parent.",
        command: "getRight",
        methodSignature: "getRight(): double",
        fields: [],
        returnType: "double",
    },

    //class PageSize
    getHeights: {
        blockId: "",
        methodId: "getHeight",
        type: "getHeight",
        classObject: "PageSize",
        name: "getHeight",
        label: "Get Height",
        description: "Returns the height (in pixels) of an element.",
        command: "getHeight",
        methodSignature: "getHeight(): double",
        fields: [],
        returnType: "double",
    },

    getWidths: {
        blockId: "",
        methodId: "getWidth",
        type: "getWidth",
        classObject: "PageSize",
        name: "getWidth",
        label: "Get Width",
        description: "Returns the width (in pixels) of an element.",
        command: "getWidth",
        methodSignature: "getWidth(): double",
        fields: [],
        returnType: "double",
    },

    //class PrintOptions
    getOrientation: {
        blockId: "",
        methodId: "getOrientation",
        type: "getOrientation",
        classObject: "PrintOptions",
        name: "getOrientation",
        label: "Get Orientation",
        description: "Returns the current orientation of the device, typically either landscape or portrait.",
        command: "getOrientation",
        methodSignature: "getOrientation(): Orientation",
        fields: [],
        returnType: "Orientation",
    },

    setOrientation: {
        blockId: "",
        methodId: "setOrientation",
        type: "setOrientation",
        classObject: "PrintOptions",
        name: "setOrientation",
        label: "Set Orientation",
        description: "Sets the orientation of the device, either landscape or portrait.",
        command: "setOrientation",
        methodSignature: "setOrientation(Orientation): void",
        fields: [
            {
                name: "orientation",
                type: "select",
                label: "Orientation",
                options: [
                    { value: "PORTRAIT", label: "Portrait" },
                    { value: "LANDSCAPE", label: "Landscape" },
                ],
                placeholder: "Select the device orientation",
                value: "",
            },
        ],
        returnType: "void",
    },

    getPageRanges: {
        blockId: "",
        methodId: "getPageRanges",
        type: "getPageRanges",
        classObject: "PrintOptions",
        name: "getPageRanges",
        label: "Get Page Ranges",
        description: "Returns the available page ranges as an array of strings.",
        command: "getPageRanges",
        methodSignature: "getPageRanges(): String[]",
        fields: [],
        returnType: "String[]",
    },

    setPageRanges: {
        blockId: "",
        methodId: "setPageRanges",
        type: "setPageRanges",
        classObject: "PrintOptions",
        name: "setPageRanges",
        label: "Set Page Ranges",
        description: "Sets the page ranges for a document, taking a start page and additional page range values.",
        command: "setPageRanges",
        methodSignature: "setPageRanges(String, String...): void",
        fields: [
            {
                name: "pageName",
                type: "text",
                label: "Page Name",
                placeholder: "Enter Page Name",
                value: "",
            },
            {
                name: "pageRanges",
                type: "number",
                label: "Additional Page Ranges",
                placeholder: "Enter page ranges",
                value: "",
            },
        ],
        returnType: "void",
    },

    setBackground: {
        blockId: "",
        methodId: "setBackground",
        type: "setBackground",
        classObject: "PrintOptions",
        name: "setBackground",
        label: "Set Background",
        description: "Sets whether or not to display the background of the page. A boolean value determines this.",
        command: "setBackground",
        methodSignature: "setBackground(boolean): void",
        fields: [
            {
                name: "displayBackground",
                type: "checkbox",
                label: "Display Background",
                placeholder: "",
                value: "",
            },
        ],
        returnType: "void",
    },

    getBackground: {
        blockId: "",
        methodId: "getBackground",
        type: "getBackground",
        classObject: "PrintOptions",
        name: "getBackground",
        label: "Get Background",
        description: "Returns whether the background of the page is displayed or not.",
        command: "getBackground",
        methodSignature: "getBackground(): boolean",
        fields: [],
        returnType: "boolean",
    },

    setScale: {
        blockId: "",
        methodId: "setScale",
        type: "setScale",
        classObject: "PrintOptions",
        name: "setScale",
        label: "Set Scale",
        description: "Sets the scale of the page as a double value.",
        command: "setScale",
        methodSignature: "setScale(double): void",
        fields: [
            {
                name: "scale",
                type: "number",
                label: "Scale",
                placeholder: "Enter scale value",
                value: "",
            },
        ],
        returnType: "void",
    },

    getScale: {
        blockId: "",
        methodId: "getScale",
        type: "getScale",
        classObject: "PrintOptions",
        name: "getScale",
        label: "Get Scale",
        description: "Returns the current scale of the page as a double value.",
        command: "getScale",
        methodSignature: "getScale(): double",
        fields: [],
        returnType: "double",
    },

    getShrinkToFit: {
        blockId: "",
        methodId: "getShrinkToFit",
        type: "getShrinkToFit",
        classObject: "PrintOptions",
        name: "getShrinkToFit",
        label: "Get Shrink to Fit",
        description: "Returns whether the page content is set to shrink to fit.",
        command: "getShrinkToFit",
        methodSignature: "getShrinkToFit(): boolean",
        fields: [],
        returnType: "boolean",
    },

    setShrinkToFit: {
        blockId: "",
        methodId: "setShrinkToFit",
        type: "setShrinkToFit",
        classObject: "PrintOptions",
        name: "setShrinkToFit",
        label: "Set Shrink to Fit",
        description: "Sets whether the page content should shrink to fit. A boolean value determines this.",
        command: "setShrinkToFit",
        methodSignature: "setShrinkToFit(boolean): void",
        fields: [
            {
                name: "shrinkToFit",
                type: "checkbox",
                label: "Shrink to Fit",
                placeholder: "",
                value: "",
            },
        ],
        returnType: "void",
    },

    setPageSize: {
        blockId: "",
        methodId: "setPageSize",
        type: "setPageSize",
        classObject: "PrintOptions",
        name: "setPageSize",
        label: "Set Page Size",
        description: "Sets the size of the page using the specified PageSize object.",
        command: "setPageSize",
        methodSignature: "setPageSize(PageSize): void",
        fields: [
            {
                name: "pageSize",
                type: "select",
                label: "Page Size",
                placeholder: "Select a page size",
                value: "",
                options: [
                    { value: "A0", label: "A0" },
                    { value: "A1", label: "A1" },
                    { value: "A2", label: "A2" },
                    { value: "A3", label: "A3" },
                    { value: "A4", label: "A4" },
                    { value: "A5", label: "A5" },
                    { value: "A6", label: "A6" },
                    { value: "Letter", label: "Letter" },
                    { value: "Legal", label: "Legal" },
                    { value: "Tabloid", label: "Tabloid" },
                ],
            },
        ],
        returnType: "void",
    },

    setPageMargin: {
        blockId: "",
        methodId: "setPageMargin",
        type: "setPageMargin",
        classObject: "PrintOptions",
        name: "setPageMargin",
        label: "Set Page Margin",
        description: "Sets the margin of the page using the specified PageMargin object.",
        command: "setPageMargin",
        methodSignature: "setPageMargin(PageMargin): void",
        fields: [
            {
                name: "top",
                type: "number",
                label: "Top Margin",
                placeholder: "Enter top margin",
                value: "",
            },
            {
                name: "bottom",
                type: "number",
                label: "Bottom Margin",
                placeholder: "Enter bottom margin",
                value: "",
            },
            {
                name: "left",
                type: "number",
                label: "Left Margin",
                placeholder: "Enter left margin",
                value: "",
            },
            {
                name: "right",
                type: "number",
                label: "Right Margin",
                placeholder: "Enter right margin",
                value: "",
            },
            {
                name: "unit",
                type: "select",
                label: "Unit",
                options: [
                    { value: "inches", label: "Inches" },
                    { value: "millimeters", label: "Millimeters" },
                ],
                placeholder: "Select unit for margins",
                value: "",
            },
        ],
        returnType: "void",
    },

    getPageSize: {
        blockId: "",
        methodId: "getPageSize",
        type: "getPageSize",
        classObject: "PrintOptions",
        name: "getPageSize",
        label: "Get Page Size",
        description: "Returns the current size of the page as a PageSize object.",
        command: "getPageSize",
        methodSignature: "getPageSize(): PageSize",
        fields: [],
        returnType: "PageSize",
    },

    getPageMargin: {
        blockId: "",
        methodId: "getPageMargin",
        type: "getPageMargin",
        classObject: "PrintOptions",
        name: "getPageMargin",
        label: "Get Page Margin",
        description: "Returns the current margin of the page as a PageMargin object.",
        command: "getPageMargin",
        methodSignature: "getPageMargin(): PageMargin",
        fields: [],
        returnType: "PageMargin",
    },

    toMap: {
        blockId: "",
        methodId: "toMap",
        type: "toMap",
        classObject: "PrintOptions", // Replace with the appropriate class name
        name: "toMap",
        label: "To Map",
        description: "Converts the current object to a Map with String keys and Object values.",
        command: "toMap",
        methodSignature: "toMap(): Map<String, Object>",
        fields: [],
        returnType: "Map<String, Object>",
    },

    //class Credential
    createNonResidentCredential: {
        blockId: "",
        methodId: "createNonResidentCredential",
        type: "createNonResidentCredential",
        classObject: "Credential", // Replace with the appropriate class name
        name: "createNonResidentCredential",
        label: "Create Non-Resident Credential",
        description: "Creates a non-resident credential using a byte array, a string, a PKCS8EncodedKeySpec, and an integer.",
        command: "createNonResidentCredential",
        methodSignature: "createNonResidentCredential(byte[], String, PKCS8EncodedKeySpec, int): Credential",
        fields: [
            {
                name: "credentialData",
                type: "file",
                label: "Credential Data (byte array)",
                placeholder: "Upload credential data file",
                value: "",
            },
            {
                name: "credentialName",
                type: "text",
                label: "Credential Name",
                placeholder: "Enter credential name",
                value: "",
            },
            {
                name: "keySpec",
                type: "file",
                label: "Key Spec (PKCS8EncodedKeySpec)",
                placeholder: "Upload key spec file",
                value: "",
            },
            {
                name: "intValue",
                type: "number",
                label: "Integer Value",
                placeholder: "Enter an integer value",
                value: "",
            },
        ],
        returnType: "Credential",
    },

    createResidentCredential: {
        blockId: "",
        methodId: "createResidentCredential",
        type: "createResidentCredential",
        classObject: "Credential", // Replace with the appropriate class name
        name: "createResidentCredential",
        label: "Create Resident Credential",
        description: "Creates a resident credential using a byte array, a string, a PKCS8EncodedKeySpec, a second byte array, and an integer.",
        command: "createResidentCredential",
        methodSignature: "createResidentCredential(byte[], String, PKCS8EncodedKeySpec, byte[], int): Credential",
        fields: [
            {
                name: "credentialData",
                type: "file",
                label: "Credential Data (byte array)",
                placeholder: "Upload credential data file",
                value: "",
            },
            {
                name: "credentialName",
                type: "text",
                label: "Credential Name",
                placeholder: "Enter credential name",
                value: "",
            },
            {
                name: "keySpec",
                type: "file",
                label: "Key Spec (PKCS8EncodedKeySpec)",
                placeholder: "Upload key spec file",
                value: "",
            },
            {
                name: "additionalData",
                type: "file",
                label: "Additional Data (byte array)",
                placeholder: "Upload additional data file",
                value: "",
            },
            {
                name: "intValue",
                type: "number",
                label: "Integer Value",
                placeholder: "Enter an integer value",
                value: "",
            },
        ],
        returnType: "Credential",
    },

    fromMap: {
        blockId: "",
        methodId: "fromMap",
        type: "fromMap",
        classObject: "Credential",
        name: "fromMap",
        label: "From Map",
        description: "Creates a Credential object from a map with String keys and Object values.",
        command: "fromMap",
        methodSignature: "fromMap(Map<String, Object> data): Credential",
        fields: [
            {
                name: "credentialId",
                type: "text",
                label: "Credential ID",
                placeholder: "Enter base64 encoded byte array",
                value: "",
            },
            {
                name: "username",
                type: "text",
                label: "Username",
                placeholder: "Enter username string",
                value: "",
            },
            {
                name: "privateKeySpec",
                type: "text",
                label: "Private Key Spec",
                placeholder: "Enter base64 encoded PKCS8 key spec",
                value: "",
            },
            {
                name: "metadata",
                type: "text",
                label: "Metadata",
                placeholder: "Enter base64 encoded byte array",
                value: "",
            },
            {
                name: "keyHandle",
                type: "number",
                label: "Key Handle",
                placeholder: "Enter integer key handle",
                value: null,
            },
        ],
        returnType: "Credential",
    },

    getId: {
        blockId: "",
        methodId: "getId",
        type: "getId",
        classObject: "Credential", // Replace with the appropriate class name
        name: "getId",
        label: "Get ID",
        description: "Retrieves the ID of the credential as a byte array.",
        command: "getId",
        methodSignature: "getId(): byte[]",
        fields: [],
        returnType: "byte[]",
    },

    isResidentCredential: {
        blockId: "",
        methodId: "isResidentCredential",
        type: "isResidentCredential",
        classObject: "Credential", // Replace with the appropriate class name
        name: "isResidentCredential",
        label: "Is Resident Credential",
        description: "Checks if the credential is a resident credential.",
        command: "isResidentCredential",
        methodSignature: "isResidentCredential(): boolean",
        fields: [],
        returnType: "boolean",
    },

    getRpld: {
        blockId: "",
        methodId: "getRpld",
        type: "getRpld",
        classObject: "Credential", // Replace with the appropriate class name
        name: "getRpld",
        label: "Get Rpld",
        description: "Retrieves the RPLD (Resident Public Key Identifier) as a String.",
        command: "getRpld",
        methodSignature: "getRpld(): String",
        fields: [],
        returnType: "String",
    },

    getPrivateKey: {
        blockId: "",
        methodId: "getPrivateKey",
        type: "getPrivateKey",
        classObject: "Credential", // Replace with the appropriate class name
        name: "getPrivateKey",
        label: "Get Private Key",
        description: "Retrieves the private key of the credential as a PKCS8EncodedKeySpec object.",
        command: "getPrivateKey",
        methodSignature: "getPrivateKey(): PKCS8EncodedKeySpec",
        fields: [],
        returnType: "PKCS8EncodedKeySpec",
    },

    getUserHandle: {
        blockId: "",
        methodId: "getUserHandle",
        type: "getUserHandle",
        classObject: "Credential", // Replace with the appropriate class name
        name: "getUserHandle",
        label: "Get User Handle",
        description: "Retrieves the user handle as a byte array.",
        command: "getUserHandle",
        methodSignature: "getUserHandle(): byte[]",
        fields: [],
        returnType: "byte[]",
    },

    getSignCount: {
        blockId: "",
        methodId: "getSignCount",
        type: "getSignCount",
        classObject: "Credential", // Replace with the appropriate class name
        name: "getSignCount",
        label: "Get Sign Count",
        description: "Retrieves the sign count associated with the credential as an integer.",
        command: "getSignCount",
        methodSignature: "getSignCount(): int",
        fields: [],
        returnType: "int",
    },

    //interface HasVirtualAuthenticator
    addVirtualAuthenticator: {
        blockId: "",
        methodId: "addVirtualAuthenticator",
        type: "addVirtualAuthenticator",
        classObject: "HasVirtualAuthenticator",
        name: "addVirtualAuthenticator",
        label: "Add Virtual Authenticator",
        description: "Adds a virtual authenticator with the specified options.",
        command: "addVirtualAuthenticator",
        methodSignature: "addVirtualAuthenticator(VirtualAuthenticatorOptions options): VirtualAuthenticator",
        fields: [
            {
                name: "protocol",
                type: "select",
                label: "Protocol",
                options: [
                    { value: "CTAP2", label: "CTAP2" },
                    { value: "U2F", label: "U2F" },
                ],
                placeholder: "Select the authentication protocol",
                value: "",
            },
            {
                name: "transport",
                type: "select",
                label: "Transport",
                options: [
                    { value: "USB", label: "USB" },
                    { value: "NFC", label: "NFC" },
                    { value: "BLE", label: "Bluetooth (BLE)" },
                ],
                placeholder: "Select the transport method",
                value: "",
            },
            {
                name: "hasResidentKey",
                type: "checkbox",
                label: "Has Resident Key",
                value: true,
            },
            {
                name: "hasUserVerification",
                type: "checkbox",
                label: "Has User Verification",
                value: true,
            },
            {
                name: "isUserConsenting",
                type: "checkbox",
                label: "Is User Consenting",
                value: true,
            },
            {
                name: "isUserVerified",
                type: "checkbox",
                label: "Is User Verified",
                value: false,
            },
        ],
        returnType: "VirtualAuthenticator",
    },

    removeVirtualAuthenticator: {
        blockId: "",
        methodId: "removeVirtualAuthenticator",
        type: "removeVirtualAuthenticator",
        classObject: "HasVirtualAuthenticator",
        name: "removeVirtualAuthenticator",
        label: "Remove Virtual Authenticator",
        description: "Removes the specified virtual authenticator.",
        command: "removeVirtualAuthenticator",
        methodSignature: "removeVirtualAuthenticator(VirtualAuthenticator authenticator): void",
        fields: [
            {
                name: "authenticatorId",
                type: "text",
                label: "Authenticator ID",
                placeholder: "Enter unique authenticator ID",
                value: "",
            },
        ],
        returnType: "void",
    },

    //interface VirtualAuthenticator
    getId: {
        blockId: "",
        methodId: "getId",
        type: "getId",
        classObject: "VirtualAuthenticator", // Replace with the appropriate class name
        name: "getId",
        label: "Get ID",
        description: "Retrieves the ID of the credential as a string.",
        command: "getId",
        methodSignature: "getId(): String",
        fields: [],
        returnType: "String",
    },

    addCredential: {
        blockId: "",
        methodId: "addCredential",
        type: "addCredential",
        classObject: "VirtualAuthenticator",
        name: "addCredential",
        label: "Add Credential",
        description: "Adds a new credential to the credential manager.",
        command: "addCredential",
        methodSignature: "addCredential(Credential credential): void",
        fields: [
            {
                name: "id",
                type: "text",
                label: "Credential ID",
                placeholder: "Enter unique identifier (base64/hex encoded)",
                value: "",
            },
            {
                name: "rpid",
                type: "text",
                label: "Relying Party ID",
                placeholder: "Enter relying party identifier",
                value: "",
            },
            {
                name: "privateKey",
                type: "text",
                label: "Private Key",
                placeholder: "Enter private key (base64 encoded)",
                value: "",
            },
            {
                name: "userHandle",
                type: "text",
                label: "User Handle",
                placeholder: "Enter user handle (optional, base64/hex encoded)",
                value: "",
            },
            {
                name: "signCount",
                type: "number",
                label: "Signature Counter",
                placeholder: "Enter signature counter value",
                value: "",
            },
        ],
        returnType: "void",
    },

    getCredentials: {
        blockId: "",
        methodId: "getCredentials",
        type: "getCredentials",
        classObject: "VirtualAuthenticator", // Replace with the appropriate class name
        name: "getCredentials",
        label: "Get Credentials",
        description: "Retrieves a list of all credentials managed by the credential manager.",
        command: "getCredentials",
        methodSignature: "getCredentials(): List<Credential>",
        fields: [],
        returnType: "List<Credential>",
    },

    removeCredential: {
        blockId: "",
        methodId: "removeCredential",
        type: "removeCredential",
        classObject: "VirtualAuthenticator", // Replace with the appropriate class name
        name: "removeCredential",
        label: "Remove Credential",
        description: "Removes the credential associated with the given ID (byte array).",
        command: "removeCredential",
        methodSignature: "removeCredential(byte[] credentialId): void",
        fields: [
            {
                name: "credentialId",
                type: "array",
                label: "Credential ID",
                placeholder: "Enter credential ID as byte array",
                value: "",
            },
        ],
        returnType: "void",
    },

    removeCredentials: {
        blockId: "",
        methodId: "removeCredential",
        type: "removeCredential",
        classObject: "VirtualAuthenticator", // Replace with the appropriate class name
        name: "removeCredential",
        label: "Remove Credential",
        description: "Removes the credential associated with the given ID (String).",
        command: "removeCredential",
        methodSignature: "removeCredential(String credentialId): void",
        fields: [
            {
                name: "credentialId",
                type: "text",
                label: "Credential ID",
                placeholder: "Enter credential ID as string",
                value: "",
            },
        ],
        returnType: "void",
    },

    removeAllCredentials: {
        blockId: "",
        methodId: "removeAllCredentials",
        type: "removeAllCredentials",
        classObject: "VirtualAuthenticator", // Replace with the appropriate class name
        name: "removeAllCredentials",
        label: "Remove All Credentials",
        description: "Removes all credentials from the credential manager.",
        command: "removeAllCredentials",
        methodSignature: "removeAllCredentials(): void",
        fields: [],
        returnType: "void",
    },

    setUserVerified: {
        blockId: "",
        methodId: "setUserVerified",
        type: "setUserVerified",
        classObject: "VirtualAuthenticator", // Replace with the appropriate class name
        name: "setUserVerified",
        label: "Set User Verified",
        description: "Sets the user verification status (true for verified, false for not verified).",
        command: "setUserVerified",
        methodSignature: "setUserVerified(boolean verified): void",
        fields: [
            {
                name: "verified",
                type: "checkbox",
                label: "User Verified",
                placeholder: "",
                value: false, // Default value can be set to false
            },
        ],
        returnType: "void",
    },

    //class VirtualAuthenticatorOptions
    setProtocol: {
        blockId: "",
        methodId: "setProtocol",
        type: "setProtocol",
        classObject: "VirtualAuthenticatorOptions",
        name: "setProtocol",
        label: "Set Protocol",
        description: "Sets the protocol for the virtual authenticator.",
        command: "setProtocol",
        methodSignature: "setProtocol(Protocol protocol): VirtualAuthenticatorOptions",
        fields: [
            {
                name: "protocol",
                type: "select",
                label: "Protocol",
                placeholder: "Select protocol",
                value: "",
                options: [
                    { value: "CTAP2", label: "CTAP2" },
                    { value: "U2F", label: "U2F" },
                ],
            },
        ],
        returnType: "VirtualAuthenticatorOptions",
    },

    //##########################TESTNG VALIDATION METHODS###################################//
    assertEquals: {
        blockId: "",
        methodId: "",
        type: "assertEquals",
        classObject: "Assertions",
        name: "assertEquals",
        label: "Assert Equals",
        description: "Asserts that the expected value equals the actual value.",
        command: "assertEquals",
        methodSignature: "assertEquals(Object expected, Object actual, String message): void",
        fields: [
            {
                name: "expected",
                type: "text",
                label: "Expected",
                placeholder: "Enter expected value",
                value: "expectedValue",
            },
            {
                name: "actual",
                type: "text",
                label: "Actual",
                placeholder: "Enter actual value",
                value: "actualValue",
            },
            {
                name: "message",
                type: "text",
                label: "Message",
                placeholder: "Enter failure message",
                value: "Expected value did not match the actual value.",
            },
        ],
        returnType: "void",
    },
};
